import { c as commonjsGlobal, g as getDefaultExportFromCjs, s as sha224$1, a as sha256, b as borc, d as src$1, e as ed25519, f as buffer, A as AuthClient, h as getAugmentedNamespace } from "./assets/index-f01xL5Bh.js";
const scriptRel = "modulepreload";
const assetsURL = function(dep) {
  return "/" + dep;
};
const seen = {};
const __vitePreload = function preload(baseModule, deps, importerUrl) {
  let promise = Promise.resolve();
  if (deps && deps.length > 0) {
    const links = document.getElementsByTagName("link");
    promise = Promise.all(deps.map((dep) => {
      dep = assetsURL(dep);
      if (dep in seen)
        return;
      seen[dep] = true;
      const isCss = dep.endsWith(".css");
      const cssSelector = isCss ? '[rel="stylesheet"]' : "";
      const isBaseRelative = !!importerUrl;
      if (isBaseRelative) {
        for (let i2 = links.length - 1; i2 >= 0; i2--) {
          const link2 = links[i2];
          if (link2.href === dep && (!isCss || link2.rel === "stylesheet")) {
            return;
          }
        }
      } else if (document.querySelector(`link[href="${dep}"]${cssSelector}`)) {
        return;
      }
      const link = document.createElement("link");
      link.rel = isCss ? "stylesheet" : scriptRel;
      if (!isCss) {
        link.as = "script";
        link.crossOrigin = "";
      }
      link.href = dep;
      document.head.appendChild(link);
      if (isCss) {
        return new Promise((res, rej) => {
          link.addEventListener("load", res);
          link.addEventListener("error", () => rej(new Error(`Unable to preload CSS for ${dep}`)));
        });
      }
    }));
  }
  return promise.then(() => baseModule()).catch((err) => {
    const e2 = new Event("vite:preloadError", { cancelable: true });
    e2.payload = err;
    window.dispatchEvent(e2);
    if (!e2.defaultPrevented) {
      throw err;
    }
  });
};
var n$1, l$2, u$3, i$2, o$2, r$2, f$3, e$1, c$2, s$2, a$2, h$1 = {}, p$2 = [], v$1 = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i, y$1 = Array.isArray;
function d$1(n2, l2) {
  for (var u2 in l2)
    n2[u2] = l2[u2];
  return n2;
}
function w$3(n2) {
  var l2 = n2.parentNode;
  l2 && l2.removeChild(n2);
}
function _$1(l2, u2, t2) {
  var i2, o2, r2, f2 = {};
  for (r2 in u2)
    "key" == r2 ? i2 = u2[r2] : "ref" == r2 ? o2 = u2[r2] : f2[r2] = u2[r2];
  if (arguments.length > 2 && (f2.children = arguments.length > 3 ? n$1.call(arguments, 2) : t2), "function" == typeof l2 && null != l2.defaultProps)
    for (r2 in l2.defaultProps)
      void 0 === f2[r2] && (f2[r2] = l2.defaultProps[r2]);
  return g$2(l2, f2, i2, o2, null);
}
function g$2(n2, t2, i2, o2, r2) {
  var f2 = { type: n2, props: t2, key: i2, ref: o2, __k: null, __: null, __b: 0, __e: null, __d: void 0, __c: null, constructor: void 0, __v: null == r2 ? ++u$3 : r2, __i: -1, __u: 0 };
  return null == r2 && null != l$2.vnode && l$2.vnode(f2), f2;
}
function m$2() {
  return { current: null };
}
function k$3(n2) {
  return n2.children;
}
function b$1(n2, l2) {
  this.props = n2, this.context = l2;
}
function x(n2, l2) {
  if (null == l2)
    return n2.__ ? x(n2.__, n2.__i + 1) : null;
  for (var u2; l2 < n2.__k.length; l2++)
    if (null != (u2 = n2.__k[l2]) && null != u2.__e)
      return u2.__e;
  return "function" == typeof n2.type ? x(n2) : null;
}
function C$3(n2) {
  var l2, u2;
  if (null != (n2 = n2.__) && null != n2.__c) {
    for (n2.__e = n2.__c.base = null, l2 = 0; l2 < n2.__k.length; l2++)
      if (null != (u2 = n2.__k[l2]) && null != u2.__e) {
        n2.__e = n2.__c.base = u2.__e;
        break;
      }
    return C$3(n2);
  }
}
function M$1(n2) {
  (!n2.__d && (n2.__d = true) && i$2.push(n2) && !P$1.__r++ || o$2 !== l$2.debounceRendering) && ((o$2 = l$2.debounceRendering) || r$2)(P$1);
}
function P$1() {
  var n2, u2, t2, o2, r2, e2, c2, s2;
  for (i$2.sort(f$3); n2 = i$2.shift(); )
    n2.__d && (u2 = i$2.length, o2 = void 0, e2 = (r2 = (t2 = n2).__v).__e, c2 = [], s2 = [], t2.__P && ((o2 = d$1({}, r2)).__v = r2.__v + 1, l$2.vnode && l$2.vnode(o2), O$1(t2.__P, o2, r2, t2.__n, t2.__P.namespaceURI, 32 & r2.__u ? [e2] : null, c2, null == e2 ? x(r2) : e2, !!(32 & r2.__u), s2), o2.__v = r2.__v, o2.__.__k[o2.__i] = o2, j$2(c2, o2, s2), o2.__e != e2 && C$3(o2)), i$2.length > u2 && i$2.sort(f$3));
  P$1.__r = 0;
}
function S$1(n2, l2, u2, t2, i2, o2, r2, f2, e2, c2, s2) {
  var a2, v2, y2, d2, w2, _2 = t2 && t2.__k || p$2, g2 = l2.length;
  for (u2.__d = e2, $$1(u2, l2, _2), e2 = u2.__d, a2 = 0; a2 < g2; a2++)
    null != (y2 = u2.__k[a2]) && "boolean" != typeof y2 && "function" != typeof y2 && (v2 = -1 === y2.__i ? h$1 : _2[y2.__i] || h$1, y2.__i = a2, O$1(n2, y2, v2, i2, o2, r2, f2, e2, c2, s2), d2 = y2.__e, y2.ref && v2.ref != y2.ref && (v2.ref && N$1(v2.ref, null, y2), s2.push(y2.ref, y2.__c || d2, y2)), null == w2 && null != d2 && (w2 = d2), 65536 & y2.__u || v2.__k === y2.__k ? (e2 && !e2.isConnected && (e2 = x(v2)), e2 = I$1(y2, e2, n2)) : "function" == typeof y2.type && void 0 !== y2.__d ? e2 = y2.__d : d2 && (e2 = d2.nextSibling), y2.__d = void 0, y2.__u &= -196609);
  u2.__d = e2, u2.__e = w2;
}
function $$1(n2, l2, u2) {
  var t2, i2, o2, r2, f2, e2 = l2.length, c2 = u2.length, s2 = c2, a2 = 0;
  for (n2.__k = [], t2 = 0; t2 < e2; t2++)
    r2 = t2 + a2, null != (i2 = n2.__k[t2] = null == (i2 = l2[t2]) || "boolean" == typeof i2 || "function" == typeof i2 ? null : "string" == typeof i2 || "number" == typeof i2 || "bigint" == typeof i2 || i2.constructor == String ? g$2(null, i2, null, null, null) : y$1(i2) ? g$2(k$3, { children: i2 }, null, null, null) : void 0 === i2.constructor && i2.__b > 0 ? g$2(i2.type, i2.props, i2.key, i2.ref ? i2.ref : null, i2.__v) : i2) ? (i2.__ = n2, i2.__b = n2.__b + 1, f2 = L$2(i2, u2, r2, s2), i2.__i = f2, o2 = null, -1 !== f2 && (s2--, (o2 = u2[f2]) && (o2.__u |= 131072)), null == o2 || null === o2.__v ? (-1 == f2 && a2--, "function" != typeof i2.type && (i2.__u |= 65536)) : f2 !== r2 && (f2 === r2 + 1 ? a2++ : f2 > r2 ? s2 > e2 - r2 ? a2 += f2 - r2 : a2-- : f2 < r2 ? f2 == r2 - 1 && (a2 = f2 - r2) : a2 = 0, f2 !== t2 + a2 && (i2.__u |= 65536))) : (o2 = u2[r2]) && null == o2.key && o2.__e && 0 == (131072 & o2.__u) && (o2.__e == n2.__d && (n2.__d = x(o2)), V$1(o2, o2, false), u2[r2] = null, s2--);
  if (s2)
    for (t2 = 0; t2 < c2; t2++)
      null != (o2 = u2[t2]) && 0 == (131072 & o2.__u) && (o2.__e == n2.__d && (n2.__d = x(o2)), V$1(o2, o2));
}
function I$1(n2, l2, u2) {
  var t2, i2;
  if ("function" == typeof n2.type) {
    for (t2 = n2.__k, i2 = 0; t2 && i2 < t2.length; i2++)
      t2[i2] && (t2[i2].__ = n2, l2 = I$1(t2[i2], l2, u2));
    return l2;
  }
  n2.__e != l2 && (u2.insertBefore(n2.__e, l2 || null), l2 = n2.__e);
  do {
    l2 = l2 && l2.nextSibling;
  } while (null != l2 && 8 === l2.nodeType);
  return l2;
}
function H$1(n2, l2) {
  return l2 = l2 || [], null == n2 || "boolean" == typeof n2 || (y$1(n2) ? n2.some(function(n3) {
    H$1(n3, l2);
  }) : l2.push(n2)), l2;
}
function L$2(n2, l2, u2, t2) {
  var i2 = n2.key, o2 = n2.type, r2 = u2 - 1, f2 = u2 + 1, e2 = l2[u2];
  if (null === e2 || e2 && i2 == e2.key && o2 === e2.type && 0 == (131072 & e2.__u))
    return u2;
  if (t2 > (null != e2 && 0 == (131072 & e2.__u) ? 1 : 0))
    for (; r2 >= 0 || f2 < l2.length; ) {
      if (r2 >= 0) {
        if ((e2 = l2[r2]) && 0 == (131072 & e2.__u) && i2 == e2.key && o2 === e2.type)
          return r2;
        r2--;
      }
      if (f2 < l2.length) {
        if ((e2 = l2[f2]) && 0 == (131072 & e2.__u) && i2 == e2.key && o2 === e2.type)
          return f2;
        f2++;
      }
    }
  return -1;
}
function T$3(n2, l2, u2) {
  "-" === l2[0] ? n2.setProperty(l2, null == u2 ? "" : u2) : n2[l2] = null == u2 ? "" : "number" != typeof u2 || v$1.test(l2) ? u2 : u2 + "px";
}
function A$3(n2, l2, u2, t2, i2) {
  var o2;
  n:
    if ("style" === l2)
      if ("string" == typeof u2)
        n2.style.cssText = u2;
      else {
        if ("string" == typeof t2 && (n2.style.cssText = t2 = ""), t2)
          for (l2 in t2)
            u2 && l2 in u2 || T$3(n2.style, l2, "");
        if (u2)
          for (l2 in u2)
            t2 && u2[l2] === t2[l2] || T$3(n2.style, l2, u2[l2]);
      }
    else if ("o" === l2[0] && "n" === l2[1])
      o2 = l2 !== (l2 = l2.replace(/(PointerCapture)$|Capture$/i, "$1")), l2 = l2.toLowerCase() in n2 || "onFocusOut" === l2 || "onFocusIn" === l2 ? l2.toLowerCase().slice(2) : l2.slice(2), n2.l || (n2.l = {}), n2.l[l2 + o2] = u2, u2 ? t2 ? u2.u = t2.u : (u2.u = e$1, n2.addEventListener(l2, o2 ? s$2 : c$2, o2)) : n2.removeEventListener(l2, o2 ? s$2 : c$2, o2);
    else {
      if ("http://www.w3.org/2000/svg" == i2)
        l2 = l2.replace(/xlink(H|:h)/, "h").replace(/sName$/, "s");
      else if ("width" != l2 && "height" != l2 && "href" != l2 && "list" != l2 && "form" != l2 && "tabIndex" != l2 && "download" != l2 && "rowSpan" != l2 && "colSpan" != l2 && "role" != l2 && l2 in n2)
        try {
          n2[l2] = null == u2 ? "" : u2;
          break n;
        } catch (n3) {
        }
      "function" == typeof u2 || (null == u2 || false === u2 && "-" !== l2[4] ? n2.removeAttribute(l2) : n2.setAttribute(l2, u2));
    }
}
function F$1(n2) {
  return function(u2) {
    if (this.l) {
      var t2 = this.l[u2.type + n2];
      if (null == u2.t)
        u2.t = e$1++;
      else if (u2.t < t2.u)
        return;
      return t2(l$2.event ? l$2.event(u2) : u2);
    }
  };
}
function O$1(n2, u2, t2, i2, o2, r2, f2, e2, c2, s2) {
  var a2, h2, p2, v2, w2, _2, g2, m2, x2, C2, M2, P2, $2, I2, H2, L2 = u2.type;
  if (void 0 !== u2.constructor)
    return null;
  128 & t2.__u && (c2 = !!(32 & t2.__u), r2 = [e2 = u2.__e = t2.__e]), (a2 = l$2.__b) && a2(u2);
  n:
    if ("function" == typeof L2)
      try {
        if (m2 = u2.props, x2 = (a2 = L2.contextType) && i2[a2.__c], C2 = a2 ? x2 ? x2.props.value : a2.__ : i2, t2.__c ? g2 = (h2 = u2.__c = t2.__c).__ = h2.__E : ("prototype" in L2 && L2.prototype.render ? u2.__c = h2 = new L2(m2, C2) : (u2.__c = h2 = new b$1(m2, C2), h2.constructor = L2, h2.render = q$1), x2 && x2.sub(h2), h2.props = m2, h2.state || (h2.state = {}), h2.context = C2, h2.__n = i2, p2 = h2.__d = true, h2.__h = [], h2._sb = []), null == h2.__s && (h2.__s = h2.state), null != L2.getDerivedStateFromProps && (h2.__s == h2.state && (h2.__s = d$1({}, h2.__s)), d$1(h2.__s, L2.getDerivedStateFromProps(m2, h2.__s))), v2 = h2.props, w2 = h2.state, h2.__v = u2, p2)
          null == L2.getDerivedStateFromProps && null != h2.componentWillMount && h2.componentWillMount(), null != h2.componentDidMount && h2.__h.push(h2.componentDidMount);
        else {
          if (null == L2.getDerivedStateFromProps && m2 !== v2 && null != h2.componentWillReceiveProps && h2.componentWillReceiveProps(m2, C2), !h2.__e && (null != h2.shouldComponentUpdate && false === h2.shouldComponentUpdate(m2, h2.__s, C2) || u2.__v === t2.__v)) {
            for (u2.__v !== t2.__v && (h2.props = m2, h2.state = h2.__s, h2.__d = false), u2.__e = t2.__e, u2.__k = t2.__k, u2.__k.forEach(function(n3) {
              n3 && (n3.__ = u2);
            }), M2 = 0; M2 < h2._sb.length; M2++)
              h2.__h.push(h2._sb[M2]);
            h2._sb = [], h2.__h.length && f2.push(h2);
            break n;
          }
          null != h2.componentWillUpdate && h2.componentWillUpdate(m2, h2.__s, C2), null != h2.componentDidUpdate && h2.__h.push(function() {
            h2.componentDidUpdate(v2, w2, _2);
          });
        }
        if (h2.context = C2, h2.props = m2, h2.__P = n2, h2.__e = false, P2 = l$2.__r, $2 = 0, "prototype" in L2 && L2.prototype.render) {
          for (h2.state = h2.__s, h2.__d = false, P2 && P2(u2), a2 = h2.render(h2.props, h2.state, h2.context), I2 = 0; I2 < h2._sb.length; I2++)
            h2.__h.push(h2._sb[I2]);
          h2._sb = [];
        } else
          do {
            h2.__d = false, P2 && P2(u2), a2 = h2.render(h2.props, h2.state, h2.context), h2.state = h2.__s;
          } while (h2.__d && ++$2 < 25);
        h2.state = h2.__s, null != h2.getChildContext && (i2 = d$1(d$1({}, i2), h2.getChildContext())), p2 || null == h2.getSnapshotBeforeUpdate || (_2 = h2.getSnapshotBeforeUpdate(v2, w2)), S$1(n2, y$1(H2 = null != a2 && a2.type === k$3 && null == a2.key ? a2.props.children : a2) ? H2 : [H2], u2, t2, i2, o2, r2, f2, e2, c2, s2), h2.base = u2.__e, u2.__u &= -161, h2.__h.length && f2.push(h2), g2 && (h2.__E = h2.__ = null);
      } catch (n3) {
        u2.__v = null, c2 || null != r2 ? (u2.__e = e2, u2.__u |= c2 ? 160 : 32, r2[r2.indexOf(e2)] = null) : (u2.__e = t2.__e, u2.__k = t2.__k), l$2.__e(n3, u2, t2);
      }
    else
      null == r2 && u2.__v === t2.__v ? (u2.__k = t2.__k, u2.__e = t2.__e) : u2.__e = z$2(t2.__e, u2, t2, i2, o2, r2, f2, c2, s2);
  (a2 = l$2.diffed) && a2(u2);
}
function j$2(n2, u2, t2) {
  u2.__d = void 0;
  for (var i2 = 0; i2 < t2.length; i2++)
    N$1(t2[i2], t2[++i2], t2[++i2]);
  l$2.__c && l$2.__c(u2, n2), n2.some(function(u3) {
    try {
      n2 = u3.__h, u3.__h = [], n2.some(function(n3) {
        n3.call(u3);
      });
    } catch (n3) {
      l$2.__e(n3, u3.__v);
    }
  });
}
function z$2(l2, u2, t2, i2, o2, r2, f2, e2, c2) {
  var s2, a2, p2, v2, d2, _2, g2, m2 = t2.props, k2 = u2.props, b2 = u2.type;
  if ("svg" === b2 ? o2 = "http://www.w3.org/2000/svg" : "math" === b2 ? o2 = "http://www.w3.org/1998/Math/MathML" : o2 || (o2 = "http://www.w3.org/1999/xhtml"), null != r2) {
    for (s2 = 0; s2 < r2.length; s2++)
      if ((d2 = r2[s2]) && "setAttribute" in d2 == !!b2 && (b2 ? d2.localName === b2 : 3 === d2.nodeType)) {
        l2 = d2, r2[s2] = null;
        break;
      }
  }
  if (null == l2) {
    if (null === b2)
      return document.createTextNode(k2);
    l2 = document.createElementNS(o2, b2, k2.is && k2), r2 = null, e2 = false;
  }
  if (null === b2)
    m2 === k2 || e2 && l2.data === k2 || (l2.data = k2);
  else {
    if (r2 = r2 && n$1.call(l2.childNodes), m2 = t2.props || h$1, !e2 && null != r2)
      for (m2 = {}, s2 = 0; s2 < l2.attributes.length; s2++)
        m2[(d2 = l2.attributes[s2]).name] = d2.value;
    for (s2 in m2)
      if (d2 = m2[s2], "children" == s2)
        ;
      else if ("dangerouslySetInnerHTML" == s2)
        p2 = d2;
      else if ("key" !== s2 && !(s2 in k2)) {
        if ("value" == s2 && "defaultValue" in k2 || "checked" == s2 && "defaultChecked" in k2)
          continue;
        A$3(l2, s2, null, d2, o2);
      }
    for (s2 in k2)
      d2 = k2[s2], "children" == s2 ? v2 = d2 : "dangerouslySetInnerHTML" == s2 ? a2 = d2 : "value" == s2 ? _2 = d2 : "checked" == s2 ? g2 = d2 : "key" === s2 || e2 && "function" != typeof d2 || m2[s2] === d2 || A$3(l2, s2, d2, m2[s2], o2);
    if (a2)
      e2 || p2 && (a2.__html === p2.__html || a2.__html === l2.innerHTML) || (l2.innerHTML = a2.__html), u2.__k = [];
    else if (p2 && (l2.innerHTML = ""), S$1(l2, y$1(v2) ? v2 : [v2], u2, t2, i2, "foreignObject" === b2 ? "http://www.w3.org/1999/xhtml" : o2, r2, f2, r2 ? r2[0] : t2.__k && x(t2, 0), e2, c2), null != r2)
      for (s2 = r2.length; s2--; )
        null != r2[s2] && w$3(r2[s2]);
    e2 || (s2 = "value", void 0 !== _2 && (_2 !== l2[s2] || "progress" === b2 && !_2 || "option" === b2 && _2 !== m2[s2]) && A$3(l2, s2, _2, m2[s2], o2), s2 = "checked", void 0 !== g2 && g2 !== l2[s2] && A$3(l2, s2, g2, m2[s2], o2));
  }
  return l2;
}
function N$1(n2, u2, t2) {
  try {
    "function" == typeof n2 ? n2(u2) : n2.current = u2;
  } catch (n3) {
    l$2.__e(n3, t2);
  }
}
function V$1(n2, u2, t2) {
  var i2, o2;
  if (l$2.unmount && l$2.unmount(n2), (i2 = n2.ref) && (i2.current && i2.current !== n2.__e || N$1(i2, null, u2)), null != (i2 = n2.__c)) {
    if (i2.componentWillUnmount)
      try {
        i2.componentWillUnmount();
      } catch (n3) {
        l$2.__e(n3, u2);
      }
    i2.base = i2.__P = null;
  }
  if (i2 = n2.__k)
    for (o2 = 0; o2 < i2.length; o2++)
      i2[o2] && V$1(i2[o2], u2, t2 || "function" != typeof n2.type);
  t2 || null == n2.__e || w$3(n2.__e), n2.__c = n2.__ = n2.__e = n2.__d = void 0;
}
function q$1(n2, l2, u2) {
  return this.constructor(n2, u2);
}
function E$2(l2, u2, t2) {
  var i2, o2, r2, f2, e2 = d$1({}, l2.props);
  for (r2 in l2.type && l2.type.defaultProps && (f2 = l2.type.defaultProps), u2)
    "key" == r2 ? i2 = u2[r2] : "ref" == r2 ? o2 = u2[r2] : e2[r2] = void 0 === u2[r2] && void 0 !== f2 ? f2[r2] : u2[r2];
  return arguments.length > 2 && (e2.children = arguments.length > 3 ? n$1.call(arguments, 2) : t2), g$2(l2.type, e2, i2 || l2.key, o2 || l2.ref, null);
}
function G(n2, l2) {
  var u2 = { __c: l2 = "__cC" + a$2++, __: n2, Consumer: function(n3, l3) {
    return n3.children(l3);
  }, Provider: function(n3) {
    var u3, t2;
    return this.getChildContext || (u3 = [], (t2 = {})[l2] = this, this.getChildContext = function() {
      return t2;
    }, this.shouldComponentUpdate = function(n4) {
      this.props.value !== n4.value && u3.some(function(n5) {
        n5.__e = true, M$1(n5);
      });
    }, this.sub = function(n4) {
      u3.push(n4);
      var l3 = n4.componentWillUnmount;
      n4.componentWillUnmount = function() {
        u3.splice(u3.indexOf(n4), 1), l3 && l3.call(n4);
      };
    }), n3.children;
  } };
  return u2.Provider.__ = u2.Consumer.contextType = u2;
}
n$1 = p$2.slice, l$2 = { __e: function(n2, l2, u2, t2) {
  for (var i2, o2, r2; l2 = l2.__; )
    if ((i2 = l2.__c) && !i2.__)
      try {
        if ((o2 = i2.constructor) && null != o2.getDerivedStateFromError && (i2.setState(o2.getDerivedStateFromError(n2)), r2 = i2.__d), null != i2.componentDidCatch && (i2.componentDidCatch(n2, t2 || {}), r2 = i2.__d), r2)
          return i2.__E = i2;
      } catch (l3) {
        n2 = l3;
      }
  throw n2;
} }, u$3 = 0, b$1.prototype.setState = function(n2, l2) {
  var u2;
  u2 = null != this.__s && this.__s !== this.state ? this.__s : this.__s = d$1({}, this.state), "function" == typeof n2 && (n2 = n2(d$1({}, u2), this.props)), n2 && d$1(u2, n2), null != n2 && this.__v && (l2 && this._sb.push(l2), M$1(this));
}, b$1.prototype.forceUpdate = function(n2) {
  this.__v && (this.__e = true, n2 && this.__h.push(n2), M$1(this));
}, b$1.prototype.render = k$3, i$2 = [], r$2 = "function" == typeof Promise ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, f$3 = function(n2, l2) {
  return n2.__v.__b - l2.__v.__b;
}, P$1.__r = 0, e$1 = 0, c$2 = F$1(false), s$2 = F$1(true), a$2 = 0;
var n = /[\s\n\\/='"\0<>]/, o$1 = /^(xlink|xmlns|xml)([A-Z])/, i$1 = /^accessK|^auto[A-Z]|^ch|^col|cont|cross|dateT|encT|form[A-Z]|frame|hrefL|inputM|maxL|minL|noV|playsI|readO|rowS|spellC|src[A-Z]|tabI|item[A-Z]/, a$1 = /^ac|^ali|arabic|basel|cap|clipPath$|clipRule$|color|dominant|enable|fill|flood|font|glyph[^R]|horiz|image|letter|lighting|marker[^WUH]|overline|panose|pointe|paint|rendering|shape|stop|strikethrough|stroke|text[^L]|transform|underline|unicode|units|^v[^i]|^w|^xH/, c$1 = /["&<]/;
function s$1(e2) {
  if (0 === e2.length || false === c$1.test(e2))
    return e2;
  for (var t2 = 0, r2 = 0, n2 = "", o2 = ""; r2 < e2.length; r2++) {
    switch (e2.charCodeAt(r2)) {
      case 34:
        o2 = "&quot;";
        break;
      case 38:
        o2 = "&amp;";
        break;
      case 60:
        o2 = "&lt;";
        break;
      default:
        continue;
    }
    r2 !== t2 && (n2 += e2.slice(t2, r2)), n2 += o2, t2 = r2 + 1;
  }
  return r2 !== t2 && (n2 += e2.slice(t2, r2)), n2;
}
var l$1 = {}, u$2 = /* @__PURE__ */ new Set(["animation-iteration-count", "border-image-outset", "border-image-slice", "border-image-width", "box-flex", "box-flex-group", "box-ordinal-group", "column-count", "fill-opacity", "flex", "flex-grow", "flex-negative", "flex-order", "flex-positive", "flex-shrink", "flood-opacity", "font-weight", "grid-column", "grid-row", "line-clamp", "line-height", "opacity", "order", "orphans", "stop-opacity", "stroke-dasharray", "stroke-dashoffset", "stroke-miterlimit", "stroke-opacity", "stroke-width", "tab-size", "widows", "z-index", "zoom"]), f$2 = /[A-Z]/g;
function p$1(e2) {
  var t2 = "";
  for (var r2 in e2) {
    var n2 = e2[r2];
    if (null != n2 && "" !== n2) {
      var o2 = "-" == r2[0] ? r2 : l$1[r2] || (l$1[r2] = r2.replace(f$2, "-$&").toLowerCase()), i2 = ";";
      "number" != typeof n2 || o2.startsWith("--") || u$2.has(o2) || (i2 = "px;"), t2 = t2 + o2 + ":" + n2 + i2;
    }
  }
  return t2 || void 0;
}
var m$1, g$1, b, k$2, w$2 = [], A$2 = Array.isArray, C$2 = Object.assign;
function S(n2, o2) {
  var i2 = l$2.__s;
  l$2.__s = true, m$1 = l$2.__b, g$1 = l$2.diffed, b = l$2.__r, k$2 = l$2.unmount;
  var a2 = _$1(k$3, null);
  a2.__k = [n2];
  try {
    return T$2(n2, o2 || D$2, false, void 0, a2, false);
  } catch (e2) {
    if (e2.then)
      throw new Error('Use "renderToStringAsync" for suspenseful rendering.');
    throw e2;
  } finally {
    l$2.__c && l$2.__c(n2, w$2), l$2.__s = i2, w$2.length = 0;
  }
}
function L$1() {
  this.__d = true;
}
var D$2 = {};
function E$1(e2, t2) {
  var r2, n2 = e2.type, o2 = true;
  return e2.__c ? (o2 = false, (r2 = e2.__c).state = r2.__s) : r2 = new n2(e2.props, t2), e2.__c = r2, r2.__v = e2, r2.props = e2.props, r2.context = t2, r2.__d = true, null == r2.state && (r2.state = D$2), null == r2.__s && (r2.__s = r2.state), n2.getDerivedStateFromProps ? r2.state = C$2({}, r2.state, n2.getDerivedStateFromProps(r2.props, r2.state)) : o2 && r2.componentWillMount ? (r2.componentWillMount(), r2.state = r2.__s !== r2.state ? r2.__s : r2.state) : !o2 && r2.componentWillUpdate && r2.componentWillUpdate(), b && b(e2), r2.render(r2.props, r2.state, t2);
}
function T$2(t2, c2, l2, u2, f2, h2) {
  if (null == t2 || true === t2 || false === t2 || "" === t2)
    return "";
  if ("object" != typeof t2)
    return "function" == typeof t2 ? "" : s$1(t2 + "");
  if (A$2(t2)) {
    var d2, _2 = "";
    f2.__k = t2;
    for (var v2 = 0; v2 < t2.length; v2++) {
      var y2 = t2[v2];
      if (null != y2 && "boolean" != typeof y2) {
        var x2, w2 = T$2(y2, c2, l2, u2, f2, h2);
        "string" == typeof w2 ? _2 += w2 : (d2 = d2 || [], _2 && d2.push(_2), _2 = "", Array.isArray(w2) ? (x2 = d2).push.apply(x2, w2) : d2.push(w2));
      }
    }
    return d2 ? (_2 && d2.push(_2), d2) : _2;
  }
  if (void 0 !== t2.constructor)
    return "";
  t2.__ = f2, m$1 && m$1(t2);
  var S2, D2, P2, U2 = t2.type, Z2 = t2.props, F2 = c2;
  if ("function" == typeof U2) {
    if (U2 === k$3) {
      if (Z2.tpl) {
        for (var W = "", $2 = 0; $2 < Z2.tpl.length; $2++)
          if (W += Z2.tpl[$2], Z2.exprs && $2 < Z2.exprs.length) {
            var M2 = Z2.exprs[$2];
            if (null == M2)
              continue;
            "object" != typeof M2 || void 0 !== M2.constructor && !A$2(M2) ? W += M2 : W += T$2(M2, c2, l2, u2, t2, h2);
          }
        return W;
      }
      if (Z2.UNSTABLE_comment)
        return "<!--" + s$1(Z2.UNSTABLE_comment || "") + "-->";
      D2 = Z2.children;
    } else {
      if (null != (S2 = U2.contextType)) {
        var z2 = c2[S2.__c];
        F2 = z2 ? z2.props.value : S2.__;
      }
      if (U2.prototype && "function" == typeof U2.prototype.render)
        D2 = E$1(t2, F2), P2 = t2.__c;
      else {
        t2.__c = P2 = { __v: t2, props: Z2, context: F2, setState: L$1, forceUpdate: L$1, __d: true, __h: [] };
        for (var H2 = 0; P2.__d && H2++ < 25; )
          P2.__d = false, b && b(t2), D2 = U2.call(P2, Z2, F2);
        P2.__d = true;
      }
      if (null != P2.getChildContext && (c2 = C$2({}, c2, P2.getChildContext())), (U2.getDerivedStateFromError || P2.componentDidCatch) && l$2.errorBoundaries) {
        var q2 = "";
        D2 = null != D2 && D2.type === k$3 && null == D2.key ? D2.props.children : D2;
        try {
          return q2 = T$2(D2, c2, l2, u2, t2, h2);
        } catch (e2) {
          return U2.getDerivedStateFromError && (P2.__s = U2.getDerivedStateFromError(e2)), P2.componentDidCatch && P2.componentDidCatch(e2, {}), P2.__d && (D2 = E$1(t2, c2), null != (P2 = t2.__c).getChildContext && (c2 = C$2({}, c2, P2.getChildContext())), q2 = T$2(D2 = null != D2 && D2.type === k$3 && null == D2.key ? D2.props.children : D2, c2, l2, u2, t2, h2)), q2;
        } finally {
          g$1 && g$1(t2), t2.__ = null, k$2 && k$2(t2);
        }
      }
    }
    D2 = null != D2 && D2.type === k$3 && null == D2.key && null == D2.props.tpl ? D2.props.children : D2;
    try {
      var B2 = T$2(D2, c2, l2, u2, t2, h2);
      return g$1 && g$1(t2), t2.__ = null, k$2 && k$2(t2), B2;
    } catch (e2) {
      if (!h2)
        throw e2;
      if (!e2 || "function" != typeof e2.then)
        throw e2;
      var I2 = function e3() {
        try {
          return T$2(D2, c2, l2, u2, t2, h2);
        } catch (r2) {
          if (!r2 || "function" != typeof r2.then)
            throw r2;
          return r2.then(function() {
            return T$2(D2, c2, l2, u2, t2, h2);
          }, function() {
            return e3();
          });
        }
      };
      return e2.then(function() {
        return I2();
      });
    }
  }
  var N2, O2 = "<" + U2, R2 = "";
  for (var V2 in Z2) {
    var K2 = Z2[V2];
    switch (V2) {
      case "children":
        N2 = K2;
        continue;
      case "key":
      case "ref":
      case "__self":
      case "__source":
        continue;
      case "htmlFor":
        if ("for" in Z2)
          continue;
        V2 = "for";
        break;
      case "className":
        if ("class" in Z2)
          continue;
        V2 = "class";
        break;
      case "defaultChecked":
        V2 = "checked";
        break;
      case "defaultSelected":
        V2 = "selected";
        break;
      case "defaultValue":
      case "value":
        switch (V2 = "value", U2) {
          case "textarea":
            N2 = K2;
            continue;
          case "select":
            u2 = K2;
            continue;
          case "option":
            u2 != K2 || "selected" in Z2 || (O2 += " selected");
        }
        break;
      case "dangerouslySetInnerHTML":
        R2 = K2 && K2.__html;
        continue;
      case "style":
        "object" == typeof K2 && (K2 = p$1(K2));
        break;
      case "acceptCharset":
        V2 = "accept-charset";
        break;
      case "httpEquiv":
        V2 = "http-equiv";
        break;
      default:
        if (o$1.test(V2))
          V2 = V2.replace(o$1, "$1:$2").toLowerCase();
        else {
          if (n.test(V2))
            continue;
          "-" !== V2[4] && "draggable" !== V2 || null == K2 ? l2 ? a$1.test(V2) && (V2 = "panose1" === V2 ? "panose-1" : V2.replace(/([A-Z])/g, "-$1").toLowerCase()) : i$1.test(V2) && (V2 = V2.toLowerCase()) : K2 += "";
        }
    }
    null != K2 && false !== K2 && "function" != typeof K2 && (O2 = true === K2 || "" === K2 ? O2 + " " + V2 : O2 + " " + V2 + '="' + s$1(K2 + "") + '"');
  }
  if (n.test(U2))
    throw new Error(U2 + " is not a valid HTML tag name in " + O2 + ">");
  if (R2 || ("string" == typeof N2 ? R2 = s$1(N2) : null != N2 && false !== N2 && true !== N2 && (R2 = T$2(N2, c2, "svg" === U2 || "foreignObject" !== U2 && l2, u2, t2, h2))), g$1 && g$1(t2), t2.__ = null, k$2 && k$2(t2), !R2 && j$1.has(U2))
    return O2 + "/>";
  var G2 = "</" + U2 + ">", J2 = O2 + ">";
  return Array.isArray(R2) ? [J2].concat(R2, [G2]) : "string" != typeof R2 ? [J2, R2, G2] : J2 + R2 + G2;
}
var j$1 = /* @__PURE__ */ new Set(["area", "base", "br", "col", "command", "embed", "hr", "img", "input", "keygen", "link", "meta", "param", "source", "track", "wbr"]), P = S;
const CLASS_PART_SEPARATOR = "-";
function createClassUtils(config) {
  const classMap = createClassMap(config);
  const {
    conflictingClassGroups,
    conflictingClassGroupModifiers
  } = config;
  function getClassGroupId(className) {
    const classParts = className.split(CLASS_PART_SEPARATOR);
    if (classParts[0] === "" && classParts.length !== 1) {
      classParts.shift();
    }
    return getGroupRecursive(classParts, classMap) || getGroupIdForArbitraryProperty(className);
  }
  function getConflictingClassGroupIds(classGroupId, hasPostfixModifier) {
    const conflicts = conflictingClassGroups[classGroupId] || [];
    if (hasPostfixModifier && conflictingClassGroupModifiers[classGroupId]) {
      return [...conflicts, ...conflictingClassGroupModifiers[classGroupId]];
    }
    return conflicts;
  }
  return {
    getClassGroupId,
    getConflictingClassGroupIds
  };
}
function getGroupRecursive(classParts, classPartObject) {
  var _a2;
  if (classParts.length === 0) {
    return classPartObject.classGroupId;
  }
  const currentClassPart = classParts[0];
  const nextClassPartObject = classPartObject.nextPart.get(currentClassPart);
  const classGroupFromNextClassPart = nextClassPartObject ? getGroupRecursive(classParts.slice(1), nextClassPartObject) : void 0;
  if (classGroupFromNextClassPart) {
    return classGroupFromNextClassPart;
  }
  if (classPartObject.validators.length === 0) {
    return void 0;
  }
  const classRest = classParts.join(CLASS_PART_SEPARATOR);
  return (_a2 = classPartObject.validators.find(({
    validator
  }) => validator(classRest))) == null ? void 0 : _a2.classGroupId;
}
const arbitraryPropertyRegex = /^\[(.+)\]$/;
function getGroupIdForArbitraryProperty(className) {
  if (arbitraryPropertyRegex.test(className)) {
    const arbitraryPropertyClassName = arbitraryPropertyRegex.exec(className)[1];
    const property = arbitraryPropertyClassName == null ? void 0 : arbitraryPropertyClassName.substring(0, arbitraryPropertyClassName.indexOf(":"));
    if (property) {
      return "arbitrary.." + property;
    }
  }
}
function createClassMap(config) {
  const {
    theme,
    prefix
  } = config;
  const classMap = {
    nextPart: /* @__PURE__ */ new Map(),
    validators: []
  };
  const prefixedClassGroupEntries = getPrefixedClassGroupEntries(Object.entries(config.classGroups), prefix);
  prefixedClassGroupEntries.forEach(([classGroupId, classGroup]) => {
    processClassesRecursively(classGroup, classMap, classGroupId, theme);
  });
  return classMap;
}
function processClassesRecursively(classGroup, classPartObject, classGroupId, theme) {
  classGroup.forEach((classDefinition) => {
    if (typeof classDefinition === "string") {
      const classPartObjectToEdit = classDefinition === "" ? classPartObject : getPart(classPartObject, classDefinition);
      classPartObjectToEdit.classGroupId = classGroupId;
      return;
    }
    if (typeof classDefinition === "function") {
      if (isThemeGetter(classDefinition)) {
        processClassesRecursively(classDefinition(theme), classPartObject, classGroupId, theme);
        return;
      }
      classPartObject.validators.push({
        validator: classDefinition,
        classGroupId
      });
      return;
    }
    Object.entries(classDefinition).forEach(([key, classGroup2]) => {
      processClassesRecursively(classGroup2, getPart(classPartObject, key), classGroupId, theme);
    });
  });
}
function getPart(classPartObject, path2) {
  let currentClassPartObject = classPartObject;
  path2.split(CLASS_PART_SEPARATOR).forEach((pathPart) => {
    if (!currentClassPartObject.nextPart.has(pathPart)) {
      currentClassPartObject.nextPart.set(pathPart, {
        nextPart: /* @__PURE__ */ new Map(),
        validators: []
      });
    }
    currentClassPartObject = currentClassPartObject.nextPart.get(pathPart);
  });
  return currentClassPartObject;
}
function isThemeGetter(func) {
  return func.isThemeGetter;
}
function getPrefixedClassGroupEntries(classGroupEntries, prefix) {
  if (!prefix) {
    return classGroupEntries;
  }
  return classGroupEntries.map(([classGroupId, classGroup]) => {
    const prefixedClassGroup = classGroup.map((classDefinition) => {
      if (typeof classDefinition === "string") {
        return prefix + classDefinition;
      }
      if (typeof classDefinition === "object") {
        return Object.fromEntries(Object.entries(classDefinition).map(([key, value]) => [prefix + key, value]));
      }
      return classDefinition;
    });
    return [classGroupId, prefixedClassGroup];
  });
}
function createLruCache(maxCacheSize) {
  if (maxCacheSize < 1) {
    return {
      get: () => void 0,
      set: () => {
      }
    };
  }
  let cacheSize = 0;
  let cache = /* @__PURE__ */ new Map();
  let previousCache = /* @__PURE__ */ new Map();
  function update2(key, value) {
    cache.set(key, value);
    cacheSize++;
    if (cacheSize > maxCacheSize) {
      cacheSize = 0;
      previousCache = cache;
      cache = /* @__PURE__ */ new Map();
    }
  }
  return {
    get(key) {
      let value = cache.get(key);
      if (value !== void 0) {
        return value;
      }
      if ((value = previousCache.get(key)) !== void 0) {
        update2(key, value);
        return value;
      }
    },
    set(key, value) {
      if (cache.has(key)) {
        cache.set(key, value);
      } else {
        update2(key, value);
      }
    }
  };
}
const IMPORTANT_MODIFIER = "!";
function createSplitModifiers(config) {
  const separator = config.separator;
  const isSeparatorSingleCharacter = separator.length === 1;
  const firstSeparatorCharacter = separator[0];
  const separatorLength = separator.length;
  return function splitModifiers(className) {
    const modifiers = [];
    let bracketDepth = 0;
    let modifierStart = 0;
    let postfixModifierPosition;
    for (let index2 = 0; index2 < className.length; index2++) {
      let currentCharacter = className[index2];
      if (bracketDepth === 0) {
        if (currentCharacter === firstSeparatorCharacter && (isSeparatorSingleCharacter || className.slice(index2, index2 + separatorLength) === separator)) {
          modifiers.push(className.slice(modifierStart, index2));
          modifierStart = index2 + separatorLength;
          continue;
        }
        if (currentCharacter === "/") {
          postfixModifierPosition = index2;
          continue;
        }
      }
      if (currentCharacter === "[") {
        bracketDepth++;
      } else if (currentCharacter === "]") {
        bracketDepth--;
      }
    }
    const baseClassNameWithImportantModifier = modifiers.length === 0 ? className : className.substring(modifierStart);
    const hasImportantModifier = baseClassNameWithImportantModifier.startsWith(IMPORTANT_MODIFIER);
    const baseClassName = hasImportantModifier ? baseClassNameWithImportantModifier.substring(1) : baseClassNameWithImportantModifier;
    const maybePostfixModifierPosition = postfixModifierPosition && postfixModifierPosition > modifierStart ? postfixModifierPosition - modifierStart : void 0;
    return {
      modifiers,
      hasImportantModifier,
      baseClassName,
      maybePostfixModifierPosition
    };
  };
}
function sortModifiers(modifiers) {
  if (modifiers.length <= 1) {
    return modifiers;
  }
  const sortedModifiers = [];
  let unsortedModifiers = [];
  modifiers.forEach((modifier) => {
    const isArbitraryVariant = modifier[0] === "[";
    if (isArbitraryVariant) {
      sortedModifiers.push(...unsortedModifiers.sort(), modifier);
      unsortedModifiers = [];
    } else {
      unsortedModifiers.push(modifier);
    }
  });
  sortedModifiers.push(...unsortedModifiers.sort());
  return sortedModifiers;
}
function createConfigUtils(config) {
  return {
    cache: createLruCache(config.cacheSize),
    splitModifiers: createSplitModifiers(config),
    ...createClassUtils(config)
  };
}
const SPLIT_CLASSES_REGEX = /\s+/;
function mergeClassList(classList, configUtils) {
  const {
    splitModifiers,
    getClassGroupId,
    getConflictingClassGroupIds
  } = configUtils;
  const classGroupsInConflict = /* @__PURE__ */ new Set();
  return classList.trim().split(SPLIT_CLASSES_REGEX).map((originalClassName) => {
    const {
      modifiers,
      hasImportantModifier,
      baseClassName,
      maybePostfixModifierPosition
    } = splitModifiers(originalClassName);
    let classGroupId = getClassGroupId(maybePostfixModifierPosition ? baseClassName.substring(0, maybePostfixModifierPosition) : baseClassName);
    let hasPostfixModifier = Boolean(maybePostfixModifierPosition);
    if (!classGroupId) {
      if (!maybePostfixModifierPosition) {
        return {
          isTailwindClass: false,
          originalClassName
        };
      }
      classGroupId = getClassGroupId(baseClassName);
      if (!classGroupId) {
        return {
          isTailwindClass: false,
          originalClassName
        };
      }
      hasPostfixModifier = false;
    }
    const variantModifier = sortModifiers(modifiers).join(":");
    const modifierId = hasImportantModifier ? variantModifier + IMPORTANT_MODIFIER : variantModifier;
    return {
      isTailwindClass: true,
      modifierId,
      classGroupId,
      originalClassName,
      hasPostfixModifier
    };
  }).reverse().filter((parsed) => {
    if (!parsed.isTailwindClass) {
      return true;
    }
    const {
      modifierId,
      classGroupId,
      hasPostfixModifier
    } = parsed;
    const classId = modifierId + classGroupId;
    if (classGroupsInConflict.has(classId)) {
      return false;
    }
    classGroupsInConflict.add(classId);
    getConflictingClassGroupIds(classGroupId, hasPostfixModifier).forEach((group) => classGroupsInConflict.add(modifierId + group));
    return true;
  }).reverse().map((parsed) => parsed.originalClassName).join(" ");
}
function twJoin() {
  let index2 = 0;
  let argument;
  let resolvedValue;
  let string = "";
  while (index2 < arguments.length) {
    if (argument = arguments[index2++]) {
      if (resolvedValue = toValue(argument)) {
        string && (string += " ");
        string += resolvedValue;
      }
    }
  }
  return string;
}
function toValue(mix) {
  if (typeof mix === "string") {
    return mix;
  }
  let resolvedValue;
  let string = "";
  for (let k2 = 0; k2 < mix.length; k2++) {
    if (mix[k2]) {
      if (resolvedValue = toValue(mix[k2])) {
        string && (string += " ");
        string += resolvedValue;
      }
    }
  }
  return string;
}
function createTailwindMerge(createConfigFirst, ...createConfigRest) {
  let configUtils;
  let cacheGet;
  let cacheSet;
  let functionToCall = initTailwindMerge;
  function initTailwindMerge(classList) {
    const config = createConfigRest.reduce((previousConfig, createConfigCurrent) => createConfigCurrent(previousConfig), createConfigFirst());
    configUtils = createConfigUtils(config);
    cacheGet = configUtils.cache.get;
    cacheSet = configUtils.cache.set;
    functionToCall = tailwindMerge;
    return tailwindMerge(classList);
  }
  function tailwindMerge(classList) {
    const cachedResult = cacheGet(classList);
    if (cachedResult) {
      return cachedResult;
    }
    const result = mergeClassList(classList, configUtils);
    cacheSet(classList, result);
    return result;
  }
  return function callTailwindMerge() {
    return functionToCall(twJoin.apply(null, arguments));
  };
}
function fromTheme(key) {
  const themeGetter = (theme) => theme[key] || [];
  themeGetter.isThemeGetter = true;
  return themeGetter;
}
const arbitraryValueRegex = /^\[(?:([a-z-]+):)?(.+)\]$/i;
const fractionRegex = /^\d+\/\d+$/;
const stringLengths = /* @__PURE__ */ new Set(["px", "full", "screen"]);
const tshirtUnitRegex = /^(\d+(\.\d+)?)?(xs|sm|md|lg|xl)$/;
const lengthUnitRegex = /\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\b(calc|min|max|clamp)\(.+\)|^0$/;
const colorFunctionRegex = /^(rgba?|hsla?|hwb|(ok)?(lab|lch))\(.+\)$/;
const shadowRegex = /^(inset_)?-?((\d+)?\.?(\d+)[a-z]+|0)_-?((\d+)?\.?(\d+)[a-z]+|0)/;
const imageRegex = /^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\(.+\)$/;
function isLength(value) {
  return isNumber(value) || stringLengths.has(value) || fractionRegex.test(value);
}
function isArbitraryLength(value) {
  return getIsArbitraryValue(value, "length", isLengthOnly);
}
function isNumber(value) {
  return Boolean(value) && !Number.isNaN(Number(value));
}
function isArbitraryNumber(value) {
  return getIsArbitraryValue(value, "number", isNumber);
}
function isInteger(value) {
  return Boolean(value) && Number.isInteger(Number(value));
}
function isPercent(value) {
  return value.endsWith("%") && isNumber(value.slice(0, -1));
}
function isArbitraryValue(value) {
  return arbitraryValueRegex.test(value);
}
function isTshirtSize(value) {
  return tshirtUnitRegex.test(value);
}
const sizeLabels = /* @__PURE__ */ new Set(["length", "size", "percentage"]);
function isArbitrarySize(value) {
  return getIsArbitraryValue(value, sizeLabels, isNever);
}
function isArbitraryPosition(value) {
  return getIsArbitraryValue(value, "position", isNever);
}
const imageLabels = /* @__PURE__ */ new Set(["image", "url"]);
function isArbitraryImage(value) {
  return getIsArbitraryValue(value, imageLabels, isImage);
}
function isArbitraryShadow(value) {
  return getIsArbitraryValue(value, "", isShadow);
}
function isAny() {
  return true;
}
function getIsArbitraryValue(value, label, testValue) {
  const result = arbitraryValueRegex.exec(value);
  if (result) {
    if (result[1]) {
      return typeof label === "string" ? result[1] === label : label.has(result[1]);
    }
    return testValue(result[2]);
  }
  return false;
}
function isLengthOnly(value) {
  return lengthUnitRegex.test(value) && !colorFunctionRegex.test(value);
}
function isNever() {
  return false;
}
function isShadow(value) {
  return shadowRegex.test(value);
}
function isImage(value) {
  return imageRegex.test(value);
}
function getDefaultConfig() {
  const colors = fromTheme("colors");
  const spacing = fromTheme("spacing");
  const blur = fromTheme("blur");
  const brightness = fromTheme("brightness");
  const borderColor = fromTheme("borderColor");
  const borderRadius = fromTheme("borderRadius");
  const borderSpacing = fromTheme("borderSpacing");
  const borderWidth = fromTheme("borderWidth");
  const contrast = fromTheme("contrast");
  const grayscale = fromTheme("grayscale");
  const hueRotate = fromTheme("hueRotate");
  const invert = fromTheme("invert");
  const gap = fromTheme("gap");
  const gradientColorStops = fromTheme("gradientColorStops");
  const gradientColorStopPositions = fromTheme("gradientColorStopPositions");
  const inset = fromTheme("inset");
  const margin = fromTheme("margin");
  const opacity = fromTheme("opacity");
  const padding = fromTheme("padding");
  const saturate = fromTheme("saturate");
  const scale = fromTheme("scale");
  const sepia = fromTheme("sepia");
  const skew = fromTheme("skew");
  const space = fromTheme("space");
  const translate = fromTheme("translate");
  const getOverscroll = () => ["auto", "contain", "none"];
  const getOverflow = () => ["auto", "hidden", "clip", "visible", "scroll"];
  const getSpacingWithAutoAndArbitrary = () => ["auto", isArbitraryValue, spacing];
  const getSpacingWithArbitrary = () => [isArbitraryValue, spacing];
  const getLengthWithEmptyAndArbitrary = () => ["", isLength, isArbitraryLength];
  const getNumberWithAutoAndArbitrary = () => ["auto", isNumber, isArbitraryValue];
  const getPositions = () => ["bottom", "center", "left", "left-bottom", "left-top", "right", "right-bottom", "right-top", "top"];
  const getLineStyles = () => ["solid", "dashed", "dotted", "double", "none"];
  const getBlendModes = () => ["normal", "multiply", "screen", "overlay", "darken", "lighten", "color-dodge", "color-burn", "hard-light", "soft-light", "difference", "exclusion", "hue", "saturation", "color", "luminosity"];
  const getAlign = () => ["start", "end", "center", "between", "around", "evenly", "stretch"];
  const getZeroAndEmpty = () => ["", "0", isArbitraryValue];
  const getBreaks = () => ["auto", "avoid", "all", "avoid-page", "page", "left", "right", "column"];
  const getNumber = () => [isNumber, isArbitraryNumber];
  const getNumberAndArbitrary = () => [isNumber, isArbitraryValue];
  return {
    cacheSize: 500,
    separator: ":",
    theme: {
      colors: [isAny],
      spacing: [isLength, isArbitraryLength],
      blur: ["none", "", isTshirtSize, isArbitraryValue],
      brightness: getNumber(),
      borderColor: [colors],
      borderRadius: ["none", "", "full", isTshirtSize, isArbitraryValue],
      borderSpacing: getSpacingWithArbitrary(),
      borderWidth: getLengthWithEmptyAndArbitrary(),
      contrast: getNumber(),
      grayscale: getZeroAndEmpty(),
      hueRotate: getNumberAndArbitrary(),
      invert: getZeroAndEmpty(),
      gap: getSpacingWithArbitrary(),
      gradientColorStops: [colors],
      gradientColorStopPositions: [isPercent, isArbitraryLength],
      inset: getSpacingWithAutoAndArbitrary(),
      margin: getSpacingWithAutoAndArbitrary(),
      opacity: getNumber(),
      padding: getSpacingWithArbitrary(),
      saturate: getNumber(),
      scale: getNumber(),
      sepia: getZeroAndEmpty(),
      skew: getNumberAndArbitrary(),
      space: getSpacingWithArbitrary(),
      translate: getSpacingWithArbitrary()
    },
    classGroups: {
      // Layout
      /**
       * Aspect Ratio
       * @see https://tailwindcss.com/docs/aspect-ratio
       */
      aspect: [{
        aspect: ["auto", "square", "video", isArbitraryValue]
      }],
      /**
       * Container
       * @see https://tailwindcss.com/docs/container
       */
      container: ["container"],
      /**
       * Columns
       * @see https://tailwindcss.com/docs/columns
       */
      columns: [{
        columns: [isTshirtSize]
      }],
      /**
       * Break After
       * @see https://tailwindcss.com/docs/break-after
       */
      "break-after": [{
        "break-after": getBreaks()
      }],
      /**
       * Break Before
       * @see https://tailwindcss.com/docs/break-before
       */
      "break-before": [{
        "break-before": getBreaks()
      }],
      /**
       * Break Inside
       * @see https://tailwindcss.com/docs/break-inside
       */
      "break-inside": [{
        "break-inside": ["auto", "avoid", "avoid-page", "avoid-column"]
      }],
      /**
       * Box Decoration Break
       * @see https://tailwindcss.com/docs/box-decoration-break
       */
      "box-decoration": [{
        "box-decoration": ["slice", "clone"]
      }],
      /**
       * Box Sizing
       * @see https://tailwindcss.com/docs/box-sizing
       */
      box: [{
        box: ["border", "content"]
      }],
      /**
       * Display
       * @see https://tailwindcss.com/docs/display
       */
      display: ["block", "inline-block", "inline", "flex", "inline-flex", "table", "inline-table", "table-caption", "table-cell", "table-column", "table-column-group", "table-footer-group", "table-header-group", "table-row-group", "table-row", "flow-root", "grid", "inline-grid", "contents", "list-item", "hidden"],
      /**
       * Floats
       * @see https://tailwindcss.com/docs/float
       */
      float: [{
        float: ["right", "left", "none", "start", "end"]
      }],
      /**
       * Clear
       * @see https://tailwindcss.com/docs/clear
       */
      clear: [{
        clear: ["left", "right", "both", "none", "start", "end"]
      }],
      /**
       * Isolation
       * @see https://tailwindcss.com/docs/isolation
       */
      isolation: ["isolate", "isolation-auto"],
      /**
       * Object Fit
       * @see https://tailwindcss.com/docs/object-fit
       */
      "object-fit": [{
        object: ["contain", "cover", "fill", "none", "scale-down"]
      }],
      /**
       * Object Position
       * @see https://tailwindcss.com/docs/object-position
       */
      "object-position": [{
        object: [...getPositions(), isArbitraryValue]
      }],
      /**
       * Overflow
       * @see https://tailwindcss.com/docs/overflow
       */
      overflow: [{
        overflow: getOverflow()
      }],
      /**
       * Overflow X
       * @see https://tailwindcss.com/docs/overflow
       */
      "overflow-x": [{
        "overflow-x": getOverflow()
      }],
      /**
       * Overflow Y
       * @see https://tailwindcss.com/docs/overflow
       */
      "overflow-y": [{
        "overflow-y": getOverflow()
      }],
      /**
       * Overscroll Behavior
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      overscroll: [{
        overscroll: getOverscroll()
      }],
      /**
       * Overscroll Behavior X
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      "overscroll-x": [{
        "overscroll-x": getOverscroll()
      }],
      /**
       * Overscroll Behavior Y
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      "overscroll-y": [{
        "overscroll-y": getOverscroll()
      }],
      /**
       * Position
       * @see https://tailwindcss.com/docs/position
       */
      position: ["static", "fixed", "absolute", "relative", "sticky"],
      /**
       * Top / Right / Bottom / Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      inset: [{
        inset: [inset]
      }],
      /**
       * Right / Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      "inset-x": [{
        "inset-x": [inset]
      }],
      /**
       * Top / Bottom
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      "inset-y": [{
        "inset-y": [inset]
      }],
      /**
       * Start
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      start: [{
        start: [inset]
      }],
      /**
       * End
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      end: [{
        end: [inset]
      }],
      /**
       * Top
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      top: [{
        top: [inset]
      }],
      /**
       * Right
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      right: [{
        right: [inset]
      }],
      /**
       * Bottom
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      bottom: [{
        bottom: [inset]
      }],
      /**
       * Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      left: [{
        left: [inset]
      }],
      /**
       * Visibility
       * @see https://tailwindcss.com/docs/visibility
       */
      visibility: ["visible", "invisible", "collapse"],
      /**
       * Z-Index
       * @see https://tailwindcss.com/docs/z-index
       */
      z: [{
        z: ["auto", isInteger, isArbitraryValue]
      }],
      // Flexbox and Grid
      /**
       * Flex Basis
       * @see https://tailwindcss.com/docs/flex-basis
       */
      basis: [{
        basis: getSpacingWithAutoAndArbitrary()
      }],
      /**
       * Flex Direction
       * @see https://tailwindcss.com/docs/flex-direction
       */
      "flex-direction": [{
        flex: ["row", "row-reverse", "col", "col-reverse"]
      }],
      /**
       * Flex Wrap
       * @see https://tailwindcss.com/docs/flex-wrap
       */
      "flex-wrap": [{
        flex: ["wrap", "wrap-reverse", "nowrap"]
      }],
      /**
       * Flex
       * @see https://tailwindcss.com/docs/flex
       */
      flex: [{
        flex: ["1", "auto", "initial", "none", isArbitraryValue]
      }],
      /**
       * Flex Grow
       * @see https://tailwindcss.com/docs/flex-grow
       */
      grow: [{
        grow: getZeroAndEmpty()
      }],
      /**
       * Flex Shrink
       * @see https://tailwindcss.com/docs/flex-shrink
       */
      shrink: [{
        shrink: getZeroAndEmpty()
      }],
      /**
       * Order
       * @see https://tailwindcss.com/docs/order
       */
      order: [{
        order: ["first", "last", "none", isInteger, isArbitraryValue]
      }],
      /**
       * Grid Template Columns
       * @see https://tailwindcss.com/docs/grid-template-columns
       */
      "grid-cols": [{
        "grid-cols": [isAny]
      }],
      /**
       * Grid Column Start / End
       * @see https://tailwindcss.com/docs/grid-column
       */
      "col-start-end": [{
        col: ["auto", {
          span: ["full", isInteger, isArbitraryValue]
        }, isArbitraryValue]
      }],
      /**
       * Grid Column Start
       * @see https://tailwindcss.com/docs/grid-column
       */
      "col-start": [{
        "col-start": getNumberWithAutoAndArbitrary()
      }],
      /**
       * Grid Column End
       * @see https://tailwindcss.com/docs/grid-column
       */
      "col-end": [{
        "col-end": getNumberWithAutoAndArbitrary()
      }],
      /**
       * Grid Template Rows
       * @see https://tailwindcss.com/docs/grid-template-rows
       */
      "grid-rows": [{
        "grid-rows": [isAny]
      }],
      /**
       * Grid Row Start / End
       * @see https://tailwindcss.com/docs/grid-row
       */
      "row-start-end": [{
        row: ["auto", {
          span: [isInteger, isArbitraryValue]
        }, isArbitraryValue]
      }],
      /**
       * Grid Row Start
       * @see https://tailwindcss.com/docs/grid-row
       */
      "row-start": [{
        "row-start": getNumberWithAutoAndArbitrary()
      }],
      /**
       * Grid Row End
       * @see https://tailwindcss.com/docs/grid-row
       */
      "row-end": [{
        "row-end": getNumberWithAutoAndArbitrary()
      }],
      /**
       * Grid Auto Flow
       * @see https://tailwindcss.com/docs/grid-auto-flow
       */
      "grid-flow": [{
        "grid-flow": ["row", "col", "dense", "row-dense", "col-dense"]
      }],
      /**
       * Grid Auto Columns
       * @see https://tailwindcss.com/docs/grid-auto-columns
       */
      "auto-cols": [{
        "auto-cols": ["auto", "min", "max", "fr", isArbitraryValue]
      }],
      /**
       * Grid Auto Rows
       * @see https://tailwindcss.com/docs/grid-auto-rows
       */
      "auto-rows": [{
        "auto-rows": ["auto", "min", "max", "fr", isArbitraryValue]
      }],
      /**
       * Gap
       * @see https://tailwindcss.com/docs/gap
       */
      gap: [{
        gap: [gap]
      }],
      /**
       * Gap X
       * @see https://tailwindcss.com/docs/gap
       */
      "gap-x": [{
        "gap-x": [gap]
      }],
      /**
       * Gap Y
       * @see https://tailwindcss.com/docs/gap
       */
      "gap-y": [{
        "gap-y": [gap]
      }],
      /**
       * Justify Content
       * @see https://tailwindcss.com/docs/justify-content
       */
      "justify-content": [{
        justify: ["normal", ...getAlign()]
      }],
      /**
       * Justify Items
       * @see https://tailwindcss.com/docs/justify-items
       */
      "justify-items": [{
        "justify-items": ["start", "end", "center", "stretch"]
      }],
      /**
       * Justify Self
       * @see https://tailwindcss.com/docs/justify-self
       */
      "justify-self": [{
        "justify-self": ["auto", "start", "end", "center", "stretch"]
      }],
      /**
       * Align Content
       * @see https://tailwindcss.com/docs/align-content
       */
      "align-content": [{
        content: ["normal", ...getAlign(), "baseline"]
      }],
      /**
       * Align Items
       * @see https://tailwindcss.com/docs/align-items
       */
      "align-items": [{
        items: ["start", "end", "center", "baseline", "stretch"]
      }],
      /**
       * Align Self
       * @see https://tailwindcss.com/docs/align-self
       */
      "align-self": [{
        self: ["auto", "start", "end", "center", "stretch", "baseline"]
      }],
      /**
       * Place Content
       * @see https://tailwindcss.com/docs/place-content
       */
      "place-content": [{
        "place-content": [...getAlign(), "baseline"]
      }],
      /**
       * Place Items
       * @see https://tailwindcss.com/docs/place-items
       */
      "place-items": [{
        "place-items": ["start", "end", "center", "baseline", "stretch"]
      }],
      /**
       * Place Self
       * @see https://tailwindcss.com/docs/place-self
       */
      "place-self": [{
        "place-self": ["auto", "start", "end", "center", "stretch"]
      }],
      // Spacing
      /**
       * Padding
       * @see https://tailwindcss.com/docs/padding
       */
      p: [{
        p: [padding]
      }],
      /**
       * Padding X
       * @see https://tailwindcss.com/docs/padding
       */
      px: [{
        px: [padding]
      }],
      /**
       * Padding Y
       * @see https://tailwindcss.com/docs/padding
       */
      py: [{
        py: [padding]
      }],
      /**
       * Padding Start
       * @see https://tailwindcss.com/docs/padding
       */
      ps: [{
        ps: [padding]
      }],
      /**
       * Padding End
       * @see https://tailwindcss.com/docs/padding
       */
      pe: [{
        pe: [padding]
      }],
      /**
       * Padding Top
       * @see https://tailwindcss.com/docs/padding
       */
      pt: [{
        pt: [padding]
      }],
      /**
       * Padding Right
       * @see https://tailwindcss.com/docs/padding
       */
      pr: [{
        pr: [padding]
      }],
      /**
       * Padding Bottom
       * @see https://tailwindcss.com/docs/padding
       */
      pb: [{
        pb: [padding]
      }],
      /**
       * Padding Left
       * @see https://tailwindcss.com/docs/padding
       */
      pl: [{
        pl: [padding]
      }],
      /**
       * Margin
       * @see https://tailwindcss.com/docs/margin
       */
      m: [{
        m: [margin]
      }],
      /**
       * Margin X
       * @see https://tailwindcss.com/docs/margin
       */
      mx: [{
        mx: [margin]
      }],
      /**
       * Margin Y
       * @see https://tailwindcss.com/docs/margin
       */
      my: [{
        my: [margin]
      }],
      /**
       * Margin Start
       * @see https://tailwindcss.com/docs/margin
       */
      ms: [{
        ms: [margin]
      }],
      /**
       * Margin End
       * @see https://tailwindcss.com/docs/margin
       */
      me: [{
        me: [margin]
      }],
      /**
       * Margin Top
       * @see https://tailwindcss.com/docs/margin
       */
      mt: [{
        mt: [margin]
      }],
      /**
       * Margin Right
       * @see https://tailwindcss.com/docs/margin
       */
      mr: [{
        mr: [margin]
      }],
      /**
       * Margin Bottom
       * @see https://tailwindcss.com/docs/margin
       */
      mb: [{
        mb: [margin]
      }],
      /**
       * Margin Left
       * @see https://tailwindcss.com/docs/margin
       */
      ml: [{
        ml: [margin]
      }],
      /**
       * Space Between X
       * @see https://tailwindcss.com/docs/space
       */
      "space-x": [{
        "space-x": [space]
      }],
      /**
       * Space Between X Reverse
       * @see https://tailwindcss.com/docs/space
       */
      "space-x-reverse": ["space-x-reverse"],
      /**
       * Space Between Y
       * @see https://tailwindcss.com/docs/space
       */
      "space-y": [{
        "space-y": [space]
      }],
      /**
       * Space Between Y Reverse
       * @see https://tailwindcss.com/docs/space
       */
      "space-y-reverse": ["space-y-reverse"],
      // Sizing
      /**
       * Width
       * @see https://tailwindcss.com/docs/width
       */
      w: [{
        w: ["auto", "min", "max", "fit", "svw", "lvw", "dvw", isArbitraryValue, spacing]
      }],
      /**
       * Min-Width
       * @see https://tailwindcss.com/docs/min-width
       */
      "min-w": [{
        "min-w": [isArbitraryValue, spacing, "min", "max", "fit"]
      }],
      /**
       * Max-Width
       * @see https://tailwindcss.com/docs/max-width
       */
      "max-w": [{
        "max-w": [isArbitraryValue, spacing, "none", "full", "min", "max", "fit", "prose", {
          screen: [isTshirtSize]
        }, isTshirtSize]
      }],
      /**
       * Height
       * @see https://tailwindcss.com/docs/height
       */
      h: [{
        h: [isArbitraryValue, spacing, "auto", "min", "max", "fit", "svh", "lvh", "dvh"]
      }],
      /**
       * Min-Height
       * @see https://tailwindcss.com/docs/min-height
       */
      "min-h": [{
        "min-h": [isArbitraryValue, spacing, "min", "max", "fit", "svh", "lvh", "dvh"]
      }],
      /**
       * Max-Height
       * @see https://tailwindcss.com/docs/max-height
       */
      "max-h": [{
        "max-h": [isArbitraryValue, spacing, "min", "max", "fit", "svh", "lvh", "dvh"]
      }],
      /**
       * Size
       * @see https://tailwindcss.com/docs/size
       */
      size: [{
        size: [isArbitraryValue, spacing, "auto", "min", "max", "fit"]
      }],
      // Typography
      /**
       * Font Size
       * @see https://tailwindcss.com/docs/font-size
       */
      "font-size": [{
        text: ["base", isTshirtSize, isArbitraryLength]
      }],
      /**
       * Font Smoothing
       * @see https://tailwindcss.com/docs/font-smoothing
       */
      "font-smoothing": ["antialiased", "subpixel-antialiased"],
      /**
       * Font Style
       * @see https://tailwindcss.com/docs/font-style
       */
      "font-style": ["italic", "not-italic"],
      /**
       * Font Weight
       * @see https://tailwindcss.com/docs/font-weight
       */
      "font-weight": [{
        font: ["thin", "extralight", "light", "normal", "medium", "semibold", "bold", "extrabold", "black", isArbitraryNumber]
      }],
      /**
       * Font Family
       * @see https://tailwindcss.com/docs/font-family
       */
      "font-family": [{
        font: [isAny]
      }],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-normal": ["normal-nums"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-ordinal": ["ordinal"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-slashed-zero": ["slashed-zero"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-figure": ["lining-nums", "oldstyle-nums"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-spacing": ["proportional-nums", "tabular-nums"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-fraction": ["diagonal-fractions", "stacked-fractons"],
      /**
       * Letter Spacing
       * @see https://tailwindcss.com/docs/letter-spacing
       */
      tracking: [{
        tracking: ["tighter", "tight", "normal", "wide", "wider", "widest", isArbitraryValue]
      }],
      /**
       * Line Clamp
       * @see https://tailwindcss.com/docs/line-clamp
       */
      "line-clamp": [{
        "line-clamp": ["none", isNumber, isArbitraryNumber]
      }],
      /**
       * Line Height
       * @see https://tailwindcss.com/docs/line-height
       */
      leading: [{
        leading: ["none", "tight", "snug", "normal", "relaxed", "loose", isLength, isArbitraryValue]
      }],
      /**
       * List Style Image
       * @see https://tailwindcss.com/docs/list-style-image
       */
      "list-image": [{
        "list-image": ["none", isArbitraryValue]
      }],
      /**
       * List Style Type
       * @see https://tailwindcss.com/docs/list-style-type
       */
      "list-style-type": [{
        list: ["none", "disc", "decimal", isArbitraryValue]
      }],
      /**
       * List Style Position
       * @see https://tailwindcss.com/docs/list-style-position
       */
      "list-style-position": [{
        list: ["inside", "outside"]
      }],
      /**
       * Placeholder Color
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/placeholder-color
       */
      "placeholder-color": [{
        placeholder: [colors]
      }],
      /**
       * Placeholder Opacity
       * @see https://tailwindcss.com/docs/placeholder-opacity
       */
      "placeholder-opacity": [{
        "placeholder-opacity": [opacity]
      }],
      /**
       * Text Alignment
       * @see https://tailwindcss.com/docs/text-align
       */
      "text-alignment": [{
        text: ["left", "center", "right", "justify", "start", "end"]
      }],
      /**
       * Text Color
       * @see https://tailwindcss.com/docs/text-color
       */
      "text-color": [{
        text: [colors]
      }],
      /**
       * Text Opacity
       * @see https://tailwindcss.com/docs/text-opacity
       */
      "text-opacity": [{
        "text-opacity": [opacity]
      }],
      /**
       * Text Decoration
       * @see https://tailwindcss.com/docs/text-decoration
       */
      "text-decoration": ["underline", "overline", "line-through", "no-underline"],
      /**
       * Text Decoration Style
       * @see https://tailwindcss.com/docs/text-decoration-style
       */
      "text-decoration-style": [{
        decoration: [...getLineStyles(), "wavy"]
      }],
      /**
       * Text Decoration Thickness
       * @see https://tailwindcss.com/docs/text-decoration-thickness
       */
      "text-decoration-thickness": [{
        decoration: ["auto", "from-font", isLength, isArbitraryLength]
      }],
      /**
       * Text Underline Offset
       * @see https://tailwindcss.com/docs/text-underline-offset
       */
      "underline-offset": [{
        "underline-offset": ["auto", isLength, isArbitraryValue]
      }],
      /**
       * Text Decoration Color
       * @see https://tailwindcss.com/docs/text-decoration-color
       */
      "text-decoration-color": [{
        decoration: [colors]
      }],
      /**
       * Text Transform
       * @see https://tailwindcss.com/docs/text-transform
       */
      "text-transform": ["uppercase", "lowercase", "capitalize", "normal-case"],
      /**
       * Text Overflow
       * @see https://tailwindcss.com/docs/text-overflow
       */
      "text-overflow": ["truncate", "text-ellipsis", "text-clip"],
      /**
       * Text Wrap
       * @see https://tailwindcss.com/docs/text-wrap
       */
      "text-wrap": [{
        text: ["wrap", "nowrap", "balance", "pretty"]
      }],
      /**
       * Text Indent
       * @see https://tailwindcss.com/docs/text-indent
       */
      indent: [{
        indent: getSpacingWithArbitrary()
      }],
      /**
       * Vertical Alignment
       * @see https://tailwindcss.com/docs/vertical-align
       */
      "vertical-align": [{
        align: ["baseline", "top", "middle", "bottom", "text-top", "text-bottom", "sub", "super", isArbitraryValue]
      }],
      /**
       * Whitespace
       * @see https://tailwindcss.com/docs/whitespace
       */
      whitespace: [{
        whitespace: ["normal", "nowrap", "pre", "pre-line", "pre-wrap", "break-spaces"]
      }],
      /**
       * Word Break
       * @see https://tailwindcss.com/docs/word-break
       */
      break: [{
        break: ["normal", "words", "all", "keep"]
      }],
      /**
       * Hyphens
       * @see https://tailwindcss.com/docs/hyphens
       */
      hyphens: [{
        hyphens: ["none", "manual", "auto"]
      }],
      /**
       * Content
       * @see https://tailwindcss.com/docs/content
       */
      content: [{
        content: ["none", isArbitraryValue]
      }],
      // Backgrounds
      /**
       * Background Attachment
       * @see https://tailwindcss.com/docs/background-attachment
       */
      "bg-attachment": [{
        bg: ["fixed", "local", "scroll"]
      }],
      /**
       * Background Clip
       * @see https://tailwindcss.com/docs/background-clip
       */
      "bg-clip": [{
        "bg-clip": ["border", "padding", "content", "text"]
      }],
      /**
       * Background Opacity
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/background-opacity
       */
      "bg-opacity": [{
        "bg-opacity": [opacity]
      }],
      /**
       * Background Origin
       * @see https://tailwindcss.com/docs/background-origin
       */
      "bg-origin": [{
        "bg-origin": ["border", "padding", "content"]
      }],
      /**
       * Background Position
       * @see https://tailwindcss.com/docs/background-position
       */
      "bg-position": [{
        bg: [...getPositions(), isArbitraryPosition]
      }],
      /**
       * Background Repeat
       * @see https://tailwindcss.com/docs/background-repeat
       */
      "bg-repeat": [{
        bg: ["no-repeat", {
          repeat: ["", "x", "y", "round", "space"]
        }]
      }],
      /**
       * Background Size
       * @see https://tailwindcss.com/docs/background-size
       */
      "bg-size": [{
        bg: ["auto", "cover", "contain", isArbitrarySize]
      }],
      /**
       * Background Image
       * @see https://tailwindcss.com/docs/background-image
       */
      "bg-image": [{
        bg: ["none", {
          "gradient-to": ["t", "tr", "r", "br", "b", "bl", "l", "tl"]
        }, isArbitraryImage]
      }],
      /**
       * Background Color
       * @see https://tailwindcss.com/docs/background-color
       */
      "bg-color": [{
        bg: [colors]
      }],
      /**
       * Gradient Color Stops From Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-from-pos": [{
        from: [gradientColorStopPositions]
      }],
      /**
       * Gradient Color Stops Via Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-via-pos": [{
        via: [gradientColorStopPositions]
      }],
      /**
       * Gradient Color Stops To Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-to-pos": [{
        to: [gradientColorStopPositions]
      }],
      /**
       * Gradient Color Stops From
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-from": [{
        from: [gradientColorStops]
      }],
      /**
       * Gradient Color Stops Via
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-via": [{
        via: [gradientColorStops]
      }],
      /**
       * Gradient Color Stops To
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-to": [{
        to: [gradientColorStops]
      }],
      // Borders
      /**
       * Border Radius
       * @see https://tailwindcss.com/docs/border-radius
       */
      rounded: [{
        rounded: [borderRadius]
      }],
      /**
       * Border Radius Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-s": [{
        "rounded-s": [borderRadius]
      }],
      /**
       * Border Radius End
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-e": [{
        "rounded-e": [borderRadius]
      }],
      /**
       * Border Radius Top
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-t": [{
        "rounded-t": [borderRadius]
      }],
      /**
       * Border Radius Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-r": [{
        "rounded-r": [borderRadius]
      }],
      /**
       * Border Radius Bottom
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-b": [{
        "rounded-b": [borderRadius]
      }],
      /**
       * Border Radius Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-l": [{
        "rounded-l": [borderRadius]
      }],
      /**
       * Border Radius Start Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-ss": [{
        "rounded-ss": [borderRadius]
      }],
      /**
       * Border Radius Start End
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-se": [{
        "rounded-se": [borderRadius]
      }],
      /**
       * Border Radius End End
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-ee": [{
        "rounded-ee": [borderRadius]
      }],
      /**
       * Border Radius End Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-es": [{
        "rounded-es": [borderRadius]
      }],
      /**
       * Border Radius Top Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-tl": [{
        "rounded-tl": [borderRadius]
      }],
      /**
       * Border Radius Top Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-tr": [{
        "rounded-tr": [borderRadius]
      }],
      /**
       * Border Radius Bottom Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-br": [{
        "rounded-br": [borderRadius]
      }],
      /**
       * Border Radius Bottom Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-bl": [{
        "rounded-bl": [borderRadius]
      }],
      /**
       * Border Width
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w": [{
        border: [borderWidth]
      }],
      /**
       * Border Width X
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-x": [{
        "border-x": [borderWidth]
      }],
      /**
       * Border Width Y
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-y": [{
        "border-y": [borderWidth]
      }],
      /**
       * Border Width Start
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-s": [{
        "border-s": [borderWidth]
      }],
      /**
       * Border Width End
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-e": [{
        "border-e": [borderWidth]
      }],
      /**
       * Border Width Top
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-t": [{
        "border-t": [borderWidth]
      }],
      /**
       * Border Width Right
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-r": [{
        "border-r": [borderWidth]
      }],
      /**
       * Border Width Bottom
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-b": [{
        "border-b": [borderWidth]
      }],
      /**
       * Border Width Left
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-l": [{
        "border-l": [borderWidth]
      }],
      /**
       * Border Opacity
       * @see https://tailwindcss.com/docs/border-opacity
       */
      "border-opacity": [{
        "border-opacity": [opacity]
      }],
      /**
       * Border Style
       * @see https://tailwindcss.com/docs/border-style
       */
      "border-style": [{
        border: [...getLineStyles(), "hidden"]
      }],
      /**
       * Divide Width X
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-x": [{
        "divide-x": [borderWidth]
      }],
      /**
       * Divide Width X Reverse
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-x-reverse": ["divide-x-reverse"],
      /**
       * Divide Width Y
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-y": [{
        "divide-y": [borderWidth]
      }],
      /**
       * Divide Width Y Reverse
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-y-reverse": ["divide-y-reverse"],
      /**
       * Divide Opacity
       * @see https://tailwindcss.com/docs/divide-opacity
       */
      "divide-opacity": [{
        "divide-opacity": [opacity]
      }],
      /**
       * Divide Style
       * @see https://tailwindcss.com/docs/divide-style
       */
      "divide-style": [{
        divide: getLineStyles()
      }],
      /**
       * Border Color
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color": [{
        border: [borderColor]
      }],
      /**
       * Border Color X
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-x": [{
        "border-x": [borderColor]
      }],
      /**
       * Border Color Y
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-y": [{
        "border-y": [borderColor]
      }],
      /**
       * Border Color Top
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-t": [{
        "border-t": [borderColor]
      }],
      /**
       * Border Color Right
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-r": [{
        "border-r": [borderColor]
      }],
      /**
       * Border Color Bottom
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-b": [{
        "border-b": [borderColor]
      }],
      /**
       * Border Color Left
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-l": [{
        "border-l": [borderColor]
      }],
      /**
       * Divide Color
       * @see https://tailwindcss.com/docs/divide-color
       */
      "divide-color": [{
        divide: [borderColor]
      }],
      /**
       * Outline Style
       * @see https://tailwindcss.com/docs/outline-style
       */
      "outline-style": [{
        outline: ["", ...getLineStyles()]
      }],
      /**
       * Outline Offset
       * @see https://tailwindcss.com/docs/outline-offset
       */
      "outline-offset": [{
        "outline-offset": [isLength, isArbitraryValue]
      }],
      /**
       * Outline Width
       * @see https://tailwindcss.com/docs/outline-width
       */
      "outline-w": [{
        outline: [isLength, isArbitraryLength]
      }],
      /**
       * Outline Color
       * @see https://tailwindcss.com/docs/outline-color
       */
      "outline-color": [{
        outline: [colors]
      }],
      /**
       * Ring Width
       * @see https://tailwindcss.com/docs/ring-width
       */
      "ring-w": [{
        ring: getLengthWithEmptyAndArbitrary()
      }],
      /**
       * Ring Width Inset
       * @see https://tailwindcss.com/docs/ring-width
       */
      "ring-w-inset": ["ring-inset"],
      /**
       * Ring Color
       * @see https://tailwindcss.com/docs/ring-color
       */
      "ring-color": [{
        ring: [colors]
      }],
      /**
       * Ring Opacity
       * @see https://tailwindcss.com/docs/ring-opacity
       */
      "ring-opacity": [{
        "ring-opacity": [opacity]
      }],
      /**
       * Ring Offset Width
       * @see https://tailwindcss.com/docs/ring-offset-width
       */
      "ring-offset-w": [{
        "ring-offset": [isLength, isArbitraryLength]
      }],
      /**
       * Ring Offset Color
       * @see https://tailwindcss.com/docs/ring-offset-color
       */
      "ring-offset-color": [{
        "ring-offset": [colors]
      }],
      // Effects
      /**
       * Box Shadow
       * @see https://tailwindcss.com/docs/box-shadow
       */
      shadow: [{
        shadow: ["", "inner", "none", isTshirtSize, isArbitraryShadow]
      }],
      /**
       * Box Shadow Color
       * @see https://tailwindcss.com/docs/box-shadow-color
       */
      "shadow-color": [{
        shadow: [isAny]
      }],
      /**
       * Opacity
       * @see https://tailwindcss.com/docs/opacity
       */
      opacity: [{
        opacity: [opacity]
      }],
      /**
       * Mix Blend Mode
       * @see https://tailwindcss.com/docs/mix-blend-mode
       */
      "mix-blend": [{
        "mix-blend": [...getBlendModes(), "plus-lighter", "plus-darker"]
      }],
      /**
       * Background Blend Mode
       * @see https://tailwindcss.com/docs/background-blend-mode
       */
      "bg-blend": [{
        "bg-blend": getBlendModes()
      }],
      // Filters
      /**
       * Filter
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/filter
       */
      filter: [{
        filter: ["", "none"]
      }],
      /**
       * Blur
       * @see https://tailwindcss.com/docs/blur
       */
      blur: [{
        blur: [blur]
      }],
      /**
       * Brightness
       * @see https://tailwindcss.com/docs/brightness
       */
      brightness: [{
        brightness: [brightness]
      }],
      /**
       * Contrast
       * @see https://tailwindcss.com/docs/contrast
       */
      contrast: [{
        contrast: [contrast]
      }],
      /**
       * Drop Shadow
       * @see https://tailwindcss.com/docs/drop-shadow
       */
      "drop-shadow": [{
        "drop-shadow": ["", "none", isTshirtSize, isArbitraryValue]
      }],
      /**
       * Grayscale
       * @see https://tailwindcss.com/docs/grayscale
       */
      grayscale: [{
        grayscale: [grayscale]
      }],
      /**
       * Hue Rotate
       * @see https://tailwindcss.com/docs/hue-rotate
       */
      "hue-rotate": [{
        "hue-rotate": [hueRotate]
      }],
      /**
       * Invert
       * @see https://tailwindcss.com/docs/invert
       */
      invert: [{
        invert: [invert]
      }],
      /**
       * Saturate
       * @see https://tailwindcss.com/docs/saturate
       */
      saturate: [{
        saturate: [saturate]
      }],
      /**
       * Sepia
       * @see https://tailwindcss.com/docs/sepia
       */
      sepia: [{
        sepia: [sepia]
      }],
      /**
       * Backdrop Filter
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/backdrop-filter
       */
      "backdrop-filter": [{
        "backdrop-filter": ["", "none"]
      }],
      /**
       * Backdrop Blur
       * @see https://tailwindcss.com/docs/backdrop-blur
       */
      "backdrop-blur": [{
        "backdrop-blur": [blur]
      }],
      /**
       * Backdrop Brightness
       * @see https://tailwindcss.com/docs/backdrop-brightness
       */
      "backdrop-brightness": [{
        "backdrop-brightness": [brightness]
      }],
      /**
       * Backdrop Contrast
       * @see https://tailwindcss.com/docs/backdrop-contrast
       */
      "backdrop-contrast": [{
        "backdrop-contrast": [contrast]
      }],
      /**
       * Backdrop Grayscale
       * @see https://tailwindcss.com/docs/backdrop-grayscale
       */
      "backdrop-grayscale": [{
        "backdrop-grayscale": [grayscale]
      }],
      /**
       * Backdrop Hue Rotate
       * @see https://tailwindcss.com/docs/backdrop-hue-rotate
       */
      "backdrop-hue-rotate": [{
        "backdrop-hue-rotate": [hueRotate]
      }],
      /**
       * Backdrop Invert
       * @see https://tailwindcss.com/docs/backdrop-invert
       */
      "backdrop-invert": [{
        "backdrop-invert": [invert]
      }],
      /**
       * Backdrop Opacity
       * @see https://tailwindcss.com/docs/backdrop-opacity
       */
      "backdrop-opacity": [{
        "backdrop-opacity": [opacity]
      }],
      /**
       * Backdrop Saturate
       * @see https://tailwindcss.com/docs/backdrop-saturate
       */
      "backdrop-saturate": [{
        "backdrop-saturate": [saturate]
      }],
      /**
       * Backdrop Sepia
       * @see https://tailwindcss.com/docs/backdrop-sepia
       */
      "backdrop-sepia": [{
        "backdrop-sepia": [sepia]
      }],
      // Tables
      /**
       * Border Collapse
       * @see https://tailwindcss.com/docs/border-collapse
       */
      "border-collapse": [{
        border: ["collapse", "separate"]
      }],
      /**
       * Border Spacing
       * @see https://tailwindcss.com/docs/border-spacing
       */
      "border-spacing": [{
        "border-spacing": [borderSpacing]
      }],
      /**
       * Border Spacing X
       * @see https://tailwindcss.com/docs/border-spacing
       */
      "border-spacing-x": [{
        "border-spacing-x": [borderSpacing]
      }],
      /**
       * Border Spacing Y
       * @see https://tailwindcss.com/docs/border-spacing
       */
      "border-spacing-y": [{
        "border-spacing-y": [borderSpacing]
      }],
      /**
       * Table Layout
       * @see https://tailwindcss.com/docs/table-layout
       */
      "table-layout": [{
        table: ["auto", "fixed"]
      }],
      /**
       * Caption Side
       * @see https://tailwindcss.com/docs/caption-side
       */
      caption: [{
        caption: ["top", "bottom"]
      }],
      // Transitions and Animation
      /**
       * Tranisition Property
       * @see https://tailwindcss.com/docs/transition-property
       */
      transition: [{
        transition: ["none", "all", "", "colors", "opacity", "shadow", "transform", isArbitraryValue]
      }],
      /**
       * Transition Duration
       * @see https://tailwindcss.com/docs/transition-duration
       */
      duration: [{
        duration: getNumberAndArbitrary()
      }],
      /**
       * Transition Timing Function
       * @see https://tailwindcss.com/docs/transition-timing-function
       */
      ease: [{
        ease: ["linear", "in", "out", "in-out", isArbitraryValue]
      }],
      /**
       * Transition Delay
       * @see https://tailwindcss.com/docs/transition-delay
       */
      delay: [{
        delay: getNumberAndArbitrary()
      }],
      /**
       * Animation
       * @see https://tailwindcss.com/docs/animation
       */
      animate: [{
        animate: ["none", "spin", "ping", "pulse", "bounce", isArbitraryValue]
      }],
      // Transforms
      /**
       * Transform
       * @see https://tailwindcss.com/docs/transform
       */
      transform: [{
        transform: ["", "gpu", "none"]
      }],
      /**
       * Scale
       * @see https://tailwindcss.com/docs/scale
       */
      scale: [{
        scale: [scale]
      }],
      /**
       * Scale X
       * @see https://tailwindcss.com/docs/scale
       */
      "scale-x": [{
        "scale-x": [scale]
      }],
      /**
       * Scale Y
       * @see https://tailwindcss.com/docs/scale
       */
      "scale-y": [{
        "scale-y": [scale]
      }],
      /**
       * Rotate
       * @see https://tailwindcss.com/docs/rotate
       */
      rotate: [{
        rotate: [isInteger, isArbitraryValue]
      }],
      /**
       * Translate X
       * @see https://tailwindcss.com/docs/translate
       */
      "translate-x": [{
        "translate-x": [translate]
      }],
      /**
       * Translate Y
       * @see https://tailwindcss.com/docs/translate
       */
      "translate-y": [{
        "translate-y": [translate]
      }],
      /**
       * Skew X
       * @see https://tailwindcss.com/docs/skew
       */
      "skew-x": [{
        "skew-x": [skew]
      }],
      /**
       * Skew Y
       * @see https://tailwindcss.com/docs/skew
       */
      "skew-y": [{
        "skew-y": [skew]
      }],
      /**
       * Transform Origin
       * @see https://tailwindcss.com/docs/transform-origin
       */
      "transform-origin": [{
        origin: ["center", "top", "top-right", "right", "bottom-right", "bottom", "bottom-left", "left", "top-left", isArbitraryValue]
      }],
      // Interactivity
      /**
       * Accent Color
       * @see https://tailwindcss.com/docs/accent-color
       */
      accent: [{
        accent: ["auto", colors]
      }],
      /**
       * Appearance
       * @see https://tailwindcss.com/docs/appearance
       */
      appearance: [{
        appearance: ["none", "auto"]
      }],
      /**
       * Cursor
       * @see https://tailwindcss.com/docs/cursor
       */
      cursor: [{
        cursor: ["auto", "default", "pointer", "wait", "text", "move", "help", "not-allowed", "none", "context-menu", "progress", "cell", "crosshair", "vertical-text", "alias", "copy", "no-drop", "grab", "grabbing", "all-scroll", "col-resize", "row-resize", "n-resize", "e-resize", "s-resize", "w-resize", "ne-resize", "nw-resize", "se-resize", "sw-resize", "ew-resize", "ns-resize", "nesw-resize", "nwse-resize", "zoom-in", "zoom-out", isArbitraryValue]
      }],
      /**
       * Caret Color
       * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities
       */
      "caret-color": [{
        caret: [colors]
      }],
      /**
       * Pointer Events
       * @see https://tailwindcss.com/docs/pointer-events
       */
      "pointer-events": [{
        "pointer-events": ["none", "auto"]
      }],
      /**
       * Resize
       * @see https://tailwindcss.com/docs/resize
       */
      resize: [{
        resize: ["none", "y", "x", ""]
      }],
      /**
       * Scroll Behavior
       * @see https://tailwindcss.com/docs/scroll-behavior
       */
      "scroll-behavior": [{
        scroll: ["auto", "smooth"]
      }],
      /**
       * Scroll Margin
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-m": [{
        "scroll-m": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin X
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mx": [{
        "scroll-mx": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Y
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-my": [{
        "scroll-my": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Start
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-ms": [{
        "scroll-ms": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin End
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-me": [{
        "scroll-me": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Top
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mt": [{
        "scroll-mt": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Right
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mr": [{
        "scroll-mr": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Bottom
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mb": [{
        "scroll-mb": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Left
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-ml": [{
        "scroll-ml": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-p": [{
        "scroll-p": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding X
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-px": [{
        "scroll-px": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Y
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-py": [{
        "scroll-py": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Start
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-ps": [{
        "scroll-ps": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding End
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pe": [{
        "scroll-pe": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Top
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pt": [{
        "scroll-pt": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Right
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pr": [{
        "scroll-pr": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Bottom
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pb": [{
        "scroll-pb": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Left
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pl": [{
        "scroll-pl": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Snap Align
       * @see https://tailwindcss.com/docs/scroll-snap-align
       */
      "snap-align": [{
        snap: ["start", "end", "center", "align-none"]
      }],
      /**
       * Scroll Snap Stop
       * @see https://tailwindcss.com/docs/scroll-snap-stop
       */
      "snap-stop": [{
        snap: ["normal", "always"]
      }],
      /**
       * Scroll Snap Type
       * @see https://tailwindcss.com/docs/scroll-snap-type
       */
      "snap-type": [{
        snap: ["none", "x", "y", "both"]
      }],
      /**
       * Scroll Snap Type Strictness
       * @see https://tailwindcss.com/docs/scroll-snap-type
       */
      "snap-strictness": [{
        snap: ["mandatory", "proximity"]
      }],
      /**
       * Touch Action
       * @see https://tailwindcss.com/docs/touch-action
       */
      touch: [{
        touch: ["auto", "none", "manipulation"]
      }],
      /**
       * Touch Action X
       * @see https://tailwindcss.com/docs/touch-action
       */
      "touch-x": [{
        "touch-pan": ["x", "left", "right"]
      }],
      /**
       * Touch Action Y
       * @see https://tailwindcss.com/docs/touch-action
       */
      "touch-y": [{
        "touch-pan": ["y", "up", "down"]
      }],
      /**
       * Touch Action Pinch Zoom
       * @see https://tailwindcss.com/docs/touch-action
       */
      "touch-pz": ["touch-pinch-zoom"],
      /**
       * User Select
       * @see https://tailwindcss.com/docs/user-select
       */
      select: [{
        select: ["none", "text", "all", "auto"]
      }],
      /**
       * Will Change
       * @see https://tailwindcss.com/docs/will-change
       */
      "will-change": [{
        "will-change": ["auto", "scroll", "contents", "transform", isArbitraryValue]
      }],
      // SVG
      /**
       * Fill
       * @see https://tailwindcss.com/docs/fill
       */
      fill: [{
        fill: [colors, "none"]
      }],
      /**
       * Stroke Width
       * @see https://tailwindcss.com/docs/stroke-width
       */
      "stroke-w": [{
        stroke: [isLength, isArbitraryLength, isArbitraryNumber]
      }],
      /**
       * Stroke
       * @see https://tailwindcss.com/docs/stroke
       */
      stroke: [{
        stroke: [colors, "none"]
      }],
      // Accessibility
      /**
       * Screen Readers
       * @see https://tailwindcss.com/docs/screen-readers
       */
      sr: ["sr-only", "not-sr-only"],
      /**
       * Forced Color Adjust
       * @see https://tailwindcss.com/docs/forced-color-adjust
       */
      "forced-color-adjust": [{
        "forced-color-adjust": ["auto", "none"]
      }]
    },
    conflictingClassGroups: {
      overflow: ["overflow-x", "overflow-y"],
      overscroll: ["overscroll-x", "overscroll-y"],
      inset: ["inset-x", "inset-y", "start", "end", "top", "right", "bottom", "left"],
      "inset-x": ["right", "left"],
      "inset-y": ["top", "bottom"],
      flex: ["basis", "grow", "shrink"],
      gap: ["gap-x", "gap-y"],
      p: ["px", "py", "ps", "pe", "pt", "pr", "pb", "pl"],
      px: ["pr", "pl"],
      py: ["pt", "pb"],
      m: ["mx", "my", "ms", "me", "mt", "mr", "mb", "ml"],
      mx: ["mr", "ml"],
      my: ["mt", "mb"],
      size: ["w", "h"],
      "font-size": ["leading"],
      "fvn-normal": ["fvn-ordinal", "fvn-slashed-zero", "fvn-figure", "fvn-spacing", "fvn-fraction"],
      "fvn-ordinal": ["fvn-normal"],
      "fvn-slashed-zero": ["fvn-normal"],
      "fvn-figure": ["fvn-normal"],
      "fvn-spacing": ["fvn-normal"],
      "fvn-fraction": ["fvn-normal"],
      "line-clamp": ["display", "overflow"],
      rounded: ["rounded-s", "rounded-e", "rounded-t", "rounded-r", "rounded-b", "rounded-l", "rounded-ss", "rounded-se", "rounded-ee", "rounded-es", "rounded-tl", "rounded-tr", "rounded-br", "rounded-bl"],
      "rounded-s": ["rounded-ss", "rounded-es"],
      "rounded-e": ["rounded-se", "rounded-ee"],
      "rounded-t": ["rounded-tl", "rounded-tr"],
      "rounded-r": ["rounded-tr", "rounded-br"],
      "rounded-b": ["rounded-br", "rounded-bl"],
      "rounded-l": ["rounded-tl", "rounded-bl"],
      "border-spacing": ["border-spacing-x", "border-spacing-y"],
      "border-w": ["border-w-s", "border-w-e", "border-w-t", "border-w-r", "border-w-b", "border-w-l"],
      "border-w-x": ["border-w-r", "border-w-l"],
      "border-w-y": ["border-w-t", "border-w-b"],
      "border-color": ["border-color-t", "border-color-r", "border-color-b", "border-color-l"],
      "border-color-x": ["border-color-r", "border-color-l"],
      "border-color-y": ["border-color-t", "border-color-b"],
      "scroll-m": ["scroll-mx", "scroll-my", "scroll-ms", "scroll-me", "scroll-mt", "scroll-mr", "scroll-mb", "scroll-ml"],
      "scroll-mx": ["scroll-mr", "scroll-ml"],
      "scroll-my": ["scroll-mt", "scroll-mb"],
      "scroll-p": ["scroll-px", "scroll-py", "scroll-ps", "scroll-pe", "scroll-pt", "scroll-pr", "scroll-pb", "scroll-pl"],
      "scroll-px": ["scroll-pr", "scroll-pl"],
      "scroll-py": ["scroll-pt", "scroll-pb"],
      touch: ["touch-x", "touch-y", "touch-pz"],
      "touch-x": ["touch"],
      "touch-y": ["touch"],
      "touch-pz": ["touch"]
    },
    conflictingClassGroupModifiers: {
      "font-size": ["leading"]
    }
  };
}
const twMerge = /* @__PURE__ */ createTailwindMerge(getDefaultConfig);
var f$1 = 0;
function u$1(e2, t2, n2, o2, i2, u2) {
  t2 || (t2 = {});
  var a2, c2, p2 = t2;
  if ("ref" in p2)
    for (c2 in p2 = {}, t2)
      "ref" == c2 ? a2 = t2[c2] : p2[c2] = t2[c2];
  var l2 = { type: e2, props: p2, key: n2, ref: a2, __k: null, __: null, __b: 0, __e: null, __d: void 0, __c: null, constructor: void 0, __v: --f$1, __i: -1, __u: 0, __source: i2, __self: u2 };
  if ("function" == typeof e2 && (a2 = e2.defaultProps))
    for (c2 in a2)
      void 0 === p2[c2] && (p2[c2] = a2[c2]);
  return l$2.vnode && l$2.vnode(l2), l2;
}
function r$1(e2) {
  var t2, f2, n2 = "";
  if ("string" == typeof e2 || "number" == typeof e2)
    n2 += e2;
  else if ("object" == typeof e2)
    if (Array.isArray(e2)) {
      var o2 = e2.length;
      for (t2 = 0; t2 < o2; t2++)
        e2[t2] && (f2 = r$1(e2[t2])) && (n2 && (n2 += " "), n2 += f2);
    } else
      for (f2 in e2)
        e2[f2] && (n2 && (n2 += " "), n2 += f2);
  return n2;
}
function clsx() {
  for (var e2, t2, f2 = 0, n2 = "", o2 = arguments.length; f2 < o2; f2++)
    (e2 = arguments[f2]) && (t2 = r$1(e2)) && (n2 && (n2 += " "), n2 += t2);
  return n2;
}
var t, r, u, i, o = 0, f = [], c = [], e = l$2, a = e.__b, v = e.__r, l = e.diffed, m = e.__c, s = e.unmount, d = e.__;
function h(n2, t2) {
  e.__h && e.__h(r, n2, o || t2), o = 0;
  var u2 = r.__H || (r.__H = { __: [], __h: [] });
  return n2 >= u2.__.length && u2.__.push({ __V: c }), u2.__[n2];
}
function p(n2) {
  return o = 1, y(D$1, n2);
}
function y(n2, u2, i2) {
  var o2 = h(t++, 2);
  if (o2.t = n2, !o2.__c && (o2.__ = [i2 ? i2(u2) : D$1(void 0, u2), function(n3) {
    var t2 = o2.__N ? o2.__N[0] : o2.__[0], r2 = o2.t(t2, n3);
    t2 !== r2 && (o2.__N = [r2, o2.__[1]], o2.__c.setState({}));
  }], o2.__c = r, !r.u)) {
    var f2 = function(n3, t2, r2) {
      if (!o2.__c.__H)
        return true;
      var u3 = o2.__c.__H.__.filter(function(n4) {
        return !!n4.__c;
      });
      if (u3.every(function(n4) {
        return !n4.__N;
      }))
        return !c2 || c2.call(this, n3, t2, r2);
      var i3 = false;
      return u3.forEach(function(n4) {
        if (n4.__N) {
          var t3 = n4.__[0];
          n4.__ = n4.__N, n4.__N = void 0, t3 !== n4.__[0] && (i3 = true);
        }
      }), !(!i3 && o2.__c.props === n3) && (!c2 || c2.call(this, n3, t2, r2));
    };
    r.u = true;
    var c2 = r.shouldComponentUpdate, e2 = r.componentWillUpdate;
    r.componentWillUpdate = function(n3, t2, r2) {
      if (this.__e) {
        var u3 = c2;
        c2 = void 0, f2(n3, t2, r2), c2 = u3;
      }
      e2 && e2.call(this, n3, t2, r2);
    }, r.shouldComponentUpdate = f2;
  }
  return o2.__N || o2.__;
}
function _(n2, u2) {
  var i2 = h(t++, 3);
  !e.__s && C$1(i2.__H, u2) && (i2.__ = n2, i2.i = u2, r.__H.__h.push(i2));
}
function A$1(n2, u2) {
  var i2 = h(t++, 4);
  !e.__s && C$1(i2.__H, u2) && (i2.__ = n2, i2.i = u2, r.__h.push(i2));
}
function F(n2) {
  return o = 5, q(function() {
    return { current: n2 };
  }, []);
}
function T$1(n2, t2, r2) {
  o = 6, A$1(function() {
    return "function" == typeof n2 ? (n2(t2()), function() {
      return n2(null);
    }) : n2 ? (n2.current = t2(), function() {
      return n2.current = null;
    }) : void 0;
  }, null == r2 ? r2 : r2.concat(n2));
}
function q(n2, r2) {
  var u2 = h(t++, 7);
  return C$1(u2.__H, r2) ? (u2.__V = n2(), u2.i = r2, u2.__h = n2, u2.__V) : u2.__;
}
function j() {
  for (var n2; n2 = f.shift(); )
    if (n2.__P && n2.__H)
      try {
        n2.__H.__h.forEach(z$1), n2.__H.__h.forEach(B$1), n2.__H.__h = [];
      } catch (t2) {
        n2.__H.__h = [], e.__e(t2, n2.__v);
      }
}
e.__b = function(n2) {
  r = null, a && a(n2);
}, e.__ = function(n2, t2) {
  n2 && t2.__k && t2.__k.__m && (n2.__m = t2.__k.__m), d && d(n2, t2);
}, e.__r = function(n2) {
  v && v(n2), t = 0;
  var i2 = (r = n2.__c).__H;
  i2 && (u === r ? (i2.__h = [], r.__h = [], i2.__.forEach(function(n3) {
    n3.__N && (n3.__ = n3.__N), n3.__V = c, n3.__N = n3.i = void 0;
  })) : (i2.__h.forEach(z$1), i2.__h.forEach(B$1), i2.__h = [], t = 0)), u = r;
}, e.diffed = function(n2) {
  l && l(n2);
  var t2 = n2.__c;
  t2 && t2.__H && (t2.__H.__h.length && (1 !== f.push(t2) && i === e.requestAnimationFrame || ((i = e.requestAnimationFrame) || w$1)(j)), t2.__H.__.forEach(function(n3) {
    n3.i && (n3.__H = n3.i), n3.__V !== c && (n3.__ = n3.__V), n3.i = void 0, n3.__V = c;
  })), u = r = null;
}, e.__c = function(n2, t2) {
  t2.some(function(n3) {
    try {
      n3.__h.forEach(z$1), n3.__h = n3.__h.filter(function(n4) {
        return !n4.__ || B$1(n4);
      });
    } catch (r2) {
      t2.some(function(n4) {
        n4.__h && (n4.__h = []);
      }), t2 = [], e.__e(r2, n3.__v);
    }
  }), m && m(n2, t2);
}, e.unmount = function(n2) {
  s && s(n2);
  var t2, r2 = n2.__c;
  r2 && r2.__H && (r2.__H.__.forEach(function(n3) {
    try {
      z$1(n3);
    } catch (n4) {
      t2 = n4;
    }
  }), r2.__H = void 0, t2 && e.__e(t2, r2.__v));
};
var k$1 = "function" == typeof requestAnimationFrame;
function w$1(n2) {
  var t2, r2 = function() {
    clearTimeout(u2), k$1 && cancelAnimationFrame(t2), setTimeout(n2);
  }, u2 = setTimeout(r2, 100);
  k$1 && (t2 = requestAnimationFrame(r2));
}
function z$1(n2) {
  var t2 = r, u2 = n2.__c;
  "function" == typeof u2 && (n2.__c = void 0, u2()), r = t2;
}
function B$1(n2) {
  var t2 = r;
  n2.__c = n2.__(), r = t2;
}
function C$1(n2, t2) {
  return !n2 || n2.length !== t2.length || t2.some(function(t3, r2) {
    return t3 !== n2[r2];
  });
}
function D$1(n2, t2) {
  return "function" == typeof t2 ? t2(n2) : t2;
}
function g(n2, t2) {
  for (var e2 in t2)
    n2[e2] = t2[e2];
  return n2;
}
function E(n2, t2) {
  for (var e2 in n2)
    if ("__source" !== e2 && !(e2 in t2))
      return true;
  for (var r2 in t2)
    if ("__source" !== r2 && n2[r2] !== t2[r2])
      return true;
  return false;
}
function C(n2, t2) {
  this.props = n2, this.context = t2;
}
(C.prototype = new b$1()).isPureReactComponent = true, C.prototype.shouldComponentUpdate = function(n2, t2) {
  return E(this.props, n2) || E(this.state, t2);
};
var R = l$2.__b;
l$2.__b = function(n2) {
  n2.type && n2.type.__f && n2.ref && (n2.props.ref = n2.ref, n2.ref = null), R && R(n2);
};
var w = "undefined" != typeof Symbol && Symbol.for && Symbol.for("react.forward_ref") || 3911;
function k(n2) {
  function t2(t3) {
    var e2 = g({}, t3);
    return delete e2.ref, n2(e2, t3.ref || null);
  }
  return t2.$$typeof = w, t2.render = t2, t2.prototype.isReactComponent = t2.__f = true, t2.displayName = "ForwardRef(" + (n2.displayName || n2.name) + ")", t2;
}
var I = function(n2, t2) {
  return null == n2 ? null : H$1(H$1(n2).map(t2));
}, N = { map: I, forEach: I, count: function(n2) {
  return n2 ? H$1(n2).length : 0;
}, only: function(n2) {
  var t2 = H$1(n2);
  if (1 !== t2.length)
    throw "Children.only";
  return t2[0];
}, toArray: H$1 }, M = l$2.__e;
l$2.__e = function(n2, t2, e2, r2) {
  if (n2.then) {
    for (var u2, o2 = t2; o2 = o2.__; )
      if ((u2 = o2.__c) && u2.__c)
        return null == t2.__e && (t2.__e = e2.__e, t2.__k = e2.__k), u2.__c(n2, t2);
  }
  M(n2, t2, e2, r2);
};
var T = l$2.unmount;
function A(n2, t2, e2) {
  return n2 && (n2.__c && n2.__c.__H && (n2.__c.__H.__.forEach(function(n3) {
    "function" == typeof n3.__c && n3.__c();
  }), n2.__c.__H = null), null != (n2 = g({}, n2)).__c && (n2.__c.__P === e2 && (n2.__c.__P = t2), n2.__c = null), n2.__k = n2.__k && n2.__k.map(function(n3) {
    return A(n3, t2, e2);
  })), n2;
}
function D(n2, t2, e2) {
  return n2 && e2 && (n2.__v = null, n2.__k = n2.__k && n2.__k.map(function(n3) {
    return D(n3, t2, e2);
  }), n2.__c && n2.__c.__P === t2 && (n2.__e && e2.appendChild(n2.__e), n2.__c.__e = true, n2.__c.__P = e2)), n2;
}
function L() {
  this.__u = 0, this.t = null, this.__b = null;
}
function O(n2) {
  var t2 = n2.__.__c;
  return t2 && t2.__a && t2.__a(n2);
}
function U() {
  this.u = null, this.o = null;
}
l$2.unmount = function(n2) {
  var t2 = n2.__c;
  t2 && t2.__R && t2.__R(), t2 && 32 & n2.__u && (n2.type = null), T && T(n2);
}, (L.prototype = new b$1()).__c = function(n2, t2) {
  var e2 = t2.__c, r2 = this;
  null == r2.t && (r2.t = []), r2.t.push(e2);
  var u2 = O(r2.__v), o2 = false, i2 = function() {
    o2 || (o2 = true, e2.__R = null, u2 ? u2(l2) : l2());
  };
  e2.__R = i2;
  var l2 = function() {
    if (!--r2.__u) {
      if (r2.state.__a) {
        var n3 = r2.state.__a;
        r2.__v.__k[0] = D(n3, n3.__c.__P, n3.__c.__O);
      }
      var t3;
      for (r2.setState({ __a: r2.__b = null }); t3 = r2.t.pop(); )
        t3.forceUpdate();
    }
  };
  r2.__u++ || 32 & t2.__u || r2.setState({ __a: r2.__b = r2.__v.__k[0] }), n2.then(i2, i2);
}, L.prototype.componentWillUnmount = function() {
  this.t = [];
}, L.prototype.render = function(n2, e2) {
  if (this.__b) {
    if (this.__v.__k) {
      var r2 = document.createElement("div"), o2 = this.__v.__k[0].__c;
      this.__v.__k[0] = A(this.__b, r2, o2.__O = o2.__P);
    }
    this.__b = null;
  }
  var i2 = e2.__a && _$1(k$3, null, n2.fallback);
  return i2 && (i2.__u &= -33), [_$1(k$3, null, e2.__a ? null : n2.children), i2];
};
var V = function(n2, t2, e2) {
  if (++e2[1] === e2[0] && n2.o.delete(t2), n2.props.revealOrder && ("t" !== n2.props.revealOrder[0] || !n2.o.size))
    for (e2 = n2.u; e2; ) {
      for (; e2.length > 3; )
        e2.pop()();
      if (e2[1] < e2[0])
        break;
      n2.u = e2 = e2[2];
    }
};
(U.prototype = new b$1()).__a = function(n2) {
  var t2 = this, e2 = O(t2.__v), r2 = t2.o.get(n2);
  return r2[0]++, function(u2) {
    var o2 = function() {
      t2.props.revealOrder ? (r2.push(u2), V(t2, n2, r2)) : u2();
    };
    e2 ? e2(o2) : o2();
  };
}, U.prototype.render = function(n2) {
  this.u = null, this.o = /* @__PURE__ */ new Map();
  var t2 = H$1(n2.children);
  n2.revealOrder && "b" === n2.revealOrder[0] && t2.reverse();
  for (var e2 = t2.length; e2--; )
    this.o.set(t2[e2], this.u = [1, 0, this.u]);
  return n2.children;
}, U.prototype.componentDidUpdate = U.prototype.componentDidMount = function() {
  var n2 = this;
  this.o.forEach(function(t2, e2) {
    V(n2, e2, t2);
  });
};
var z = "undefined" != typeof Symbol && Symbol.for && Symbol.for("react.element") || 60103, B = /^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|dominant|fill|flood|font|glyph(?!R)|horiz|image(!S)|letter|lighting|marker(?!H|W|U)|overline|paint|pointer|shape|stop|strikethrough|stroke|text(?!L)|transform|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/, H = /^on(Ani|Tra|Tou|BeforeInp|Compo)/, Z = /[A-Z0-9]/g, Y = "undefined" != typeof document, $ = function(n2) {
  return ("undefined" != typeof Symbol && "symbol" == typeof Symbol() ? /fil|che|rad/ : /fil|che|ra/).test(n2);
};
b$1.prototype.isReactComponent = {}, ["componentWillMount", "componentWillReceiveProps", "componentWillUpdate"].forEach(function(t2) {
  Object.defineProperty(b$1.prototype, t2, { configurable: true, get: function() {
    return this["UNSAFE_" + t2];
  }, set: function(n2) {
    Object.defineProperty(this, t2, { configurable: true, writable: true, value: n2 });
  } });
});
var J = l$2.event;
function K() {
}
function Q() {
  return this.cancelBubble;
}
function X() {
  return this.defaultPrevented;
}
l$2.event = function(n2) {
  return J && (n2 = J(n2)), n2.persist = K, n2.isPropagationStopped = Q, n2.isDefaultPrevented = X, n2.nativeEvent = n2;
};
var tn = { enumerable: false, configurable: true, get: function() {
  return this.class;
} }, en = l$2.vnode;
l$2.vnode = function(n2) {
  "string" == typeof n2.type && function(n3) {
    var t2 = n3.props, e2 = n3.type, u2 = {};
    for (var o2 in t2) {
      var i2 = t2[o2];
      if (!("value" === o2 && "defaultValue" in t2 && null == i2 || Y && "children" === o2 && "noscript" === e2 || "class" === o2 || "className" === o2)) {
        var l2 = o2.toLowerCase();
        "defaultValue" === o2 && "value" in t2 && null == t2.value ? o2 = "value" : "download" === o2 && true === i2 ? i2 = "" : "translate" === l2 && "no" === i2 ? i2 = false : "ondoubleclick" === l2 ? o2 = "ondblclick" : "onchange" !== l2 || "input" !== e2 && "textarea" !== e2 || $(t2.type) ? "onfocus" === l2 ? o2 = "onfocusin" : "onblur" === l2 ? o2 = "onfocusout" : H.test(o2) ? o2 = l2 : -1 === e2.indexOf("-") && B.test(o2) ? o2 = o2.replace(Z, "-$&").toLowerCase() : null === i2 && (i2 = void 0) : l2 = o2 = "oninput", "oninput" === l2 && u2[o2 = l2] && (o2 = "oninputCapture"), u2[o2] = i2;
      }
    }
    "select" == e2 && u2.multiple && Array.isArray(u2.value) && (u2.value = H$1(t2.children).forEach(function(n4) {
      n4.props.selected = -1 != u2.value.indexOf(n4.props.value);
    })), "select" == e2 && null != u2.defaultValue && (u2.value = H$1(t2.children).forEach(function(n4) {
      n4.props.selected = u2.multiple ? -1 != u2.defaultValue.indexOf(n4.props.value) : u2.defaultValue == n4.props.value;
    })), t2.class && !t2.className ? (u2.class = t2.class, Object.defineProperty(u2, "className", tn)) : (t2.className && !t2.class || t2.class && t2.className) && (u2.class = u2.className = t2.className), n3.props = u2;
  }(n2), n2.$$typeof = z, en && en(n2);
};
var rn = l$2.__r;
l$2.__r = function(n2) {
  rn && rn(n2), n2.__c;
};
var un = l$2.diffed;
l$2.diffed = function(n2) {
  un && un(n2);
  var t2 = n2.props, e2 = n2.__e;
  null != e2 && "textarea" === n2.type && "value" in t2 && t2.value !== e2.value && (e2.value = null == t2.value ? "" : t2.value);
};
function fn(n2) {
  return !!n2 && n2.$$typeof === z;
}
function hn(n2) {
  return fn(n2) ? E$2.apply(null, arguments) : n2;
}
const Accordion = k(({
  name = "accordion",
  icon,
  dataTheme,
  className,
  children,
  ...props
}, ref) => {
  const classes = twMerge("collapse", clsx({
    "collapse-arrow": icon === "arrow",
    "collapse-plus": icon === "plus"
  }), className);
  return u$1("div", {
    "data-theme": dataTheme,
    className: classes,
    children: [u$1("input", {
      ...props,
      ref,
      type: "radio",
      "aria-label": "Accordion radio",
      name
    }), children]
  });
});
Accordion.displayName = "Accordion";
const Alert = k(({
  children,
  icon,
  status,
  dataTheme,
  className,
  ...props
}, ref) => {
  const classes = twMerge("alert", className, clsx({
    "alert-info": status === "info",
    "alert-success": status === "success",
    "alert-warning": status === "warning",
    "alert-error": status === "error"
  }));
  return u$1("div", {
    role: "alert",
    ...props,
    ref,
    "data-theme": dataTheme,
    className: classes,
    children: [icon, children]
  });
});
Alert.displayName = "Alert";
const Artboard = k(({
  children,
  demo = true,
  size,
  horizontal,
  dataTheme,
  className,
  ...props
}, ref) => {
  const classes = twMerge("artboard", className, clsx({
    "artboard-demo": demo,
    "phone-1": size === 1,
    "phone-2": size === 2,
    "phone-3": size === 3,
    "phone-4": size === 4,
    "phone-5": size === 5,
    "phone-6": size === 6,
    horizontal
  }));
  return u$1("div", {
    "aria-label": "Artboard",
    ...props,
    ref,
    "data-theme": dataTheme,
    className: classes,
    children
  });
});
Artboard.displayName = "Artboard";
const isReactFragment = (node) => {
  if (!node)
    return false;
  if (node == null ? void 0 : node.type) {
    return (node == null ? void 0 : node.type) === k$3;
  }
  return node === k$3;
};
const wrapWithElementIfInvalid = ({
  node,
  wrapper,
  props = {}
}) => {
  var _a2, _b2;
  if (!node) {
    return hn(wrapper, props);
  } else if (!fn(node)) {
    return hn(wrapper, props, node);
  } else if (isReactFragment(node)) {
    return hn(wrapper, {
      ...props,
      className: twMerge((_a2 = node.props) == null ? void 0 : _a2.className, props == null ? void 0 : props.className)
    }, node.props.children);
  } else {
    return hn(node, {
      ...props,
      className: twMerge((_b2 = node.props) == null ? void 0 : _b2.className, props == null ? void 0 : props.className)
    });
  }
};
const isSingleStringChild = (children) => {
  return children && N.count(children) === 1 && fn(children) && typeof children.props.children === "string";
};
const Avatar = k(({
  size = "md",
  src: src2,
  letters,
  shape,
  color,
  border,
  borderColor,
  online,
  offline,
  dataTheme,
  className,
  innerClassName,
  children,
  alt,
  ...props
}, ref) => {
  const containerClasses = twMerge("avatar", className, clsx({
    online,
    offline,
    placeholder: !src2
  }));
  const imgClasses = clsx(innerClassName, {
    "ring ring-offset-base-100 ring-offset-2": border,
    "ring-accent": borderColor === "accent",
    "ring-error": borderColor === "error",
    "ring-info": borderColor === "info",
    "ring-neutral": borderColor === "neutral",
    "ring-primary": borderColor === "primary",
    "ring-secondary": borderColor === "secondary",
    "ring-success": borderColor === "success",
    "ring-warning": borderColor === "warning",
    "rounded-btn": shape === "square",
    "rounded-full": shape === "circle",
    "w-32 h-32": size === "lg",
    "w-24 h-24": size === "md",
    "w-14 h-14": size === "sm",
    "w-10 h-10": size === "xs"
  });
  const placeholderClasses = clsx(innerClassName, {
    "bg-neutral-focus": !color,
    "text-neutral-content": !color || color === "neutral",
    "bg-accent": color === "accent",
    "bg-error": color === "error",
    "bg-info": color === "info",
    "bg-neutral": color === "neutral",
    "bg-primary": color === "primary",
    "bg-secondary": color === "secondary",
    "bg-success": color === "success",
    "bg-warning": color === "warning",
    "text-accent-content": color === "accent",
    "text-error-content": color === "error",
    "text-info-content": color === "info",
    "text-primary-content": color === "primary",
    "text-secondary-content": color === "secondary",
    "text-success-content": color === "success",
    "text-warning-content": color === "warning",
    "ring ring-offset-base-100 ring-offset-2": border,
    "ring-accent": borderColor === "accent",
    "ring-error": borderColor === "error",
    "ring-info": borderColor === "info",
    "ring-neutral": borderColor === "neutral",
    "ring-primary": borderColor === "primary",
    "ring-secondary": borderColor === "secondary",
    "ring-success": borderColor === "success",
    "ring-warning": borderColor === "warning",
    "rounded-btn": shape === "square",
    "rounded-full": shape === "circle",
    "w-32 h-32 text-3xl": size === "lg",
    "w-24 h-24 text-xl": size === "md",
    "w-14 h-14": size === "sm",
    "w-10 h-10": size === "xs"
  });
  const customImgDimension = typeof size === "number" ? {
    width: size,
    height: size
  } : {};
  const renderAvatarContents = () => {
    if (src2) {
      return u$1("div", {
        className: imgClasses,
        style: customImgDimension,
        children: u$1("img", {
          src: src2,
          alt
        })
      });
    } else if (letters || isSingleStringChild(children)) {
      return u$1("div", {
        className: placeholderClasses,
        style: customImgDimension,
        children: u$1("span", {
          children: letters ? letters : children
        })
      });
    } else if (N.count(children) === 1) {
      const firstChild = N.only(children);
      return hn(firstChild, {
        className: twMerge(imgClasses, firstChild.props.className),
        style: {
          ...customImgDimension,
          ...firstChild.props.style
        }
      });
    } else {
      return u$1("div", {
        className: imgClasses,
        style: customImgDimension,
        children
      });
    }
  };
  return u$1("div", {
    "aria-label": "Avatar photo",
    ...props,
    "data-theme": dataTheme,
    className: containerClasses,
    ref,
    children: renderAvatarContents()
  });
});
Avatar.displayName = "Avatar";
const AvatarGroup = k(({
  children,
  className,
  ...props
}, ref) => {
  const classes = twMerge("avatar-group -space-x-6", className);
  return u$1("div", {
    "aria-label": `Group of ${children.length} avatar photos`,
    ...props,
    className: classes,
    ref,
    children
  });
});
AvatarGroup.displayName = "Avatar Group";
const Badge = k(({
  children,
  variant,
  outline,
  size,
  color,
  responsive,
  dataTheme,
  className,
  ...props
}, ref) => {
  const classes = twMerge("badge", className, clsx({
    "badge-lg": size === "lg",
    "badge-md": size === "md",
    "badge-sm": size === "sm",
    "badge-xs": size === "xs",
    "badge-outline": variant === "outline" || outline,
    "badge-neutral": color === "neutral",
    "badge-primary": color === "primary",
    "badge-secondary": color === "secondary",
    "badge-accent": color === "accent",
    "badge-ghost": color === "ghost",
    "badge-info": color === "info",
    "badge-success": color === "success",
    "badge-warning": color === "warning",
    "badge-error": color === "error",
    "badge-xs md:badge-sm lg:badge-md xl:badge-lg": responsive
  }));
  return u$1("div", {
    "aria-label": "Badge",
    ...props,
    "data-theme": dataTheme,
    className: classes,
    ref,
    children
  });
});
Badge.displayName = "Badge";
const BottomNavigation = k(({
  size,
  dataTheme,
  className,
  children,
  ...props
}, ref) => {
  const classes = twMerge("btm-nav", clsx({
    "btm-nav-lg": size === "lg",
    "btm-nav-md": size === "md",
    "btm-nav-sm": size === "sm",
    "btm-nav-xs": size === "xs"
  }), className);
  return u$1("div", {
    ...props,
    role: "navigation",
    "data-theme": dataTheme,
    className: classes,
    ref,
    children
  });
});
BottomNavigation.displayName = "BottomNavigation";
const BottomNavigationItem = k(({
  children,
  className,
  color,
  dataTheme,
  active,
  disabled,
  ...props
}, ref) => {
  const classes = twMerge(className, clsx({
    "text-neutral": color === "neutral",
    "text-primary": color === "primary",
    "text-secondary": color === "secondary",
    "text-accent": color === "accent",
    "text-info": color === "info",
    "text-success": color === "success",
    "text-warning": color === "warning",
    "text-error": color === "error",
    active,
    disabled
  }));
  return u$1("button", {
    ...props,
    className: classes,
    "data-theme": dataTheme,
    ref,
    children
  });
});
BottomNavigationItem.displayName = "Bottom Navigation Item";
const BottomNavigationLabel = k(({
  children,
  className,
  ...props
}, ref) => {
  const classes = twMerge("btm-nav-label", className);
  return u$1("span", {
    ...props,
    className: classes,
    ref,
    children
  });
});
BottomNavigationLabel.displayName = "Bottom Navigation Label";
const Breadcrumbs = k(({
  children,
  dataTheme,
  className,
  innerProps,
  innerRef,
  ...props
}, ref) => {
  const classes = twMerge("breadcrumbs", "text-sm", className);
  return u$1("div", {
    "aria-label": "Breadcrumbs",
    ...props,
    "data-theme": dataTheme,
    className: classes,
    ref,
    children: u$1("ul", {
      ...innerProps,
      ref: innerRef,
      children
    })
  });
});
Breadcrumbs.displayName = "Breadcrumbs";
const BreadcrumbsItem = k(({
  children,
  href,
  ...props
}, ref) => {
  return u$1("li", {
    ...props,
    ref,
    children: href ? u$1("a", {
      href,
      children
    }) : u$1(k$3, {
      children
    })
  });
});
BreadcrumbsItem.displayName = "Breadcrumbs Item";
const BrowserMockup = k(({
  dataTheme,
  className,
  inputClassName,
  innerClassName,
  children,
  url,
  variant = "border",
  inputRef,
  innerRef,
  ...props
}, ref) => {
  const classes = twMerge("mockup-browser border", clsx({
    "border-base-300": variant === "border",
    "bg-base-300": variant === "background"
  }), className);
  const inputClasses = twMerge("input", clsx({
    "border-base-300": variant === "border"
  }), inputClassName);
  const innerClasses = twMerge("flex justify-center px-4 py-16 ", clsx({
    "border-t border-base-300": variant === "border",
    "bg-base-200": variant === "background"
  }), innerClassName);
  return u$1("div", {
    "aria-label": "Browser mockup",
    ...props,
    "data-theme": dataTheme,
    className: classes,
    ref,
    children: [u$1("div", {
      className: "mockup-browser-toolbar",
      children: u$1("div", {
        className: inputClasses,
        ref: inputRef,
        children: url
      })
    }), u$1("div", {
      className: innerClasses,
      ref: innerRef,
      children
    })]
  });
});
BrowserMockup.displayName = "BrowserMockup";
const Loading = k(({
  size,
  variant = "spinner",
  color,
  dataTheme,
  className,
  style,
  ...props
}, ref) => {
  const classes = twMerge("loading", className, clsx({
    "loading-lg": size === "lg",
    "loading-md": size === "md",
    "loading-sm": size === "sm",
    "loading-xs": size === "xs",
    "loading-spinner": variant === "spinner",
    "loading-dots": variant === "dots",
    "loading-ring": variant === "ring",
    "loading-ball": variant === "ball",
    "loading-bars": variant === "bars",
    "loading-infinity": variant === "infinity",
    "text-primary": color === "primary",
    "text-secondary": color === "secondary",
    "text-accent": color === "accent",
    "text-info": color === "info",
    "text-success": color === "success",
    "text-warning": color === "warning",
    "text-error": color === "error",
    "text-ghost": color === "ghost"
  }));
  return u$1("span", {
    ...props,
    ref,
    "data-theme": dataTheme,
    className: classes,
    style
  });
});
Loading.displayName = "Loading";
const VoidElementList = ["area", "base", "br", "col", "embed", "hr", "img", "input", "link", "keygen", "meta", "param", "source", "track", "wbr"];
const Button = k(({
  children,
  shape,
  size,
  variant,
  color,
  glass,
  startIcon,
  endIcon,
  wide,
  fullWidth,
  responsive,
  animation = true,
  loading,
  active,
  disabled,
  dataTheme,
  className,
  style,
  tag = "button",
  ...props
}, ref) => {
  const Tag = tag;
  const classes = twMerge("btn", className, clsx((startIcon && !loading || endIcon) && "gap-2", {
    "btn-lg": size === "lg",
    "btn-md": size === "md",
    "btn-sm": size === "sm",
    "btn-xs": size === "xs",
    "btn-circle": shape === "circle",
    "btn-square": shape === "square",
    "btn-outline": variant === "outline",
    "btn-link": variant === "link",
    "btn-neutral": color === "neutral",
    "btn-primary": color === "primary",
    "btn-secondary": color === "secondary",
    "btn-accent": color === "accent",
    "btn-info": color === "info",
    "btn-success": color === "success",
    "btn-warning": color === "warning",
    "btn-error": color === "error",
    "btn-ghost": color === "ghost",
    glass,
    "btn-wide": wide,
    "btn-block": fullWidth,
    "btn-xs sm:btn-sm md:btn-md lg:btn-lg": responsive,
    "no-animation": !animation,
    "btn-active": active,
    "btn-disabled": disabled
  }));
  if (VoidElementList.includes(Tag)) {
    return u$1(Tag, {
      ...props,
      ref,
      "data-theme": dataTheme,
      className: classes,
      style,
      disabled
    });
  } else {
    return u$1(Tag, {
      ...props,
      ref,
      "data-theme": dataTheme,
      className: classes,
      style,
      disabled,
      children: [loading && u$1(Loading, {
        size
      }), startIcon && !loading && startIcon, children, endIcon && endIcon]
    });
  }
});
Button.displayName = "Button";
const DYNAMIC_MODIFIERS = {
  compact: {
    true: "card-compact",
    xs: "xs:card-compact",
    sm: "sm:card-compact",
    md: "md:card-compact",
    lg: "lg:card-compact"
  },
  normal: {
    true: "card-normal",
    xs: "xs:card-normal",
    sm: "sm:card-normal",
    md: "md:card-normal",
    lg: "lg:card-normal"
  },
  side: {
    true: "card-side",
    xs: "xs:card-side",
    sm: "sm:card-side",
    md: "md:card-side",
    lg: "lg:card-side"
  }
};
const Card = k(({
  bordered = true,
  imageFull,
  normal,
  compact,
  side,
  className,
  ...props
}, ref) => {
  const classes = twMerge("card", className, clsx({
    "card-bordered": bordered,
    "image-full": imageFull,
    [compact && DYNAMIC_MODIFIERS.compact[compact.toString()] || ""]: compact,
    [normal && DYNAMIC_MODIFIERS.normal[normal.toString()] || ""]: normal,
    [side && DYNAMIC_MODIFIERS.side[side.toString()] || ""]: side
  }));
  return u$1("div", {
    "aria-label": "Card",
    ...props,
    className: classes,
    ref
  });
});
Card.displayName = "Card";
const CardActions = k(({
  className,
  ...props
}, ref) => u$1("div", {
  ...props,
  className: twMerge("card-actions", className),
  ref
}));
CardActions.displayName = "Card actions";
const CardBody = k(({
  className,
  ...props
}, ref) => u$1("div", {
  ...props,
  className: twMerge("card-body", className),
  ref
}));
CardBody.displayName = "Card Body";
const CardImage = k(({
  ...props
}, ref) => {
  return u$1("figure", {
    ref,
    children: u$1("img", {
      ...props
    })
  });
});
CardImage.displayName = "Card image";
const CardTitle = k(({
  className,
  tag = "div",
  ...props
}, ref) => {
  const Tag = tag;
  return u$1(Tag, {
    ...props,
    className: twMerge("card-title", className),
    ref
  });
});
CardTitle.displayName = "Card title";
const Carousel = k(({
  children,
  display = "slider",
  snap,
  vertical,
  width,
  buttonStyle,
  dataTheme,
  className,
  ...props
}, ref) => {
  const classes = twMerge("carousel", className, clsx({
    "carousel-center": snap === "center",
    "carousel-end": snap === "end",
    "carousel-vertical": vertical,
    "w-full": display !== "slider"
  }));
  const [itemRefs, setItemRefs] = p([]);
  const [activeIndex, setActiveIndex] = p(0);
  _(() => {
    const newRefs = [];
    children.map((_2) => {
      newRefs.push(m$2());
    });
    setItemRefs(newRefs);
  }, [children]);
  const scrollToIndex = (index2) => {
    var _a2;
    (_a2 = itemRefs[index2].current) == null ? void 0 : _a2.scrollIntoView({
      behavior: "smooth",
      block: "nearest",
      inline: snap
    });
    setActiveIndex(index2);
  };
  return u$1(k$3, {
    children: [u$1("div", {
      role: "listbox",
      "aria-label": "Image carousel",
      ...props,
      ref,
      "data-theme": dataTheme,
      className: classes,
      children: children.map((child, i2) => {
        return hn(child, {
          key: i2,
          innerRef: itemRefs[i2],
          index: i2 + 1,
          children: child.props.children,
          src: child.props.src,
          alt: child.props.alt,
          width: display !== "slider" ? "full" : width,
          hasButtons: display === "sequential",
          buttonStyle,
          onPrev: () => scrollToIndex(i2 - 1 < 0 ? children.length - 1 : i2 - 1),
          onNext: () => scrollToIndex(i2 + 1 > children.length - 1 ? 0 : i2 + 1),
          ...child.props
        });
      })
    }), display === "numbered" && u$1("div", {
      className: "flex w-full justify-center gap-2 py-2",
      children: children.map((_2, i2) => {
        if (buttonStyle != null) {
          return hn(buttonStyle((i2 + 1).toString()), {
            key: i2,
            onClick: () => scrollToIndex(i2)
          });
        }
        return u$1(Button, {
          active: i2 === activeIndex,
          onClick: () => scrollToIndex(i2),
          children: i2 + 1
        }, i2);
      })
    })]
  });
});
Carousel.displayName = "Carousel";
const ChatBubble = k(({
  end = false,
  color,
  dataTheme,
  className,
  children,
  ...props
}, ref) => u$1("div", {
  ...props,
  "data-theme": dataTheme,
  className: twMerge("chat", `chat-${end ? "end" : "start"}`, className),
  ref,
  children
}));
ChatBubble.displayName = "ChatBubble";
const ChatBubbleAvatar = k(({
  size = "xs",
  shape = "circle",
  className,
  ...props
}, ref) => u$1(Avatar, {
  size,
  shape,
  ...props,
  className: twMerge("chat-image", className),
  ref
}));
ChatBubbleAvatar.displayName = "Chat Bubble Avatar";
const ChatBubbleFooter = k(({
  className,
  ...props
}, ref) => u$1("div", {
  ...props,
  className: twMerge("chat-footer opacity-50", className),
  ref
}));
ChatBubbleFooter.displayName = "Chat Bubble Footer";
const ChatBubbleHeader = k(({
  className,
  ...props
}, ref) => u$1("div", {
  ...props,
  className: twMerge("chat-header", className),
  ref
}));
ChatBubbleHeader.displayName = "Chat Bubble Header";
const ChatBubbleMessage = k(({
  color,
  className,
  ...props
}, ref) => {
  const classes = twMerge("chat-bubble", clsx({
    "chat-bubble-primary": color === "primary",
    "chat-bubble-secondary": color === "secondary",
    "chat-bubble-accent": color === "accent",
    "chat-bubble-info": color === "info",
    "chat-bubble-success": color === "success",
    "chat-bubble-warning": color === "warning",
    "chat-bubble-error": color === "error"
  }), className);
  return u$1("div", {
    ...props,
    className: classes,
    ref
  });
});
ChatBubbleMessage.displayName = "Chat Bubble Message";
const ChatBubbleTime = k(({
  className,
  ...props
}, ref) => u$1("time", {
  ...props,
  className: twMerge("text-xs opacity-50", className),
  ref
}));
ChatBubbleTime.displayName = "Chat Bubble Time";
const Checkbox = k(({
  color,
  size,
  indeterminate,
  dataTheme,
  className,
  ...props
}, ref) => {
  const classes = twMerge("checkbox", className, clsx({
    "checkbox-lg": size === "lg",
    "checkbox-md": size === "md",
    "checkbox-sm": size === "sm",
    "checkbox-xs": size === "xs",
    "checkbox-primary": color === "primary",
    "checkbox-secondary": color === "secondary",
    "checkbox-accent": color === "accent",
    "checkbox-info": color === "info",
    "checkbox-success": color === "success",
    "checkbox-warning": color === "warning",
    "checkbox-error": color === "error"
  }));
  const checkboxRef = F(null);
  T$1(ref, () => checkboxRef.current);
  _(() => {
    if (!checkboxRef.current) {
      return;
    }
    checkboxRef.current.indeterminate = !!indeterminate;
  }, [indeterminate]);
  return u$1("input", {
    ...props,
    ref: checkboxRef,
    type: "checkbox",
    "data-theme": dataTheme,
    className: classes
  });
});
Checkbox.displayName = "Checkbox";
const CodeMockup = k(({
  dataTheme,
  className,
  children,
  ...props
}, ref) => {
  const classes = twMerge("mockup-code", className);
  return u$1("div", {
    "aria-label": "Code mockup",
    ...props,
    "data-theme": dataTheme,
    className: classes,
    ref,
    children: N.map(children, (child, index2) => {
      const childComponent = child;
      return hn(childComponent, {
        key: index2
      });
    })
  });
});
CodeMockup.displayName = "CodeMockup";
const CodeMockupLine = k(({
  dataPrefix,
  dataTheme,
  status,
  className,
  children,
  innerProps,
  innerRef,
  ...props
}, ref) => {
  const classes = twMerge(clsx({
    "bg-info": status === "info",
    "bg-success": status === "success",
    "bg-warning": status === "warning",
    "bg-error": status === "error",
    "text-info-content": status === "info",
    "text-success-content": status === "success",
    "text-warning-content": status === "warning",
    "text-error-content": status === "error"
  }), className);
  const allProps = {
    ...props,
    className: classes,
    ...dataPrefix !== false && {
      "data-prefix": dataPrefix || ">"
    }
  };
  return u$1("pre", {
    ...allProps,
    "data-theme": dataTheme,
    className: classes,
    ref,
    children: u$1("code", {
      ...innerProps,
      ref: innerRef,
      children
    })
  });
});
CodeMockupLine.displayName = "Code Mockup Line";
const classesFn$5 = ({
  className,
  icon,
  open
}) => twMerge("collapse", className, clsx({
  "collapse-arrow": icon === "arrow",
  "collapse-plus": icon === "plus",
  "collapse-open": open === true,
  "collapse-close": open === false
}));
const Collapse = k(({
  children,
  checkbox,
  icon,
  open,
  dataTheme,
  className,
  onOpen,
  onClose,
  onToggle,
  ...props
}, ref) => {
  const [isChecked, setIsChecked] = p(open);
  const checkboxRef = F(null);
  const handleCheckboxChange = () => {
    var _a2, _b2, _c;
    if (onToggle) {
      onToggle();
    }
    if (onOpen && ((_a2 = checkboxRef.current) == null ? void 0 : _a2.checked)) {
      onOpen();
    } else if (onClose && !((_b2 = checkboxRef.current) == null ? void 0 : _b2.checked)) {
      onClose();
    }
    setIsChecked((_c = checkboxRef.current) == null ? void 0 : _c.checked);
  };
  const handleBlur = (event) => {
    if (!checkbox && onToggle)
      onToggle();
    if (!checkbox && onClose)
      onClose();
    if (props.onBlur)
      props.onBlur(event);
  };
  const handleFocus = (event) => {
    if (!checkbox && onToggle)
      onToggle();
    if (!checkbox && onOpen)
      onOpen();
    if (props.onFocus)
      props.onFocus(event);
  };
  return u$1("div", {
    "aria-expanded": open,
    ...props,
    ref,
    tabIndex: isChecked === true ? void 0 : 0,
    "data-theme": dataTheme,
    className: classesFn$5({
      className,
      icon,
      open
    }),
    onBlur: handleBlur,
    onFocus: handleFocus,
    children: [checkbox && u$1("input", {
      type: "checkbox",
      tabIndex: isChecked === true ? 0 : void 0,
      className: "peer",
      ref: checkboxRef,
      onChange: handleCheckboxChange
    }), children]
  });
});
Collapse.displayName = "Collapse";
const CollapseDetails = k(({
  children,
  icon,
  open,
  dataTheme,
  className,
  ...props
}, ref) => {
  return u$1("details", {
    ...props,
    ref,
    "data-theme": dataTheme,
    className: classesFn$5({
      className,
      icon,
      open
    }),
    open,
    children
  });
});
CollapseDetails.displayName = "Collapse Details";
const classesFn$4 = ({
  className
}) => twMerge("collapse-title", className);
const CollapseSummary = k(({
  children,
  className
}, ref) => {
  return u$1("summary", {
    ref,
    className: classesFn$4({
      className
    }),
    children
  });
});
CollapseSummary.displayName = "Collapse Summary";
const Diff = k(({
  dataTheme,
  className,
  children,
  secondItem,
  ...props
}, ref) => {
  const classes = twMerge("diff aspect-[16/9]", clsx({}), className);
  return u$1("div", {
    ...props,
    "data-theme": dataTheme,
    className: classes,
    ref,
    children: [u$1("div", {
      className: "diff-item-1",
      children
    }), u$1("div", {
      className: "diff-item-2",
      children: secondItem
    }), u$1("div", {
      className: "diff-resizer"
    })]
  });
});
Diff.displayName = "Diff";
const Divider = k(({
  children,
  vertical,
  horizontal,
  responsive,
  color,
  start,
  end,
  dataTheme,
  className,
  ...props
}, ref) => {
  const classes = twMerge("divider", className, clsx({
    "divider-vertical": vertical,
    "divider-horizontal": horizontal,
    "lg:divider-horizontal": responsive,
    "divider-neutral": color === "neutral",
    "divider-primary": color === "primary",
    "divider-secondary": color === "secondary",
    "divider-accent": color === "accent",
    "divider-warning": color === "warning",
    "divider-info": color === "info",
    "divider-error": color === "error",
    "divider-start": start,
    "divider-end": end
  }));
  return u$1("div", {
    role: "separator",
    ...props,
    "data-theme": dataTheme,
    className: classes,
    ref,
    children
  });
});
Divider.displayName = "Divider";
const Drawer = ({
  children,
  side,
  open,
  end,
  dataTheme,
  className,
  toggleClassName,
  contentClassName,
  sideClassName,
  overlayClassName,
  onClickOverlay,
  ...props
}) => {
  const classes = twMerge("drawer", className, clsx({
    "drawer-end": end
  }));
  return u$1("div", {
    ...props,
    "data-theme": dataTheme,
    className: classes,
    children: [u$1("input", {
      "aria-label": "Drawer handler",
      type: "checkbox",
      className: clsx("drawer-toggle", toggleClassName),
      checked: open,
      readOnly: true
    }), u$1("div", {
      className: clsx("drawer-content", contentClassName),
      children
    }), u$1("div", {
      className: clsx("drawer-side", sideClassName),
      children: [u$1("label", {
        className: clsx("drawer-overlay", overlayClassName),
        _: "on click remove [@checked] from .drawer-toggle"
      }), side]
    })]
  });
};
const classesFn$3 = ({
  className,
  horizontal,
  vertical,
  end,
  hover,
  open
}) => twMerge("dropdown", className, clsx({
  "dropdown-left": horizontal === "left",
  "dropdown-right": horizontal === "right",
  "dropdown-top": vertical === "top",
  "dropdown-bottom": vertical === "bottom",
  "dropdown-end": end,
  "dropdown-hover": hover,
  "dropdown-open": open
}));
const Dropdown = k(({
  children,
  className,
  item,
  horizontal,
  vertical,
  end,
  hover,
  open,
  dataTheme,
  ...props
}, ref) => {
  return u$1("div", {
    ...props,
    ref,
    "data-theme": dataTheme,
    className: classesFn$3({
      className,
      horizontal,
      vertical,
      end,
      hover,
      open
    }),
    children: item ? u$1(k$3, {
      children: [u$1("label", {
        tabIndex: 0,
        children
      }), u$1("ul", {
        className: "dropdown-content",
        children: item
      })]
    }) : u$1(k$3, {
      children
    })
  });
});
Dropdown.displayName = "Dropdown";
const DropdownDetails = k(({
  children,
  className,
  horizontal,
  vertical,
  end,
  dataTheme,
  open,
  ...props
}, ref) => {
  return u$1("details", {
    role: "listbox",
    ...props,
    ref,
    "data-theme": dataTheme,
    className: classesFn$3({
      className,
      horizontal,
      vertical,
      open,
      end
    }),
    open,
    children
  });
});
DropdownDetails.displayName = "Dropdown Details";
const DropdownItem = k(({
  anchor = true,
  ...props
}, ref) => {
  return u$1("li", {
    children: anchor ? u$1("a", {
      ref,
      ...props
    }) : props.children
  });
});
DropdownItem.displayName = "Dropdown Item";
const DropdownMenu = ({
  dataTheme,
  className,
  ...props
}) => {
  const classes = twMerge("dropdown-content menu p-2 shadow bg-base-100 rounded-box", className);
  return u$1("ul", {
    ...props,
    tabIndex: 0,
    "data-theme": dataTheme,
    className: classes,
    role: "menu"
  });
};
const DropdownSummary = k((props, ref) => {
  return u$1(Button, {
    ...props,
    ref,
    tag: "summary"
  });
});
DropdownSummary.displayName = "Dropdown Summary";
const DropdownToggle = ({
  children,
  color,
  size,
  button = true,
  dataTheme,
  className,
  disabled,
  ...props
}) => {
  return u$1("label", {
    tabIndex: 0,
    className,
    ...props,
    children: button ? u$1(Button, {
      type: "button",
      dataTheme,
      color,
      size,
      disabled,
      children
    }) : children
  });
};
const FileInput = k(({
  className,
  size,
  color,
  bordered,
  dataTheme,
  ...props
}, ref) => {
  const classes = twMerge("file-input", className, clsx({
    "file-input-lg": size === "lg",
    "file-input-md": size === "md",
    "file-input-sm": size === "sm",
    "file-input-xs": size === "xs",
    "file-input-primary": color === "primary",
    "file-input-secondary": color === "secondary",
    "file-input-accent": color === "accent",
    "file-input-ghost": color === "ghost",
    "file-input-info": color === "info",
    "file-input-success": color === "success",
    "file-input-warning": color === "warning",
    "file-input-error": color === "error",
    "file-input-bordered": bordered
  }));
  return u$1("input", {
    ...props,
    ref,
    type: "file",
    "data-theme": dataTheme,
    className: classes
  });
});
FileInput.displayName = "FileInput";
const Footer = k(({
  center,
  dataTheme,
  className,
  ...props
}, ref) => {
  const classes = twMerge("footer", className, clsx({
    "footer-center": center
  }));
  return u$1("div", {
    role: "contentinfo",
    ...props,
    "data-theme": dataTheme,
    className: classes,
    ref
  });
});
Footer.displayName = "Footer";
const FooterTitle = k(({
  className,
  ...props
}, ref) => {
  const classes = twMerge("footer-title", className);
  return u$1("span", {
    ...props,
    className: classes,
    ref
  });
});
FooterTitle.displayName = "Footer Title";
const Form = k(({
  children,
  dataTheme,
  className,
  ...props
}, ref) => {
  const classes = twMerge("form-control", className);
  return u$1("form", {
    role: "form",
    ...props,
    "data-theme": dataTheme,
    className: classes,
    ref,
    children
  });
});
Form.displayName = "Form";
function cn(...inputs) {
  return twMerge(clsx(inputs));
}
const FormLabel = k(({
  children,
  title,
  dataTheme,
  hidden,
  className,
  ...props
}, ref) => {
  const classes = cn("label", {
    hidden
  }, className);
  return u$1("label", {
    ...props,
    className: classes,
    children: [u$1("span", {
      className: "label-text cursor-pointer",
      ref,
      children: title
    }), children]
  });
});
FormLabel.displayName = "Form Label";
const Hero = k(({
  dataTheme,
  className,
  children,
  ...props
}, ref) => {
  const classes = twMerge("hero", className);
  return u$1("div", {
    role: "banner",
    ...props,
    "data-theme": dataTheme,
    className: classes,
    ref,
    children
  });
});
Hero.displayName = "Hero";
const HeroContent = k(({
  dataTheme,
  className,
  children,
  ...props
}, ref) => {
  const classes = twMerge("hero-content", className);
  return u$1("div", {
    ...props,
    "data-theme": dataTheme,
    className: classes,
    ref,
    children
  });
});
HeroContent.displayName = "Hero Content";
const HeroOverlay = k(({
  dataTheme,
  className,
  children,
  ...props
}, ref) => {
  const classes = twMerge("hero-overlay", className);
  return u$1("div", {
    ...props,
    "data-theme": dataTheme,
    className: classes,
    ref,
    children
  });
});
HeroOverlay.displayName = "Hero Overlay";
const classesFn$2 = ({
  className
} = {}) => twMerge("indicator", className);
const Indicator = k(({
  children,
  className,
  dataTheme,
  ...props
}, ref) => {
  return u$1("div", {
    ...props,
    "data-theme": dataTheme,
    className: classesFn$2({
      className
    }),
    ref,
    children
  });
});
Object.assign(Indicator, {
  className: classesFn$2
});
Indicator.displayName = "Indicator";
const classesFn$1 = ({
  className,
  horizontal,
  vertical
} = {}) => twMerge("indicator-item", className, clsx({
  "indicator-start": horizontal === "start",
  "indicator-center": horizontal === "center",
  "indicator-end": horizontal === "end",
  "indicator-top": vertical === "top",
  "indicator-middle": vertical === "middle",
  "indicator-bottom": vertical === "bottom"
}));
const IndicatorItem = k(({
  children,
  horizontal = "end",
  vertical = "top",
  dataTheme,
  className,
  ...props
}, ref) => {
  return u$1("div", {
    "aria-label": "Indicator",
    ...props,
    className: classesFn$1({
      className,
      horizontal,
      vertical
    }),
    ref,
    children
  });
});
IndicatorItem.displayName = "Indicator Item";
Object.assign(IndicatorItem, {
  className: classesFn$1
});
const Input = k(({
  value,
  placeholder,
  bordered = true,
  borderOffset,
  size,
  color,
  dataTheme,
  className,
  type,
  ...props
}, ref) => {
  const classes = twMerge("input", className, clsx({
    "input-lg": size === "lg",
    "input-md": size === "md",
    "input-sm": size === "sm",
    "input-xs": size === "xs",
    "input-primary": color === "primary",
    "input-secondary": color === "secondary",
    "input-accent": color === "accent",
    "input-ghost": color === "ghost",
    "input-info": color === "info",
    "input-success": color === "success",
    "input-warning": color === "warning",
    "input-error": color === "error",
    "input-bordered": bordered,
    "focus:outline-offset-0": !borderOffset
  }));
  return u$1("input", {
    ...props,
    ref,
    type,
    value,
    placeholder,
    "data-theme": dataTheme,
    className: classes
  });
});
Input.displayName = "Input";
const Join = k(({
  dataTheme,
  className,
  children,
  responsive,
  vertical,
  horizontal,
  ...props
}, ref) => {
  const classes = twMerge("join", clsx({
    "join-vertical": !responsive && vertical,
    "join-horizontal": !responsive && horizontal,
    "join-vertical lg:join-horizontal": responsive
  }), className);
  return u$1("div", {
    ...props,
    "data-theme": dataTheme,
    className: classes,
    ref,
    children
  });
});
Join.displayName = "Join";
const Kbd = k(({
  children,
  size,
  dataTheme,
  className,
  ...props
}, ref) => {
  const classes = twMerge("kbd", className, clsx({
    "kbd-lg": size === "lg",
    "kbd-md": size === "md",
    "kbd-sm": size === "sm",
    "kbd-xs": size === "xs"
  }));
  return u$1("kbd", {
    ...props,
    "data-theme": dataTheme,
    className: classes,
    ref,
    children
  });
});
Kbd.displayName = "Kbd";
const Link = k(({
  children,
  href,
  color,
  hover = true,
  dataTheme,
  className,
  ...props
}, ref) => {
  const classes = twMerge("link", className, clsx({
    "link-neutral": color === "neutral",
    "link-primary": color === "primary",
    "link-secondary": color === "secondary",
    "link-accent": color === "accent",
    "link-info": color === "info",
    "link-success": color === "success",
    "link-warning": color === "warning",
    "link-error": color === "error",
    "link-hover": hover
  }));
  return u$1("a", {
    rel: "noopener noreferrer",
    ...props,
    href,
    "data-theme": dataTheme,
    className: classes,
    ref,
    children
  });
});
Link.displayName = "Link";
const classesFn = ({
  className,
  variant
} = {}) => twMerge("mask", className, clsx({
  "mask-squircle": variant === "squircle",
  "mask-heart": variant === "heart",
  "mask-hexagon": variant === "hexagon",
  "mask-hexagon-2": variant === "hexagon-2",
  "mask-decagon": variant === "decagon",
  "mask-pentagon": variant === "pentagon",
  "mask-diamond": variant === "diamond",
  "mask-square": variant === "square",
  "mask-circle": variant === "circle",
  "mask-parallelogram": variant === "parallelogram",
  "mask-parallelogram-2": variant === "parallelogram-2",
  "mask-parallelogram-3": variant === "parallelogram-3",
  "mask-parallelogram-4": variant === "parallelogram-4",
  "mask-star": variant === "star",
  "mask-star-2": variant === "star-2",
  "mask-triangle": variant === "triangle",
  "mask-triangle-2": variant === "triangle-2",
  "mask-triangle-3": variant === "triangle-3",
  "mask-triangle-4": variant === "triangle-4",
  "mask-half-1": variant === "half-1",
  "mask-half-2": variant === "half-2"
}));
const Mask = k(({
  src: src2,
  variant,
  dataTheme,
  className,
  ...props
}, ref) => {
  return u$1("img", {
    ...props,
    "data-theme": dataTheme,
    className: classesFn({
      className,
      variant
    }),
    src: src2,
    ref
  });
});
Mask.displayName = "Mask";
const Mask$1 = Object.assign(Mask, {
  className: classesFn
});
const Menu = k(({
  responsive,
  horizontal,
  vertical,
  dataTheme,
  className,
  size,
  ...props
}, ref) => {
  const classes = twMerge("menu", className, clsx({
    "menu-vertical lg:menu-horizontal": responsive,
    "menu-lg": size === "lg",
    "menu-md": size === "md",
    "menu-sm": size === "sm",
    "menu-xs": size === "xs",
    "menu-vertical": vertical,
    "menu-horizontal": horizontal
  }));
  return u$1("ul", {
    "data-theme": dataTheme,
    className: classes,
    ...props,
    ref
  });
});
Menu.displayName = "Menu";
const MenuDetails = k(({
  className,
  label,
  open,
  children,
  ...props
}, ref) => {
  return u$1("details", {
    ...props,
    open,
    className,
    ref,
    children: [u$1("summary", {
      children: label
    }), u$1("ul", {
      children
    })]
  });
});
MenuDetails.displayName = "Menu Details";
const MenuDropdown = k(({
  className,
  label,
  open,
  children,
  ...props
}, ref) => {
  const classes = twMerge("menu-dropdown-toggle", className, clsx({
    "menu-dropdown-show": open
  }));
  return u$1(k$3, {
    children: [u$1("span", {
      ...props,
      className: classes,
      ref,
      children: label
    }), u$1("ul", {
      className: clsx("menu-dropdown", {
        "menu-dropdown-show": open
      }),
      children
    })]
  });
});
MenuDropdown.displayName = "Menu Dropdown";
const MenuItem = k(({
  className,
  disabled,
  ...props
}, ref) => {
  const classes = twMerge(className, clsx({
    disabled
  }));
  return u$1("li", {
    className: classes,
    ...props,
    ref
  });
});
MenuItem.displayName = "Menu Item";
const MenuTitle = k(({
  className,
  ...props
}, ref) => {
  const classes = twMerge("menu-title", className);
  return u$1("li", {
    ...props,
    className: classes,
    ref
  });
});
MenuTitle.displayName = "Menu Title";
const Modal = k(({
  children,
  open,
  responsive,
  backdrop,
  dataTheme,
  className,
  ...props
}, ref) => {
  const containerClasses = twMerge("modal", clsx({
    "modal-open": open,
    "modal-bottom sm:modal-middle": responsive
  }));
  const bodyClasses = twMerge("modal-box", className);
  return u$1("dialog", {
    ...props,
    "aria-label": "Modal",
    open,
    "aria-modal": open,
    "data-theme": dataTheme,
    className: containerClasses,
    ref,
    children: [u$1("div", {
      "data-theme": dataTheme,
      className: bodyClasses,
      children
    }), backdrop && u$1("form", {
      method: "dialog",
      className: "modal-backdrop",
      children: u$1("button", {
        _: "on click remove @open from <dialog/> then remove .modal-open from <dialog/>",
        children: "close"
      })
    })]
  });
});
Modal.displayName = "Modal";
const ModalActions = k(({
  children,
  className,
  ...props
}, ref) => {
  const classes = twMerge("modal-action", className);
  return u$1("div", {
    ...props,
    className: classes,
    ref,
    children
  });
});
ModalActions.displayName = "ModalActions";
const ModalBody = k(({
  children,
  className,
  ...props
}, ref) => {
  return u$1("div", {
    ...props,
    className,
    ref,
    children
  });
});
ModalBody.displayName = "ModalBody";
const ModalHeader = k(({
  children,
  className,
  ...props
}, ref) => {
  const classes = twMerge("w-full mb-8 text-xl", className);
  return u$1("div", {
    ...props,
    className: classes,
    ref,
    children
  });
});
ModalHeader.displayName = "ModalHeader";
const ModalLegacy = k(({
  children,
  open,
  responsive,
  onClickBackdrop,
  dataTheme,
  className,
  ...props
}, ref) => {
  const containerClasses = twMerge("modal", clsx({
    "modal-open": open,
    "modal-bottom sm:modal-middle": responsive
  }));
  const bodyClasses = twMerge("modal-box", className);
  return u$1("div", {
    "aria-label": "Modal",
    "aria-hidden": !open,
    "aria-modal": open,
    "data-theme": dataTheme,
    className: containerClasses,
    onClick: (e2) => {
      e2.stopPropagation();
      if (e2.target === e2.currentTarget) {
        e2.stopPropagation();
        if (onClickBackdrop) {
          onClickBackdrop();
        }
      }
    },
    children: u$1("div", {
      ...props,
      "data-theme": dataTheme,
      className: bodyClasses,
      ref,
      children
    })
  });
});
ModalLegacy.displayName = "Modal Legacy";
const NavbarSection = k(({
  children,
  section,
  dataTheme,
  className,
  style
}, ref) => {
  const classes = twMerge(className, clsx({
    "navbar-start": section === "start",
    "navbar-center": section === "center",
    "navbar-end": section === "end"
  }));
  return u$1("div", {
    "data-theme": dataTheme,
    className: classes,
    style,
    ref,
    children
  });
});
NavbarSection.displayName = "Navbar Section";
const Navbar = k(({
  children,
  dataTheme,
  className,
  ...props
}, ref) => {
  const classes = twMerge("navbar", className);
  return u$1("div", {
    role: "navigation",
    "aria-label": "Navbar",
    ...props,
    "data-theme": dataTheme,
    className: classes,
    ref,
    children
  });
});
const NavbarStart = k((props, ref) => u$1(NavbarSection, {
  ...props,
  section: "start",
  ref
}));
const NavbarCenter = k((props, ref) => u$1(NavbarSection, {
  ...props,
  section: "center",
  ref
}));
const NavbarEnd = k((props, ref) => u$1(NavbarSection, {
  ...props,
  section: "end",
  ref
}));
Navbar.displayName = "Navbar";
NavbarStart.displayName = "Navbar Start";
NavbarCenter.displayName = "Navbar Center";
NavbarEnd.displayName = "Navbar End";
const PhoneMockup = k(({
  color,
  dataTheme,
  className,
  children,
  innerRef,
  innerProps,
  ...props
}, ref) => {
  const classes = twMerge("mockup-phone", clsx({
    "border-primary": color === "primary",
    "border-secondary": color === "secondary",
    "border-info": color === "info",
    "border-success": color === "success",
    "border-warning": color === "warning",
    "border-error": color === "error"
  }), className);
  return u$1("div", {
    "aria-label": "Phone mockup",
    ...props,
    "data-theme": dataTheme,
    className: classes,
    ref,
    children: [u$1("div", {
      className: "camera"
    }), u$1("div", {
      className: "display",
      children: u$1("div", {
        ...innerProps,
        className: twMerge("artboard artboard-demo phone-1", innerProps == null ? void 0 : innerProps.className),
        ref: innerRef,
        children
      })
    })]
  });
});
PhoneMockup.displayName = "PhoneMockup";
const Progress = k(({
  color,
  dataTheme,
  className,
  ...props
}, ref) => {
  const classes = twMerge("progress", className, clsx({
    "progress-accent": color === "accent",
    "progress-error": color === "error",
    "progress-ghost": color === "ghost",
    "progress-info": color === "info",
    "progress-primary": color === "primary",
    "progress-secondary": color === "secondary",
    "progress-success": color === "success",
    "progress-warning": color === "warning"
  }));
  return u$1("progress", {
    ...props,
    ref,
    "data-theme": dataTheme,
    className: classes
  });
});
Progress.displayName = "Progress";
const RadialProgress = k(({
  value,
  size = "4rem",
  thickness = "4px",
  color,
  dataTheme,
  className,
  children,
  ...props
}, ref) => {
  const classes = twMerge("radial-progress", className, clsx({
    "text-primary": color === "primary",
    "text-secondary": color === "secondary",
    "text-accent": color === "accent",
    "text-info": color === "info",
    "text-success": color === "success",
    "text-warning": color === "warning",
    "text-error": color === "error"
  }));
  const displayedValue = Math.min(100, Math.max(0, value));
  const progressStyle = {
    "--value": displayedValue,
    "--size": size,
    "--thickness": thickness
  };
  return u$1("div", {
    role: "progressbar",
    "aria-valuenow": displayedValue,
    "aria-valuemin": 0,
    "aria-valuemax": 100,
    ...props,
    ref,
    "data-theme": dataTheme,
    className: classes,
    style: progressStyle,
    children
  });
});
RadialProgress.displayName = "RadialProgress";
const Radio = k(({
  color,
  size,
  name,
  dataTheme,
  className,
  ...props
}, ref) => {
  const classes = twMerge("radio", className, clsx({
    "radio-lg": size === "lg",
    "radio-md": size === "md",
    "radio-sm": size === "sm",
    "radio-xs": size === "xs",
    "radio-primary": color === "primary",
    "radio-secondary": color === "secondary",
    "radio-accent": color === "accent",
    "radio-info": color === "info",
    "radio-success": color === "success",
    "radio-warning": color === "warning",
    "radio-error": color === "error"
  }));
  return u$1("input", {
    ...props,
    ref,
    type: "radio",
    name,
    "data-theme": dataTheme,
    className: classes
  });
});
Radio.displayName = "Radio";
const Range = k(({
  color,
  size,
  step,
  displayTicks,
  ticksStep,
  dataTheme,
  className,
  ...props
}, ref) => {
  const classes = twMerge("range", className, clsx({
    "range-lg": size === "lg",
    "range-md": size === "md",
    "range-sm": size === "sm",
    "range-xs": size === "xs",
    "range-primary": color === "primary",
    "range-secondary": color === "secondary",
    "range-accent": color === "accent",
    "range-info": color === "info",
    "range-success": color === "success",
    "range-warning": color === "warning",
    "range-error": color === "error"
  }));
  const calculatedDisplayTicks = displayTicks ?? step !== void 0;
  const calculatedStep = step !== void 0 ? Number(step) : 1;
  const calculatedTicksStep = ticksStep ?? calculatedStep;
  const min = props.min !== void 0 ? Number(props.min) : 0;
  const max = props.max !== void 0 ? Number(props.max) : 100;
  const numTicks = Math.max(Math.ceil((max - min) / calculatedTicksStep), 1) + 1;
  return u$1(k$3, {
    children: [u$1("input", {
      ...props,
      ref,
      type: "range",
      step,
      "data-theme": dataTheme,
      className: classes
    }), calculatedDisplayTicks && u$1("div", {
      className: "flex w-full justify-between px-2 text-xs",
      children: [...Array(numTicks)].map((_2, i2) => {
        return u$1("span", {
          children: "|"
        }, i2);
      })
    })]
  });
});
Range.displayName = "Range";
const RatingItem = ({
  ...props
}) => {
  return u$1("input", {
    ...props,
    type: "checkbox"
  });
};
const Rating = k(({
  children,
  size,
  half,
  hidden,
  dataTheme,
  className,
  value,
  onChange,
  ...props
}, ref) => {
  const classes = twMerge("rating", className, clsx({
    "rating-lg": size === "lg",
    "rating-md": size === "md",
    "rating-sm": size === "sm",
    "rating-xs": size === "xs",
    "rating-half": half,
    "rating-hidden": hidden || value === 0
  }));
  return u$1("div", {
    "aria-label": "Rating",
    ...props,
    ref,
    "data-theme": dataTheme,
    className: classes,
    children: [value === 0 && u$1(RatingItem, {
      className: clsx(classes, "hidden"),
      checked: true,
      readOnly: true
    }), N.map(children, (child, index2) => {
      const childComponent = child;
      return hn(childComponent, {
        key: index2 + value,
        checked: value === index2 + 1,
        readOnly: onChange == null,
        onChange: () => {
          onChange == null ? void 0 : onChange(index2 + 1);
        }
      });
    })]
  });
});
Rating.displayName = "Rating";
const SelectInner = (props, ref) => {
  const {
    children,
    size,
    color,
    bordered = true,
    borderOffset,
    dataTheme,
    className,
    ...rest
  } = props;
  const classes = twMerge("select", className, clsx({
    "select-lg": size === "lg",
    "select-md": size === "md",
    "select-sm": size === "sm",
    "select-xs": size === "xs",
    "select-primary": color === "primary",
    "select-secondary": color === "secondary",
    "select-accent": color === "accent",
    "select-ghost": color === "ghost",
    "select-info": color === "info",
    "select-success": color === "success",
    "select-warning": color === "warning",
    "select-error": color === "error",
    "select-bordered": bordered,
    "focus:outline-offset-0": !borderOffset
  }));
  return u$1("select", {
    ...rest,
    ref,
    "data-theme": dataTheme,
    className: classes,
    children
  });
};
k(SelectInner);
const Skeleton = k(({
  dataTheme,
  className,
  children,
  ...props
}, ref) => {
  const classes = twMerge("skeleton", clsx({}), className);
  return u$1("div", {
    ...props,
    "data-theme": dataTheme,
    className: classes,
    ref,
    children
  });
});
Skeleton.displayName = "Skeleton";
const Stack = k(({
  dataTheme,
  className,
  children,
  ...props
}, ref) => {
  const classes = twMerge("stack", className);
  return u$1("div", {
    "aria-label": "Stack",
    ...props,
    ref,
    "data-theme": dataTheme,
    className: classes,
    children
  });
});
Stack.displayName = "Stack";
const StatSection = k(({
  children,
  section,
  className,
  ...props
}, ref) => {
  const classes = twMerge(className, clsx({
    "stat-title": section === "title",
    "stat-value": section === "value",
    "stat-desc": section === "desc",
    "stat-figure": section === "figure",
    "stat-actions": section === "actions"
  }));
  return u$1("div", {
    ...props,
    className: classes,
    ref,
    children
  });
});
StatSection.displayName = "Stat Section";
const Stat$1 = k(({
  dataTheme,
  className,
  ...props
}, ref) => {
  const classes = twMerge("stat", className);
  return u$1("div", {
    ...props,
    "data-theme": dataTheme,
    className: classes,
    ref
  });
});
const StatTitle = k((props, ref) => u$1(StatSection, {
  ...props,
  section: "title",
  ref
}));
const StatValue = k((props, ref) => u$1(StatSection, {
  ...props,
  section: "value",
  ref
}));
const StatDesc = k((props, ref) => u$1(StatSection, {
  ...props,
  section: "desc",
  ref
}));
const StatFigure = k((props, ref) => u$1(StatSection, {
  ...props,
  section: "figure",
  ref
}));
const StatActions = k((props, ref) => u$1(StatSection, {
  ...props,
  section: "actions",
  ref
}));
Stat$1.displayName = "Stat";
StatTitle.displayName = "Stat title";
StatValue.displayName = "Stat value";
StatDesc.displayName = "Stat desc";
StatFigure.displayName = "Stat figure";
StatActions.displayName = "Stat actions";
const Stats = k(({
  direction = "horizontal",
  dataTheme,
  className,
  children,
  ...props
}, ref) => {
  const classes = twMerge("stats", className, clsx({
    "stats-vertical": direction === "vertical",
    "stats-horizontal": direction === "horizontal"
  }));
  return u$1("div", {
    ...props,
    ref,
    "data-theme": dataTheme,
    className: classes,
    children
  });
});
Stats.displayName = "Stats";
const Step = k(({
  children,
  value,
  color,
  dataTheme,
  className,
  ...props
}, ref) => {
  const classes = twMerge("step", className, clsx({
    "step-primary": color === "primary",
    "step-secondary": color === "secondary",
    "step-accent": color === "accent",
    "step-info": color === "info",
    "step-success": color === "success",
    "step-warning": color === "warning",
    "step-error": color === "error"
  }));
  return u$1("li", {
    "aria-label": "Step",
    ...props,
    "data-theme": dataTheme,
    "data-content": value,
    className: classes,
    ref,
    children
  });
});
Step.displayName = "Step";
const Steps = k(({
  children,
  dataTheme,
  className,
  vertical,
  horizontal,
  ...props
}, ref) => {
  const classes = twMerge("steps", className, clsx({
    "steps-vertical": vertical,
    "steps-horizontal": horizontal
  }));
  return u$1("ul", {
    "aria-label": "Steps",
    role: "group",
    ...props,
    "data-theme": dataTheme,
    className: classes,
    ref,
    children
  });
});
Steps.displayName = "Steps";
const Swap = k(({
  onElement,
  offElement,
  active,
  rotate,
  flip,
  dataTheme,
  className,
  onClick,
  onChange,
  ...props
}, ref) => {
  const classes = twMerge("swap", className, clsx({
    "swap-active": active,
    "swap-rotate": rotate,
    "swap-flip": flip
  }));
  const onEl = wrapWithElementIfInvalid({
    node: onElement,
    wrapper: u$1("div", {}),
    props: {
      className: "swap-on"
    }
  });
  const offEl = wrapWithElementIfInvalid({
    node: offElement,
    wrapper: u$1("div", {}),
    props: {
      className: "swap-off"
    }
  });
  return u$1("label", {
    ...props,
    "data-theme": dataTheme,
    className: classes,
    ref,
    children: [u$1("input", {
      type: "checkbox",
      onClick,
      onChange
    }), onEl, offEl]
  });
});
Swap.displayName = "Swap";
const Table = k(({
  children,
  size,
  zebra,
  pinRows,
  pinCols,
  dataTheme,
  className,
  ...props
}, ref) => {
  const classes = twMerge("table", className, clsx({
    "table-zebra": zebra,
    "table-lg": size === "lg",
    "table-md": size === "md",
    "table-sm": size === "sm",
    "table-xs": size === "xs",
    "table-pin-rows": pinRows,
    "table-pin-cols": pinCols
  }));
  return u$1("table", {
    ...props,
    "data-theme": dataTheme,
    className: classes,
    ref,
    children
  });
});
Table.displayName = "Table";
const TableBody = k(({
  children,
  ...props
}, ref) => {
  return u$1("tbody", {
    ...props,
    ref,
    children
  });
});
TableBody.displayName = "TableBody";
const TableFooter = k(({
  children,
  ...props
}, ref) => {
  return u$1("tfoot", {
    ...props,
    ref,
    children: u$1("tr", {
      children: children == null ? void 0 : children.map((child, i2) => {
        return u$1("th", {
          children: child
        }, i2);
      })
    })
  });
});
TableFooter.displayName = "Table Footer";
const TableHead = k(({
  children,
  ...props
}, ref) => {
  return u$1("thead", {
    ...props,
    ref,
    children: u$1("tr", {
      children: children == null ? void 0 : children.map((child, i2) => {
        return u$1("th", {
          children: child
        }, i2);
      })
    })
  });
});
TableHead.displayName = "Table Head";
const TableRow = k(({
  children,
  active,
  hover,
  className,
  ...props
}, ref) => {
  const classes = twMerge(className, clsx({
    active,
    hover
  }));
  return u$1("tr", {
    ...props,
    className: classes,
    ref,
    children: children == null ? void 0 : children.map((child, i2) => i2 < 1 ? u$1("th", {
      children: child
    }, i2) : u$1("td", {
      children: child
    }, i2))
  });
});
TableRow.displayName = "Table Row";
const RadioTab = k(({
  children,
  className,
  active,
  label,
  disabled,
  name,
  contentClassName,
  ...props
}, ref) => {
  const classes = twMerge("tab", className, clsx({
    "tab-active": active,
    "tab-disabled": disabled
  }));
  const contentClasses = twMerge("tab-content", contentClassName);
  return u$1(k$3, {
    children: [u$1("input", {
      className: classes,
      role: "tab",
      type: "radio",
      name,
      disabled,
      "aria-label": label,
      ...props,
      ref
    }), u$1("div", {
      className: contentClasses,
      children
    })]
  });
});
RadioTab.displayName = "Radio Tab";
const Tab = k(({
  children,
  className,
  active,
  disabled,
  ...props
}, ref) => {
  const classes = twMerge("tab", className, clsx({
    "tab-active": active,
    "tab-disabled": disabled
  }));
  return u$1("a", {
    role: "tab",
    ...props,
    ref,
    className: classes,
    children
  });
});
Tab.displayName = "Tab";
const Tabs = k(({
  children,
  className,
  variant,
  size
}, ref) => {
  const classes = twMerge("tabs", className, clsx({
    "tabs-boxed": variant === "boxed",
    "tabs-bordered": variant === "bordered",
    "tabs-lifted": variant === "lifted",
    "tabs-lg": size === "lg",
    "tabs-md": size === "md",
    "tabs-sm": size === "sm",
    "tabs-xs": size === "xs"
  }));
  return u$1("div", {
    role: "tablist",
    className: classes,
    ref,
    children
  });
});
Tabs.displayName = "Tabs";
const Textarea = k(({
  bordered = true,
  borderOffset,
  color,
  size,
  dataTheme,
  className,
  ...props
}, ref) => {
  const classes = twMerge("textarea", className, clsx({
    "textarea-lg": size === "lg",
    "textarea-md": size === "md",
    "textarea-sm": size === "sm",
    "textarea-xs": size === "xs",
    "textarea-primary": color === "primary",
    "textarea-secondary": color === "secondary",
    "textarea-accent": color === "accent",
    "textarea-ghost": color === "ghost",
    "textarea-info": color === "info",
    "textarea-success": color === "success",
    "textarea-warning": color === "warning",
    "textarea-error": color === "error",
    "textarea-bordered": bordered,
    "focus:outline-offset-0": !borderOffset
  }));
  return u$1("textarea", {
    ...props,
    "data-theme": dataTheme,
    className: classes,
    ref
  });
});
Textarea.displayName = "Textarea";
const defaultTheme = "light";
const ThemeContext = G({
  theme: "light",
  setTheme: () => {
  }
});
const getThemeFromClosestAncestor = (ref) => {
  if (!ref.current)
    return;
  const matches = ref.current.closest("[data-theme]");
  if (matches)
    return matches.getAttribute("data-theme");
};
const Theme = k(({
  children,
  dataTheme,
  onChange,
  className,
  ...props
}, ref) => {
  const themeRef = F(ref == null ? void 0 : ref.current);
  const closestAncestorTheme = getThemeFromClosestAncestor(themeRef);
  const [theme, setTheme] = p(dataTheme || closestAncestorTheme || defaultTheme);
  const handleThemeChange = (theme2) => {
    onChange && onChange(theme2);
    setTheme(theme2);
  };
  _(() => {
    if (dataTheme !== theme) {
      dataTheme && handleThemeChange(dataTheme);
    }
  }, [dataTheme]);
  return u$1(ThemeContext.Provider, {
    value: {
      theme,
      setTheme: handleThemeChange
    },
    children: u$1("div", {
      ...props,
      "data-theme": theme,
      className,
      ref: themeRef,
      children
    })
  });
});
Theme.displayName = "Theme";
const Timeline = k(({
  dataTheme,
  className,
  vertical,
  horizontal,
  responsive,
  snap,
  compact,
  children,
  ...props
}, ref) => {
  const classes = twMerge("timeline", clsx({
    "timeline-vertical": vertical,
    "timeline-horizontal": horizontal,
    "timeline-vertical lg:timeline-horizontal": responsive,
    "timeline-snap-icon": snap,
    "timeline-compact": compact
  }), className);
  return u$1("ul", {
    ...props,
    "data-theme": dataTheme,
    className: classes,
    ref,
    children
  });
});
Timeline.displayName = "Timeline";
const TimelineEnd = k(({
  children,
  className,
  box = true,
  ...props
}, ref) => {
  const classes = twMerge("timeline-end", clsx({
    "timeline-box": box
  }), className);
  return u$1("div", {
    ...props,
    className: classes,
    ref,
    children
  });
});
TimelineEnd.displayName = "TimelineEnd";
const TimelineItem = k(({
  children,
  className,
  connect,
  startClassName,
  endClassName,
  ...props
}, ref) => {
  return u$1("li", {
    ...props,
    className,
    ref,
    children: [(connect === "both" || connect === "start") && u$1("hr", {
      className: startClassName
    }), children, (connect === "both" || connect === "end") && u$1("hr", {
      className: endClassName
    })]
  });
});
TimelineItem.displayName = "TimelineItem";
const TimelineMiddle = k(({
  children = u$1("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 20 20",
    fill: "currentColor",
    className: "size-5",
    children: u$1("path", {
      fillRule: "evenodd",
      d: "M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z",
      clipRule: "evenodd"
    })
  }),
  className,
  ...props
}, ref) => {
  const classes = twMerge("timeline-middle", className);
  return u$1("div", {
    ...props,
    className: classes,
    ref,
    children
  });
});
TimelineMiddle.displayName = "Timeline Middle";
const TimelineStart = k(({
  children,
  className,
  box,
  ...props
}, ref) => {
  const classes = twMerge("timeline-start", clsx({
    "timeline-box": box
  }), className);
  return u$1("div", {
    ...props,
    className: classes,
    ref,
    children
  });
});
TimelineStart.displayName = "TimelineStart";
const horizontalOptions = {
  start: "toast-start",
  center: "toast-center",
  end: "toast-end"
};
const verticalOptions = {
  top: "toast-top",
  middle: "toast-middle",
  bottom: "toast-bottom"
};
const Toast = k(({
  horizontal = "end",
  vertical = "bottom",
  className,
  children,
  ...props
}, ref) => {
  return u$1("div", {
    ...props,
    className: twMerge("toast", horizontalOptions[horizontal], verticalOptions[vertical], className),
    ref,
    children
  });
});
Toast.displayName = "Toast";
const Toggle = k(({
  color,
  size,
  dataTheme,
  className,
  ...props
}, ref) => {
  const classes = twMerge("toggle", className, clsx({
    "toggle-lg": size === "lg",
    "toggle-md": size === "md",
    "toggle-sm": size === "sm",
    "toggle-xs": size === "xs",
    "toggle-primary": color === "primary",
    "toggle-secondary": color === "secondary",
    "toggle-accent": color === "accent",
    "toggle-info": color === "info",
    "toggle-success": color === "success",
    "toggle-warning": color === "warning",
    "toggle-error": color === "error"
  }));
  return u$1("input", {
    ...props,
    ref,
    type: "checkbox",
    "data-theme": dataTheme,
    className: classes
  });
});
Toggle.displayName = "Toggle";
const Tooltip = k(({
  message,
  children,
  open,
  color,
  position,
  dataTheme,
  className,
  ...props
}, ref) => {
  const classes = twMerge("tooltip", className, clsx({
    "tooltip-open": open,
    "tooltip-primary": color === "primary",
    "tooltip-secondary": color === "secondary",
    "tooltip-accent": color === "accent",
    "tooltip-info": color === "info",
    "tooltip-success": color === "success",
    "tooltip-warning": color === "warning",
    "tooltip-error": color === "error",
    "tooltip-top": position === "top",
    "tooltip-bottom": position === "bottom",
    "tooltip-left": position === "left",
    "tooltip-right": position === "right"
  }));
  return u$1("div", {
    role: "tooltip",
    ...props,
    ref,
    "data-theme": dataTheme,
    "data-tip": message,
    className: classes,
    children
  });
});
Tooltip.displayName = "Tooltip";
const WindowMockup = k(({
  border,
  borderColor,
  backgroundColor,
  frameColor,
  dataTheme,
  className,
  children,
  ...props
}, ref) => {
  const borderColorValue = borderColor ? borderColor : frameColor || "base-300";
  const classes = twMerge("mockup-window", border && `border border-${borderColorValue}`, clsx({
    "border-primary": borderColorValue === "primary",
    "border-secondary": borderColorValue === "secondary",
    "border-accent": borderColorValue === "accent",
    "border-info": borderColorValue === "info",
    "border-success": borderColorValue === "success",
    "border-warning": borderColorValue === "warning",
    "border-error": borderColorValue === "error",
    "border-base-100": borderColorValue === "base-100",
    "border-base-200": borderColorValue === "base-200",
    "border-base-300": borderColorValue === "base-300",
    "border-neutral": borderColorValue === "neutral",
    "bg-primary": frameColor === "primary",
    "bg-secondary": frameColor === "secondary",
    "bg-accent": frameColor === "accent",
    "bg-info": frameColor === "info",
    "bg-success": frameColor === "success",
    "bg-warning": frameColor === "warning",
    "bg-error": frameColor === "error",
    "bg-base-100": frameColor === "base-100",
    "bg-base-200": frameColor === "base-200",
    "bg-base-300": frameColor === "base-300",
    "bg-neutral": frameColor === "neutral"
  }), className);
  const numChildren = N.count(children);
  const firstChild = numChildren > 0 && N.toArray(children)[0];
  const innerClasses = cn(backgroundColor && `bg-${backgroundColor}`, border && `border-t border-${borderColorValue}`, "p-4");
  const innerEl = firstChild && fn(firstChild) ? hn(firstChild, {
    className: twMerge(innerClasses, firstChild.props.className)
  }) : u$1("div", {
    className: innerClasses,
    children
  });
  return u$1("div", {
    "aria-label": "Window mockup",
    ...props,
    "data-theme": dataTheme,
    className: classes,
    ref,
    children: innerEl
  });
});
WindowMockup.displayName = "WindowMockup";
const convertToStorageUnits = (bytes) => {
  const units = ["bytes", "KiB", "MiB", "GiB", "TiB", "PiB", "EiB", "ZiB", "YiB"];
  let l2 = 0;
  let n2 = parseInt(String(bytes), 10) || 0;
  while (n2 >= 1024 && ++l2) {
    n2 = n2 / 1024;
  }
  return n2.toFixed(n2 < 10 && l2 > 0 ? 1 : 0) + " " + units[l2];
};
const convertToCurrency = (amount) => {
  return amount.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
};
const snackToNormal = (text) => {
  return text.replaceAll("_", " ");
};
const convertToFixed = (number, fixed = 2) => {
  const n2 = number.toFixed(fixed);
  if (Math.floor(Number(n2)) == number)
    return number.toString();
  return n2;
};
const StringUtil = {
  convertToStorageUnits,
  convertToCurrency,
  convertToFixed,
  snackToNormal
};
const ProcessPercent = (props) => u$1("span", {
  ...props,
  className: "text-sm text-base-content/70",
  children: [props.percent, "%"]
});
const SingleProcess = ({
  process: process2,
  ...props
}) => {
  const {
    name,
    percent,
    size,
    state: state2
  } = process2;
  return u$1("div", {
    ...props,
    className: "SingleProcess",
    "hx-target": "this",
    "hx-swap": "delete",
    "sse-swap": `completed-${process2.name}`,
    children: [u$1("div", {
      className: "flex items-center justify-between",
      children: u$1("span", {
        className: "font-medium",
        children: name
      })
    }), u$1("div", {
      className: "mt-1 flex items-center justify-between",
      children: [u$1(ProcessPercent, {
        "sse-swap": `progress-${process2.name}`,
        percent: process2.percent
      }), u$1("span", {
        className: "text-xs text-base-content/70",
        children: StringUtil.convertToStorageUnits(size)
      })]
    }), u$1("div", {
      "sse-swap": `progress-${process2.name}-indicator`,
      children: u$1(Progress, {
        className: "mt-0 h-1 bg-base-content/10 align-super",
        color: state2 == "play" ? "success" : "error",
        max: 100,
        value: percent
      })
    })]
  });
};
const UploadProcess = ({
  uploadData
}) => {
  debugger;
  return u$1("div", {
    className: "space-y-2 rounded-box border border-base-content/20 px-4 pb-2 pt-3",
    id: "UploadProcess",
    "hx-ext": "sse",
    "sse-connect": "/sse",
    children: [u$1("div", {
      "hx-swap": "afterbegin transition:true",
      "hx-target": "#Timeline",
      "sse-swap": `completed`
    }), u$1("div", {
      "hx-swap": "afterbegin transition:true",
      "hx-target": "#Files",
      "sse-swap": `completed-fileRow`
    }), uploadData.map((process2, index2) => u$1(SingleProcess, {
      process: process2
    }, index2))]
  });
};
const state = {
  inProcess: [],
  activity: [],
  // storageFiles: [
  // ],
  contentCache: {},
  sizeInKb: "0",
  isDarkTheme: true,
  principal: "Anonymous"
};
const data$m = {
  "width": 24,
  "height": 24,
  "body": '<path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m-3-3h6m5 7a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z"/>'
};
var _default$m = data$m;
const defaultIconDimensions = Object.freeze(
  {
    left: 0,
    top: 0,
    width: 16,
    height: 16
  }
);
const defaultIconTransformations = Object.freeze({
  rotate: 0,
  vFlip: false,
  hFlip: false
});
const defaultIconProps = Object.freeze({
  ...defaultIconDimensions,
  ...defaultIconTransformations
});
Object.freeze({
  ...defaultIconProps,
  body: "",
  hidden: false
});
const defaultIconSizeCustomisations = Object.freeze({
  width: null,
  height: null
});
const defaultIconCustomisations = Object.freeze({
  // Dimensions
  ...defaultIconSizeCustomisations,
  // Transformations
  ...defaultIconTransformations
});
const unitsSplit = /(-?[0-9.]*[0-9]+[0-9.]*)/g;
const unitsTest = /^-?[0-9.]*[0-9]+[0-9.]*$/g;
function calculateSize(size, ratio, precision) {
  if (ratio === 1) {
    return size;
  }
  precision = precision || 100;
  if (typeof size === "number") {
    return Math.ceil(size * ratio * precision) / precision;
  }
  if (typeof size !== "string") {
    return size;
  }
  const oldParts = size.split(unitsSplit);
  if (oldParts === null || !oldParts.length) {
    return size;
  }
  const newParts = [];
  let code = oldParts.shift();
  let isNumber2 = unitsTest.test(code);
  while (true) {
    if (isNumber2) {
      const num = parseFloat(code);
      if (isNaN(num)) {
        newParts.push(code);
      } else {
        newParts.push(Math.ceil(num * ratio * precision) / precision);
      }
    } else {
      newParts.push(code);
    }
    code = oldParts.shift();
    if (code === void 0) {
      return newParts.join("");
    }
    isNumber2 = !isNumber2;
  }
}
function splitSVGDefs(content, tag = "defs") {
  let defs = "";
  const index2 = content.indexOf("<" + tag);
  while (index2 >= 0) {
    const start = content.indexOf(">", index2);
    const end = content.indexOf("</" + tag);
    if (start === -1 || end === -1) {
      break;
    }
    const endEnd = content.indexOf(">", end);
    if (endEnd === -1) {
      break;
    }
    defs += content.slice(start + 1, end).trim();
    content = content.slice(0, index2).trim() + content.slice(endEnd + 1);
  }
  return {
    defs,
    content
  };
}
function mergeDefsAndContent(defs, content) {
  return defs ? "<defs>" + defs + "</defs>" + content : content;
}
function wrapSVGContent(body, start, end) {
  const split = splitSVGDefs(body);
  return mergeDefsAndContent(split.defs, start + split.content + end);
}
const isUnsetKeyword = (value) => value === "unset" || value === "undefined" || value === "none";
function iconToSVG(icon, customisations) {
  const fullIcon = {
    ...defaultIconProps,
    ...icon
  };
  const fullCustomisations = {
    ...defaultIconCustomisations,
    ...customisations
  };
  const box = {
    left: fullIcon.left,
    top: fullIcon.top,
    width: fullIcon.width,
    height: fullIcon.height
  };
  let body = fullIcon.body;
  [fullIcon, fullCustomisations].forEach((props) => {
    const transformations = [];
    const hFlip = props.hFlip;
    const vFlip = props.vFlip;
    let rotation = props.rotate;
    if (hFlip) {
      if (vFlip) {
        rotation += 2;
      } else {
        transformations.push(
          "translate(" + (box.width + box.left).toString() + " " + (0 - box.top).toString() + ")"
        );
        transformations.push("scale(-1 1)");
        box.top = box.left = 0;
      }
    } else if (vFlip) {
      transformations.push(
        "translate(" + (0 - box.left).toString() + " " + (box.height + box.top).toString() + ")"
      );
      transformations.push("scale(1 -1)");
      box.top = box.left = 0;
    }
    let tempValue;
    if (rotation < 0) {
      rotation -= Math.floor(rotation / 4) * 4;
    }
    rotation = rotation % 4;
    switch (rotation) {
      case 1:
        tempValue = box.height / 2 + box.top;
        transformations.unshift(
          "rotate(90 " + tempValue.toString() + " " + tempValue.toString() + ")"
        );
        break;
      case 2:
        transformations.unshift(
          "rotate(180 " + (box.width / 2 + box.left).toString() + " " + (box.height / 2 + box.top).toString() + ")"
        );
        break;
      case 3:
        tempValue = box.width / 2 + box.left;
        transformations.unshift(
          "rotate(-90 " + tempValue.toString() + " " + tempValue.toString() + ")"
        );
        break;
    }
    if (rotation % 2 === 1) {
      if (box.left !== box.top) {
        tempValue = box.left;
        box.left = box.top;
        box.top = tempValue;
      }
      if (box.width !== box.height) {
        tempValue = box.width;
        box.width = box.height;
        box.height = tempValue;
      }
    }
    if (transformations.length) {
      body = wrapSVGContent(
        body,
        '<g transform="' + transformations.join(" ") + '">',
        "</g>"
      );
    }
  });
  const customisationsWidth = fullCustomisations.width;
  const customisationsHeight = fullCustomisations.height;
  const boxWidth = box.width;
  const boxHeight = box.height;
  let width;
  let height;
  if (customisationsWidth === null) {
    height = customisationsHeight === null ? "1em" : customisationsHeight === "auto" ? boxHeight : customisationsHeight;
    width = calculateSize(height, boxWidth / boxHeight);
  } else {
    width = customisationsWidth === "auto" ? boxWidth : customisationsWidth;
    height = customisationsHeight === null ? calculateSize(width, boxHeight / boxWidth) : customisationsHeight === "auto" ? boxHeight : customisationsHeight;
  }
  const attributes = {};
  const setAttr = (prop, value) => {
    if (!isUnsetKeyword(value)) {
      attributes[prop] = value.toString();
    }
  };
  setAttr("width", width);
  setAttr("height", height);
  const viewBox = [box.left, box.top, boxWidth, boxHeight];
  attributes.viewBox = viewBox.join(" ");
  return {
    attributes,
    viewBox,
    body
  };
}
function iconToHTML(body, attributes) {
  let renderAttribsHTML = body.indexOf("xlink:") === -1 ? "" : ' xmlns:xlink="http://www.w3.org/1999/xlink"';
  for (const attr in attributes) {
    renderAttribsHTML += " " + attr + '="' + attributes[attr] + '"';
  }
  return '<svg xmlns="http://www.w3.org/2000/svg"' + renderAttribsHTML + ">" + body + "</svg>";
}
const Icon = (props) => {
  if (!props.icon)
    return u$1(k$3, {});
  const renderData = iconToSVG(props.icon);
  if (!renderData.body)
    return u$1(k$3, {});
  const html2 = iconToHTML(renderData.body, {
    ...renderData.attributes,
    "font-size": props.fontSize,
    "class": props.className ? props.className : ""
  });
  return u$1("span", {
    class: props.hidden ? "hidden" : "",
    dangerouslySetInnerHTML: {
      __html: html2
    }
  });
};
const ActivityItem = (props) => {
  return u$1(TimelineItem, {
    connect: "both",
    children: [u$1(TimelineMiddle, {
      children: u$1("div", {
        className: "rounded-full bg-primary/10 p-2 text-primary",
        children: u$1(Icon, {
          icon: _default$m,
          fontSize: 14
        })
      })
    }), u$1(TimelineEnd, {
      className: "w-full border-0 shadow-none",
      children: u$1("div", {
        children: [u$1("div", {
          className: "flex items-center justify-between",
          children: [u$1("span", {
            className: "text-sm font-medium",
            children: "Image Uploaded"
          }), u$1("span", {
            className: "text-xs text-base-content/70",
            children: "Just Now"
          })]
        }), u$1("p", {
          className: "text-sm text-base-content/80",
          children: [props.fileName, " (", props.size, ")"]
        })]
      })
    })]
  });
};
const Activity = (props) => {
  var _a2;
  return u$1(Timeline, {
    vertical: true,
    className: "timeline-hr-sm -ms-[100%] ps-10",
    id: "Timeline",
    children: (_a2 = props == null ? void 0 : props.activityItems) == null ? void 0 : _a2.map((it) => u$1(ActivityItem, {
      fileName: it.fileName,
      size: it.size
    }))
  });
};
const data$l = {
  "width": 24,
  "height": 24,
  "body": '<g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"><path d="M2 12s3-7 10-7s10 7 10 7s-3 7-10 7s-10-7-10-7Z"/><circle cx="12" cy="12" r="3"/></g>'
};
var _default$l = data$l;
const data$k = {
  "width": 24,
  "height": 24,
  "body": '<g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"><path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"/><path d="M14 2v6h6m-4 5H8m8 4H8m2-8H8"/></g>'
};
var _default$k = data$k;
const data$j = {
  "width": 24,
  "height": 24,
  "body": '<g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"><path d="M9 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v5"/><circle cx="13" cy="12" r="2"/><path d="M18 19c-2.8 0-5-2.2-5-5v8"/><circle cx="20" cy="19" r="2"/></g>'
};
var _default$j = data$j;
const data$i = {
  "width": 24,
  "height": 24,
  "body": '<g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"><circle cx="11" cy="11" r="8"/><path d="m21 21l-4.3-4.3"/></g>'
};
var _default$i = data$i;
const data$h = {
  "width": 24,
  "height": 24,
  "body": '<path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 22s8-4 8-10V5l-8-3l-8 3v7c0 6 8 10 8 10"/>'
};
var _default$h = data$h;
var dayjs_min = { exports: {} };
(function(module, exports) {
  !function(t2, e2) {
    module.exports = e2();
  }(commonjsGlobal, function() {
    var t2 = 1e3, e2 = 6e4, n2 = 36e5, r2 = "millisecond", i2 = "second", s2 = "minute", u2 = "hour", a2 = "day", o2 = "week", c2 = "month", f2 = "quarter", h2 = "year", d2 = "date", l2 = "Invalid Date", $2 = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/, y2 = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g, M2 = { name: "en", weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), ordinal: function(t3) {
      var e3 = ["th", "st", "nd", "rd"], n3 = t3 % 100;
      return "[" + t3 + (e3[(n3 - 20) % 10] || e3[n3] || e3[0]) + "]";
    } }, m2 = function(t3, e3, n3) {
      var r3 = String(t3);
      return !r3 || r3.length >= e3 ? t3 : "" + Array(e3 + 1 - r3.length).join(n3) + t3;
    }, v2 = { s: m2, z: function(t3) {
      var e3 = -t3.utcOffset(), n3 = Math.abs(e3), r3 = Math.floor(n3 / 60), i3 = n3 % 60;
      return (e3 <= 0 ? "+" : "-") + m2(r3, 2, "0") + ":" + m2(i3, 2, "0");
    }, m: function t3(e3, n3) {
      if (e3.date() < n3.date())
        return -t3(n3, e3);
      var r3 = 12 * (n3.year() - e3.year()) + (n3.month() - e3.month()), i3 = e3.clone().add(r3, c2), s3 = n3 - i3 < 0, u3 = e3.clone().add(r3 + (s3 ? -1 : 1), c2);
      return +(-(r3 + (n3 - i3) / (s3 ? i3 - u3 : u3 - i3)) || 0);
    }, a: function(t3) {
      return t3 < 0 ? Math.ceil(t3) || 0 : Math.floor(t3);
    }, p: function(t3) {
      return { M: c2, y: h2, w: o2, d: a2, D: d2, h: u2, m: s2, s: i2, ms: r2, Q: f2 }[t3] || String(t3 || "").toLowerCase().replace(/s$/, "");
    }, u: function(t3) {
      return void 0 === t3;
    } }, g2 = "en", D2 = {};
    D2[g2] = M2;
    var p2 = "$isDayjsObject", S2 = function(t3) {
      return t3 instanceof _2 || !(!t3 || !t3[p2]);
    }, w2 = function t3(e3, n3, r3) {
      var i3;
      if (!e3)
        return g2;
      if ("string" == typeof e3) {
        var s3 = e3.toLowerCase();
        D2[s3] && (i3 = s3), n3 && (D2[s3] = n3, i3 = s3);
        var u3 = e3.split("-");
        if (!i3 && u3.length > 1)
          return t3(u3[0]);
      } else {
        var a3 = e3.name;
        D2[a3] = e3, i3 = a3;
      }
      return !r3 && i3 && (g2 = i3), i3 || !r3 && g2;
    }, O2 = function(t3, e3) {
      if (S2(t3))
        return t3.clone();
      var n3 = "object" == typeof e3 ? e3 : {};
      return n3.date = t3, n3.args = arguments, new _2(n3);
    }, b2 = v2;
    b2.l = w2, b2.i = S2, b2.w = function(t3, e3) {
      return O2(t3, { locale: e3.$L, utc: e3.$u, x: e3.$x, $offset: e3.$offset });
    };
    var _2 = function() {
      function M3(t3) {
        this.$L = w2(t3.locale, null, true), this.parse(t3), this.$x = this.$x || t3.x || {}, this[p2] = true;
      }
      var m3 = M3.prototype;
      return m3.parse = function(t3) {
        this.$d = function(t4) {
          var e3 = t4.date, n3 = t4.utc;
          if (null === e3)
            return /* @__PURE__ */ new Date(NaN);
          if (b2.u(e3))
            return /* @__PURE__ */ new Date();
          if (e3 instanceof Date)
            return new Date(e3);
          if ("string" == typeof e3 && !/Z$/i.test(e3)) {
            var r3 = e3.match($2);
            if (r3) {
              var i3 = r3[2] - 1 || 0, s3 = (r3[7] || "0").substring(0, 3);
              return n3 ? new Date(Date.UTC(r3[1], i3, r3[3] || 1, r3[4] || 0, r3[5] || 0, r3[6] || 0, s3)) : new Date(r3[1], i3, r3[3] || 1, r3[4] || 0, r3[5] || 0, r3[6] || 0, s3);
            }
          }
          return new Date(e3);
        }(t3), this.init();
      }, m3.init = function() {
        var t3 = this.$d;
        this.$y = t3.getFullYear(), this.$M = t3.getMonth(), this.$D = t3.getDate(), this.$W = t3.getDay(), this.$H = t3.getHours(), this.$m = t3.getMinutes(), this.$s = t3.getSeconds(), this.$ms = t3.getMilliseconds();
      }, m3.$utils = function() {
        return b2;
      }, m3.isValid = function() {
        return !(this.$d.toString() === l2);
      }, m3.isSame = function(t3, e3) {
        var n3 = O2(t3);
        return this.startOf(e3) <= n3 && n3 <= this.endOf(e3);
      }, m3.isAfter = function(t3, e3) {
        return O2(t3) < this.startOf(e3);
      }, m3.isBefore = function(t3, e3) {
        return this.endOf(e3) < O2(t3);
      }, m3.$g = function(t3, e3, n3) {
        return b2.u(t3) ? this[e3] : this.set(n3, t3);
      }, m3.unix = function() {
        return Math.floor(this.valueOf() / 1e3);
      }, m3.valueOf = function() {
        return this.$d.getTime();
      }, m3.startOf = function(t3, e3) {
        var n3 = this, r3 = !!b2.u(e3) || e3, f3 = b2.p(t3), l3 = function(t4, e4) {
          var i3 = b2.w(n3.$u ? Date.UTC(n3.$y, e4, t4) : new Date(n3.$y, e4, t4), n3);
          return r3 ? i3 : i3.endOf(a2);
        }, $3 = function(t4, e4) {
          return b2.w(n3.toDate()[t4].apply(n3.toDate("s"), (r3 ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(e4)), n3);
        }, y3 = this.$W, M4 = this.$M, m4 = this.$D, v3 = "set" + (this.$u ? "UTC" : "");
        switch (f3) {
          case h2:
            return r3 ? l3(1, 0) : l3(31, 11);
          case c2:
            return r3 ? l3(1, M4) : l3(0, M4 + 1);
          case o2:
            var g3 = this.$locale().weekStart || 0, D3 = (y3 < g3 ? y3 + 7 : y3) - g3;
            return l3(r3 ? m4 - D3 : m4 + (6 - D3), M4);
          case a2:
          case d2:
            return $3(v3 + "Hours", 0);
          case u2:
            return $3(v3 + "Minutes", 1);
          case s2:
            return $3(v3 + "Seconds", 2);
          case i2:
            return $3(v3 + "Milliseconds", 3);
          default:
            return this.clone();
        }
      }, m3.endOf = function(t3) {
        return this.startOf(t3, false);
      }, m3.$set = function(t3, e3) {
        var n3, o3 = b2.p(t3), f3 = "set" + (this.$u ? "UTC" : ""), l3 = (n3 = {}, n3[a2] = f3 + "Date", n3[d2] = f3 + "Date", n3[c2] = f3 + "Month", n3[h2] = f3 + "FullYear", n3[u2] = f3 + "Hours", n3[s2] = f3 + "Minutes", n3[i2] = f3 + "Seconds", n3[r2] = f3 + "Milliseconds", n3)[o3], $3 = o3 === a2 ? this.$D + (e3 - this.$W) : e3;
        if (o3 === c2 || o3 === h2) {
          var y3 = this.clone().set(d2, 1);
          y3.$d[l3]($3), y3.init(), this.$d = y3.set(d2, Math.min(this.$D, y3.daysInMonth())).$d;
        } else
          l3 && this.$d[l3]($3);
        return this.init(), this;
      }, m3.set = function(t3, e3) {
        return this.clone().$set(t3, e3);
      }, m3.get = function(t3) {
        return this[b2.p(t3)]();
      }, m3.add = function(r3, f3) {
        var d3, l3 = this;
        r3 = Number(r3);
        var $3 = b2.p(f3), y3 = function(t3) {
          var e3 = O2(l3);
          return b2.w(e3.date(e3.date() + Math.round(t3 * r3)), l3);
        };
        if ($3 === c2)
          return this.set(c2, this.$M + r3);
        if ($3 === h2)
          return this.set(h2, this.$y + r3);
        if ($3 === a2)
          return y3(1);
        if ($3 === o2)
          return y3(7);
        var M4 = (d3 = {}, d3[s2] = e2, d3[u2] = n2, d3[i2] = t2, d3)[$3] || 1, m4 = this.$d.getTime() + r3 * M4;
        return b2.w(m4, this);
      }, m3.subtract = function(t3, e3) {
        return this.add(-1 * t3, e3);
      }, m3.format = function(t3) {
        var e3 = this, n3 = this.$locale();
        if (!this.isValid())
          return n3.invalidDate || l2;
        var r3 = t3 || "YYYY-MM-DDTHH:mm:ssZ", i3 = b2.z(this), s3 = this.$H, u3 = this.$m, a3 = this.$M, o3 = n3.weekdays, c3 = n3.months, f3 = n3.meridiem, h3 = function(t4, n4, i4, s4) {
          return t4 && (t4[n4] || t4(e3, r3)) || i4[n4].slice(0, s4);
        }, d3 = function(t4) {
          return b2.s(s3 % 12 || 12, t4, "0");
        }, $3 = f3 || function(t4, e4, n4) {
          var r4 = t4 < 12 ? "AM" : "PM";
          return n4 ? r4.toLowerCase() : r4;
        };
        return r3.replace(y2, function(t4, r4) {
          return r4 || function(t5) {
            switch (t5) {
              case "YY":
                return String(e3.$y).slice(-2);
              case "YYYY":
                return b2.s(e3.$y, 4, "0");
              case "M":
                return a3 + 1;
              case "MM":
                return b2.s(a3 + 1, 2, "0");
              case "MMM":
                return h3(n3.monthsShort, a3, c3, 3);
              case "MMMM":
                return h3(c3, a3);
              case "D":
                return e3.$D;
              case "DD":
                return b2.s(e3.$D, 2, "0");
              case "d":
                return String(e3.$W);
              case "dd":
                return h3(n3.weekdaysMin, e3.$W, o3, 2);
              case "ddd":
                return h3(n3.weekdaysShort, e3.$W, o3, 3);
              case "dddd":
                return o3[e3.$W];
              case "H":
                return String(s3);
              case "HH":
                return b2.s(s3, 2, "0");
              case "h":
                return d3(1);
              case "hh":
                return d3(2);
              case "a":
                return $3(s3, u3, true);
              case "A":
                return $3(s3, u3, false);
              case "m":
                return String(u3);
              case "mm":
                return b2.s(u3, 2, "0");
              case "s":
                return String(e3.$s);
              case "ss":
                return b2.s(e3.$s, 2, "0");
              case "SSS":
                return b2.s(e3.$ms, 3, "0");
              case "Z":
                return i3;
            }
            return null;
          }(t4) || i3.replace(":", "");
        });
      }, m3.utcOffset = function() {
        return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
      }, m3.diff = function(r3, d3, l3) {
        var $3, y3 = this, M4 = b2.p(d3), m4 = O2(r3), v3 = (m4.utcOffset() - this.utcOffset()) * e2, g3 = this - m4, D3 = function() {
          return b2.m(y3, m4);
        };
        switch (M4) {
          case h2:
            $3 = D3() / 12;
            break;
          case c2:
            $3 = D3();
            break;
          case f2:
            $3 = D3() / 3;
            break;
          case o2:
            $3 = (g3 - v3) / 6048e5;
            break;
          case a2:
            $3 = (g3 - v3) / 864e5;
            break;
          case u2:
            $3 = g3 / n2;
            break;
          case s2:
            $3 = g3 / e2;
            break;
          case i2:
            $3 = g3 / t2;
            break;
          default:
            $3 = g3;
        }
        return l3 ? $3 : b2.a($3);
      }, m3.daysInMonth = function() {
        return this.endOf(c2).$D;
      }, m3.$locale = function() {
        return D2[this.$L];
      }, m3.locale = function(t3, e3) {
        if (!t3)
          return this.$L;
        var n3 = this.clone(), r3 = w2(t3, e3, true);
        return r3 && (n3.$L = r3), n3;
      }, m3.clone = function() {
        return b2.w(this.$d, this);
      }, m3.toDate = function() {
        return new Date(this.valueOf());
      }, m3.toJSON = function() {
        return this.isValid() ? this.toISOString() : null;
      }, m3.toISOString = function() {
        return this.$d.toISOString();
      }, m3.toString = function() {
        return this.$d.toUTCString();
      }, M3;
    }(), k2 = _2.prototype;
    return O2.prototype = k2, [["$ms", r2], ["$s", i2], ["$m", s2], ["$H", u2], ["$W", a2], ["$M", c2], ["$y", h2], ["$D", d2]].forEach(function(t3) {
      k2[t3[1]] = function(e3) {
        return this.$g(e3, t3[0], t3[1]);
      };
    }), O2.extend = function(t3, e3) {
      return t3.$i || (t3(e3, _2, O2), t3.$i = true), O2;
    }, O2.locale = w2, O2.isDayjs = S2, O2.unix = function(t3) {
      return O2(1e3 * t3);
    }, O2.en = D2[g2], O2.Ls = D2, O2.p = {}, O2;
  });
})(dayjs_min);
var dayjs_minExports = dayjs_min.exports;
const dayjs = /* @__PURE__ */ getDefaultExportFromCjs(dayjs_minExports);
const defaultProps = {
  onlyDate: true
};
const formatted = (date, props = defaultProps) => {
  let format2 = "";
  if (props.format) {
    format2 = props.format;
  } else {
    if (props.onlyDate)
      format2 += "DD MMM YYYY";
  }
  return dayjs(date).format(format2);
};
const minusMinutes = (minutes = 1, date = /* @__PURE__ */ new Date()) => {
  return addMinutes(-minutes, date);
};
const addMinutes = (minutes = 1, date = /* @__PURE__ */ new Date()) => {
  const d2 = date;
  d2.setMinutes(date.getMinutes() + minutes);
  return d2;
};
const minusDays = (days = 1, date = /* @__PURE__ */ new Date()) => {
  return addDays(-days, date);
};
const addDays = (days = 1, date = /* @__PURE__ */ new Date()) => {
  const d2 = date;
  d2.setDate(date.getDate() + days);
  return d2;
};
const minusMonths = (month = 1, date = /* @__PURE__ */ new Date()) => {
  return addMonths(-month, date);
};
const addMonths = (month = 1, date = /* @__PURE__ */ new Date()) => {
  const d2 = date;
  d2.setMonth(date.getMonth() + month);
  return d2;
};
const minusYears = (year = 1, date = /* @__PURE__ */ new Date()) => {
  return addYears(-year, date);
};
const addYears = (year = 1, date = /* @__PURE__ */ new Date()) => {
  const d2 = date;
  d2.setFullYear(date.getFullYear() + year);
  return d2;
};
const DateUtil = {
  formatted,
  minusDays,
  addDays,
  addMonths,
  minusMonths,
  minusYears,
  addYears,
  addMinutes,
  minusMinutes
};
const LoadingFileRow = ({
  file,
  ...props
}) => {
  return u$1(k$3, {
    children: u$1(TableRow, {
      className: "cursor-pointer hover:bg-base-200/40 animate-pulse",
      role: "status",
      ...props,
      "hx-get": `/fileInfo/${file.name}`,
      "hx-target": "outerHTML",
      "hx-trigger": "load",
      children: [u$1(Checkbox, {
        size: "xs",
        checked: false,
        disabled: true
      }), u$1("div", {
        className: "flex items-center space-x-3 truncate",
        children: [u$1("div", {
          className: `rounded bg-base-content/5 p-1.5 text-base-content/80`,
          children: u$1(Icon, {
            icon: _default$k,
            fontSize: 20
          })
        }), u$1("div", {
          children: file.name
        })]
      }), u$1("div", {
        className: "text-sm font-medium w-6"
      }), u$1("div", {
        children: u$1("div", {
          className: "text-sm w-2"
        })
      }), u$1("div", {
        className: "text-sm w-2"
      }), u$1("div", {
        className: "w-4"
      }), u$1("div", {
        className: "w-2"
      }), u$1("div", {
        children: u$1(Button, {
          color: "ghost",
          size: "sm",
          shape: "square",
          "aria-label": "Show file",
          disabled: true,
          children: u$1(Icon, {
            icon: _default$l,
            className: "text-base-content/70",
            fontSize: 16
          })
        })
      }), u$1("div", {})]
    })
  });
};
const StorageFileRow = ({
  file,
  ...props
}) => {
  return u$1(k$3, {
    children: u$1(TableRow, {
      className: "cursor-pointer hover:bg-base-200/40",
      _: "on click set ut to first <input[type='checkbox']/> in me then toggle @checked on ut then ut.click()",
      ...props,
      children: [u$1(Checkbox, {
        _: "on click halt the event's bubbling",
        size: "xs",
        checked: false,
        "aria-label": "Single check"
      }), u$1("div", {
        className: "flex items-center space-x-3 truncate",
        children: [u$1("div", {
          className: `rounded bg-base-content/5 p-1.5 text-base-content/80`,
          children: u$1(Icon, {
            icon: _default$k,
            fontSize: 20
          })
        }), u$1("div", {
          children: file.name
        })]
      }), u$1("div", {
        className: "text-sm font-medium",
        children: file.collection
      }), u$1("div", {
        className: "text-sm font-medium",
        children: file.owner
      }), u$1("div", {
        children: u$1("div", {
          className: "text-sm",
          children: StringUtil.convertToStorageUnits(file.size)
        })
      }), u$1("div", {
        className: "text-sm",
        children: DateUtil.formatted(file.uploadedAt)
      }), u$1("div", {
        children: u$1("span", {
          className: "flex items-center gap-2 text-error",
          children: [u$1(Icon, {
            icon: _default$h,
            fontSize: 15
          }), "Private"]
        })
      }), u$1("div", {
        children: u$1(Button, {
          color: "ghost",
          size: "sm",
          shape: "square",
          "aria-label": "Show file",
          _: `on click go to url "/__fs__/${file.fileId}" in new window`,
          children: u$1(Icon, {
            icon: _default$l,
            className: "text-base-content/70",
            fontSize: 16
          })
        })
      }), u$1("div", {})]
    })
  });
};
const FilesTableBody = ({
  storageFiles,
  ...props
}) => {
  return u$1(TableBody, {
    id: "Files",
    ...props,
    children: storageFiles.map((file, index2) => {
      if ("size" in file && file.size > 0) {
        return u$1(StorageFileRow, {
          file
        }, index2);
      }
      return u$1(LoadingFileRow, {
        file
      }, index2);
    })
  });
};
const FilesTable = () => {
  return u$1(Table, {
    className: "mt-2 rounded-box",
    children: [u$1(TableHead, {
      children: [u$1(Checkbox, {
        _: " on click   set value to ((<#Files input[type='checkbox']:not(:checked)/>).length == 0) repeat in <#Files input[type='checkbox']/> set it.checked to value it.click()  end ",
        size: "xs",
        "aria-label": "Check all"
      }), u$1("span", {
        className: "text-sm font-medium text-base-content/80",
        children: "Name"
      }), u$1("span", {
        className: "text-sm font-medium text-base-content/80",
        children: "Collection"
      }), u$1("span", {
        className: "text-sm font-medium text-base-content/80",
        children: "Owner"
      }), u$1("span", {
        className: "text-sm font-medium text-base-content/80",
        children: "Size"
      }), u$1("span", {
        className: "text-sm font-medium text-base-content/80",
        children: "Created At"
      }), u$1("span", {
        className: "text-sm font-medium text-base-content/80",
        children: "Shared With"
      }), u$1("span", {
        className: "text-sm font-medium text-base-content/80",
        children: "View"
      })]
    }), u$1(FilesTableBody, {
      storageFiles: [],
      "hx-get": "/myFileIds",
      "hx-trigger": "load",
      "hx-swap": "outerHTML"
    })]
  });
};
const AllFiles = () => {
  return u$1(Card, {
    className: "bg-base-100",
    children: u$1(CardBody, {
      className: "p-0",
      children: [u$1("div", {
        className: "flex items-center justify-between gap-3 px-5 pt-5",
        children: [u$1("div", {
          className: "inline-flex items-center gap-3",
          children: u$1(Button, {
            disabled: true,
            color: "ghost",
            size: "sm",
            className: "hidden border-base-content/20 sm:flex",
            _: " ",
            children: [u$1(Icon, {
              icon: _default$j,
              fontSize: 16
            }), u$1("span", {
              id: "Transclude",
              children: ["Transclude(", u$1("strong", {
                children: u$1("span", {
                  _: "on change from <#Files input[type='checkbox']/> or load put (<#Files input[type='checkbox']:checked/>).length into me"
                })
              }), " files)"]
            })]
          })
        }), u$1("div", {
          className: "inline-flex items-center gap-3",
          children: u$1("div", {
            className: "form-control flex flex-row items-center rounded-box border border-base-content/20 px-2",
            children: [u$1(Icon, {
              icon: _default$i,
              className: "text-base-content/60",
              fontSize: 15
            }), u$1(Input, {
              size: "sm",
              placeholder: "Search along files",
              className: "w-full focus:border-transparent focus:outline-0",
              bordered: false,
              borderOffset: false
            })]
          })
        })]
      }), u$1("div", {
        className: "overflow-auto",
        children: u$1(FilesTable, {
          storageFiles: []
        })
      })]
    })
  });
};
const avatar = "/icp.png";
const data$g = {
  "width": 24,
  "height": 24,
  "body": '<path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4m7 14l5-5l-5-5m5 5H9"/>'
};
var _default$g = data$g;
const data$f = {
  "width": 24,
  "height": 24,
  "body": '<path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 12h16M4 6h16M4 18h16"/>'
};
var _default$f = data$f;
const data$e = {
  "width": 24,
  "height": 24,
  "body": '<g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"><path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2"/><circle cx="12" cy="7" r="4"/></g>'
};
var _default$e = data$e;
const data$d = {
  "width": 24,
  "height": 24,
  "body": '<path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3a6 6 0 0 0 9 9a9 9 0 1 1-9-9Z"/>'
};
var _default$d = data$d;
const data$c = {
  "width": 24,
  "height": 24,
  "body": '<g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"><circle cx="12" cy="12" r="4"/><path d="M12 2v2m0 16v2M4.93 4.93l1.41 1.41m11.32 11.32l1.41 1.41M2 12h2m16 0h2M6.34 17.66l-1.41 1.41M19.07 4.93l-1.41 1.41"/></g>'
};
var _default$c = data$c;
const ThemeToggleButton = (props) => {
  return u$1(k$3, {
    children: u$1(Button, {
      ...props,
      "hx-get": "/toggleTheme",
      "hx-swap": "none",
      _: " on click get @data-theme of <html/> then set currentTheme to it[0] if currentTheme is 'dark' then set @data-theme of <html/> to 'light' else set @data-theme of <html/> to 'dark' end toggle .hidden on <span/> in me ",
      children: [u$1(Icon, {
        hidden: props.theme == "light",
        icon: _default$c,
        fontSize: 20
      }), u$1(Icon, {
        hidden: props.theme == "dark",
        icon: _default$d,
        fontSize: 20
      })]
    })
  });
};
const data$b = {
  "width": 24,
  "height": 24,
  "body": '<path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 8a6 6 0 0 1 12 0c0 7 3 9 3 9H3s3-2 3-9m4.3 13a1.94 1.94 0 0 0 3.4 0"/>'
};
var _default$b = data$b;
const data$a = {
  "width": 24,
  "height": 24,
  "body": '<path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 6L6 18M6 6l12 12"/>'
};
var _default$a = data$a;
const NotificationButton = () => {
  const [open, setOpen] = p(false);
  const closeMenu = () => {
    setOpen(true);
    setTimeout(() => {
      setOpen(false);
    }, 1);
  };
  return u$1("div", {
    children: u$1(Dropdown, {
      vertical: "bottom",
      end: true,
      open,
      children: [u$1(DropdownToggle, {
        className: "btn btn-circle btn-ghost btn-sm",
        button: false,
        children: u$1(Icon, {
          icon: _default$b,
          fontSize: 20
        })
      }), u$1(DropdownMenu, {
        className: "card card-compact m-1 w-96  p-3 shadow",
        children: [u$1("div", {
          className: "flex items-center justify-between px-2",
          children: [u$1("p", {
            className: "text-base font-medium",
            children: "Notification"
          }), u$1(Button, {
            size: "sm",
            shape: "circle",
            color: "ghost",
            startIcon: u$1(Icon, {
              icon: _default$a,
              fontSize: 16
            }),
            onClick: closeMenu
          })]
        }), u$1("div", {
          className: "flex items-center justify-center",
          children: u$1("div", {
            className: " rounded-full border  border-base-content/10 px-3 text-center",
            children: u$1("p", {
              className: "text-xs  text-base-content/80",
              children: "Today"
            })
          })
        }), u$1("hr", {
          className: "-mx-2 mt-2 border-base-content/10"
        }), u$1("div", {
          className: "flex items-center justify-between pt-2",
          children: [u$1(Button, {
            disabled: true,
            size: "sm",
            color: "ghost",
            className: "text-primary hover:bg-primary/10",
            children: "View All"
          }), u$1(Button, {
            disabled: true,
            size: "sm",
            color: "ghost",
            className: "text-base-content/80 hover:bg-base-content/10",
            children: "Mark as read"
          })]
        })]
      })]
    })
  });
};
const data$9 = {
  "width": 24,
  "height": 24,
  "body": '<g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"><path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"/><path d="M14 2v6h6m-8 10v-6m-3 3h6"/></g>'
};
var _default$9 = data$9;
const data$8 = {
  "width": 24,
  "height": 24,
  "body": '<g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"><path d="M20 17a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2h-3.9a2 2 0 0 1-1.69-.9l-.81-1.2a2 2 0 0 0-1.67-.9H8a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2Z"/><path d="M2 8v11a2 2 0 0 0 2 2h14"/></g>'
};
var _default$8 = data$8;
const data$7 = {
  "width": 24,
  "height": 24,
  "body": '<g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"><path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"/><circle cx="9" cy="7" r="4"/><path d="M19 8v6m3-3h-6"/></g>'
};
var _default$7 = data$7;
const data$6 = {
  "width": 24,
  "height": 24,
  "body": '<g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"><circle cx="18" cy="18" r="3"/><circle cx="6" cy="6" r="3"/><path d="M13 6h3a2 2 0 0 1 2 2v7m-7 3H8a2 2 0 0 1-2-2V9"/></g>'
};
var _default$6 = data$6;
const SearchButton = () => {
  const modalRef = F(null);
  const openModal = () => {
    var _a2;
    (_a2 = modalRef.current) == null ? void 0 : _a2.showModal();
  };
  return u$1(k$3, {
    children: [u$1(Button, {
      _: "on click add @open to <div[role='navigation'] dialog/> then add .modal-open to <div[role='navigation'] dialog/>",
      className: "hidden h-9 w-48 items-center justify-start gap-3 border-base-content/20 hover:border-transparent hover:bg-base-content/20 sm:flex",
      variant: "outline",
      size: "sm",
      onClick: openModal,
      children: [u$1(Icon, {
        icon: _default$6,
        className: "text-base-content/60",
        fontSize: 15
      }), u$1("span", {
        className: "text-base-content/60",
        children: "Personal Collection"
      })]
    }), u$1(Button, {
      _: "on click add @open to <div[role='navigation'] dialog/> then add .modal-open to <div[role='navigation'] dialog/>",
      className: "flex border-base-content/20 hover:border-transparent hover:bg-base-content/20 sm:hidden",
      variant: "outline",
      size: "sm",
      shape: "circle",
      onClick: openModal,
      children: u$1(Icon, {
        icon: _default$6,
        className: "text-base-content/60",
        fontSize: 15
      })
    }), u$1(Modal, {
      ref: modalRef,
      backdrop: true,
      className: "p-0",
      children: [u$1("div", {
        className: "form-control flex-row items-center rounded-box p-2 px-5",
        children: [u$1(Icon, {
          icon: _default$6,
          className: "text-base-content/70",
          fontSize: 18
        }), u$1(Input, {
          size: "sm",
          placeholder: "Search collections",
          bordered: false,
          borderOffset: false,
          className: "w-full text-base focus:border-transparent focus:outline-0",
          autoFocus: true
        }), u$1("form", {
          method: "dialog",
          children: u$1(Button, {
            _: "on click remove @open from <dialog/> then remove .modal-open from <dialog/>",
            size: "sm",
            shape: "circle",
            color: "ghost",
            startIcon: u$1(Icon, {
              icon: _default$a,
              fontSize: 16
            })
          })
        })]
      }), u$1("div", {
        className: "border-t border-base-content/10",
        children: u$1(Menu, {
          children: [u$1(MenuTitle, {
            children: "My Collections"
          }), u$1(MenuItem, {
            _: "on click remove @open from <dialog/> then remove .modal-open from <dialog/>",
            children: u$1("a", {
              children: [u$1(Icon, {
                icon: _default$8,
                fontSize: 18
              }), u$1("p", {
                className: "grow text-sm  ",
                children: "Personal Collection"
              })]
            })
          }), u$1("hr", {
            className: "-mx-2 mt-3 h-px border-base-content/10"
          }), u$1(MenuTitle, {
            children: "Actions"
          }), u$1(MenuItem, {
            disabled: true,
            children: u$1("a", {
              children: [u$1(Icon, {
                icon: _default$m,
                fontSize: 18
              }), u$1("p", {
                className: "grow text-sm  ",
                children: "Create Empty Collection"
              })]
            })
          }), u$1(MenuItem, {
            disabled: true,
            children: u$1("a", {
              children: [u$1(Icon, {
                icon: _default$9,
                fontSize: 18
              }), u$1("p", {
                className: "grow text-sm ",
                children: "Import Existing Collection"
              })]
            })
          }), u$1(MenuItem, {
            disabled: true,
            children: u$1("a", {
              children: [u$1(Icon, {
                icon: _default$7,
                fontSize: 18
              }), u$1("p", {
                className: "grow text-sm ",
                children: "Share Collection"
              })]
            })
          })]
        })
      })]
    })]
  });
};
const Topbar = ({
  theme
}) => {
  return u$1(Navbar, {
    className: "z-10  border-b border-base-200 px-3",
    children: [u$1(NavbarStart, {
      className: "gap-3",
      children: [u$1(Button, {
        shape: "square",
        color: "ghost",
        size: "sm",
        _: "on click toggle [@checked=true] on <div[role='leftDrawer'] .drawer-toggle />",
        children: u$1(Icon, {
          icon: _default$f,
          fontSize: 20
        })
      }), u$1(SearchButton, {})]
    }), u$1(NavbarCenter, {
      children: u$1("label", {
        for: "Toggle3",
        class: "inline-flex items-center p-2 rounded-md cursor-pointer dark:text-gray-100",
        children: [u$1("input", {
          id: "Toggle3",
          type: "checkbox",
          class: "hidden peer"
        }), u$1("span", {
          class: "px-4 py-2 rounded-l-md dark:bg-violet-600 peer-checked:dark:bg-gray-700",
          children: "Canvas"
        }), u$1("span", {
          class: "px-4 py-2 rounded-r-md dark:bg-gray-700 peer-checked:dark:bg-violet-600",
          children: "Manage"
        })]
      })
    }), u$1(NavbarEnd, {
      className: "gap-1.5",
      children: [u$1(ThemeToggleButton, {
        theme,
        shape: "circle",
        color: "ghost",
        size: "sm"
      }), u$1(NotificationButton, {}), u$1(Dropdown, {
        vertical: "bottom",
        end: true,
        children: [u$1(DropdownToggle, {
          className: "btn btn-ghost rounded-btn px-1.5 hover:bg-base-content/20",
          button: false,
          children: u$1("div", {
            className: "flex items-center gap-2",
            children: [u$1(Avatar, {
              src: avatar,
              size: 30,
              innerClassName: Mask$1.className({
                variant: "squircle"
              })
            }), u$1("div", {
              className: "flex flex-col items-start",
              children: [u$1("p", {
                className: "text-sm/none",
                "hx-get": "/whoami",
                "hx-trigger": "load",
                children: "Anonymous"
              }), u$1("p", {
                className: "mt-1 text-xs/none text-primary",
                children: "Edit"
              })]
            })]
          })
        }), u$1(DropdownMenu, {
          className: "mt-4 w-52",
          children: [u$1(DropdownItem, {
            className: "disabled",
            children: [u$1(Icon, {
              icon: _default$e,
              fontSize: 16
            }), " My Profile"]
          }), u$1("hr", {
            className: "-mx-2 my-1 border-base-content/10"
          }), u$1(DropdownItem, {
            className: "text-error",
            _: "on click js\nnavigator.serviceWorker.getRegistrations().then(async registrations => { for (const registration of registrations) { await registration.unregister(); } window.location = '/';\n}); end ",
            children: [u$1(Icon, {
              icon: _default$g,
              fontSize: 16
            }), "Logout"]
          })]
        })]
      })]
    })]
  });
};
function CanvasPage(props) {
  return u$1("div", {
    class: "size-full",
    children: u$1("div", {
      class: "flex overflow-hidden",
      children: u$1("div", {
        class: "main-wrapper overflow-auto",
        children: u$1("div", {
          class: "flex h-full flex-col ",
          children: [u$1(Topbar, {
            theme: props.theme
          }), u$1("div", {
            class: "content-wrapper grow bg-content-background p-6 transition-all",
            children: u$1("div", {
              children: u$1("div", {
                className: "grid grid-cols-1 gap-6",
                children: u$1("div", {
                  className: "col-span-1",
                  children: [u$1("div", {
                    className: "flex items-center justify-between",
                    children: u$1("h3", {
                      className: "text-lg font-medium",
                      children: "Whiteboards"
                    })
                  }), u$1("h3", {
                    className: "mt-6 text-base font-medium",
                    children: "My Canvas"
                  }), u$1("div", {
                    className: "mt-3",
                    children: u$1("div", {
                      id: "app"
                    })
                  })]
                })
              })
            })
          })]
        })
      })
    })
  });
}
function mockFile() {
  return "";
}
async function sleep$1(ms = 100) {
  return new Promise((resolve2) => setTimeout(resolve2, ms));
}
const b64toBlob = (b64Data, contentType = "", sliceSize = 512) => {
  const byteCharacters = atob(b64Data);
  const byteArrays = [];
  for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {
    const slice = byteCharacters.slice(offset, offset + sliceSize);
    const byteNumbers = new Array(slice.length);
    for (let i2 = 0; i2 < slice.length; i2++) {
      byteNumbers[i2] = slice.charCodeAt(i2);
    }
    const byteArray = new Uint8Array(byteNumbers);
    byteArrays.push(byteArray);
  }
  const blob = new Blob(byteArrays, {
    type: contentType
  });
  return blob;
};
const getFileExtension = (type) => {
  switch (type) {
    case "image/jpeg":
      return {
        "jpeg": null
      };
    case "image/gif":
      return {
        "gif": null
      };
    case "image/jpg":
      return {
        "jpg": null
      };
    case "image/png":
      return {
        "png": null
      };
    case "image/svg":
      return {
        "svg": null
      };
    case "video/avi":
      return {
        "avi": null
      };
    case "video/aac":
      return {
        "aac": null
      };
    case "video/mp4":
      return {
        "mp4": null
      };
    case "audio/wav":
      return {
        "wav": null
      };
    case "audio/mp3":
      return {
        "mp3": null
      };
    default:
      return null;
  }
};
const error404Image = "/error-404.svg";
const NotFoundPage = () => {
  return u$1(k$3, {
    children: u$1("div", {
      className: "flex h-screen w-screen flex-col items-center justify-center",
      children: [u$1("img", {
        src: error404Image,
        alt: "error",
        className: "max-h-[400px]"
      }), u$1("a", {
        href: "/",
        className: "btn btn-primary mt-5",
        children: "Go to Home"
      })]
    })
  });
};
var ReplicaRejectCode;
(function(ReplicaRejectCode2) {
  ReplicaRejectCode2[ReplicaRejectCode2["SysFatal"] = 1] = "SysFatal";
  ReplicaRejectCode2[ReplicaRejectCode2["SysTransient"] = 2] = "SysTransient";
  ReplicaRejectCode2[ReplicaRejectCode2["DestinationInvalid"] = 3] = "DestinationInvalid";
  ReplicaRejectCode2[ReplicaRejectCode2["CanisterReject"] = 4] = "CanisterReject";
  ReplicaRejectCode2[ReplicaRejectCode2["CanisterError"] = 5] = "CanisterError";
})(ReplicaRejectCode || (ReplicaRejectCode = {}));
const alphabet = "abcdefghijklmnopqrstuvwxyz234567";
const lookupTable = /* @__PURE__ */ Object.create(null);
for (let i2 = 0; i2 < alphabet.length; i2++) {
  lookupTable[alphabet[i2]] = i2;
}
lookupTable["0"] = lookupTable.o;
lookupTable["1"] = lookupTable.i;
function encode$3(input) {
  let skip = 0;
  let bits = 0;
  let output = "";
  function encodeByte(byte) {
    if (skip < 0) {
      bits |= byte >> -skip;
    } else {
      bits = byte << skip & 248;
    }
    if (skip > 3) {
      skip -= 8;
      return 1;
    }
    if (skip < 4) {
      output += alphabet[bits >> 3];
      skip += 5;
    }
    return 0;
  }
  for (let i2 = 0; i2 < input.length; ) {
    i2 += encodeByte(input[i2]);
  }
  return output + (skip < 0 ? alphabet[bits >> 3] : "");
}
function decode$4(input) {
  let skip = 0;
  let byte = 0;
  const output = new Uint8Array(input.length * 4 / 3 | 0);
  let o2 = 0;
  function decodeChar(char) {
    let val = lookupTable[char.toLowerCase()];
    if (val === void 0) {
      throw new Error(`Invalid character: ${JSON.stringify(char)}`);
    }
    val <<= 3;
    byte |= val >>> skip;
    skip += 5;
    if (skip >= 8) {
      output[o2++] = byte;
      skip -= 8;
      if (skip > 0) {
        byte = val << 5 - skip & 255;
      } else {
        byte = 0;
      }
    }
  }
  for (const c2 of input) {
    decodeChar(c2);
  }
  return output.slice(0, o2);
}
const lookUpTable = new Uint32Array([
  0,
  1996959894,
  3993919788,
  2567524794,
  124634137,
  1886057615,
  3915621685,
  2657392035,
  249268274,
  2044508324,
  3772115230,
  2547177864,
  162941995,
  2125561021,
  3887607047,
  2428444049,
  498536548,
  1789927666,
  4089016648,
  2227061214,
  450548861,
  1843258603,
  4107580753,
  2211677639,
  325883990,
  1684777152,
  4251122042,
  2321926636,
  335633487,
  1661365465,
  4195302755,
  2366115317,
  997073096,
  1281953886,
  3579855332,
  2724688242,
  1006888145,
  1258607687,
  3524101629,
  2768942443,
  901097722,
  1119000684,
  3686517206,
  2898065728,
  853044451,
  1172266101,
  3705015759,
  2882616665,
  651767980,
  1373503546,
  3369554304,
  3218104598,
  565507253,
  1454621731,
  3485111705,
  3099436303,
  671266974,
  1594198024,
  3322730930,
  2970347812,
  795835527,
  1483230225,
  3244367275,
  3060149565,
  1994146192,
  31158534,
  2563907772,
  4023717930,
  1907459465,
  112637215,
  2680153253,
  3904427059,
  2013776290,
  251722036,
  2517215374,
  3775830040,
  2137656763,
  141376813,
  2439277719,
  3865271297,
  1802195444,
  476864866,
  2238001368,
  4066508878,
  1812370925,
  453092731,
  2181625025,
  4111451223,
  1706088902,
  314042704,
  2344532202,
  4240017532,
  1658658271,
  366619977,
  2362670323,
  4224994405,
  1303535960,
  984961486,
  2747007092,
  3569037538,
  1256170817,
  1037604311,
  2765210733,
  3554079995,
  1131014506,
  879679996,
  2909243462,
  3663771856,
  1141124467,
  855842277,
  2852801631,
  3708648649,
  1342533948,
  654459306,
  3188396048,
  3373015174,
  1466479909,
  544179635,
  3110523913,
  3462522015,
  1591671054,
  702138776,
  2966460450,
  3352799412,
  1504918807,
  783551873,
  3082640443,
  3233442989,
  3988292384,
  2596254646,
  62317068,
  1957810842,
  3939845945,
  2647816111,
  81470997,
  1943803523,
  3814918930,
  2489596804,
  225274430,
  2053790376,
  3826175755,
  2466906013,
  167816743,
  2097651377,
  4027552580,
  2265490386,
  503444072,
  1762050814,
  4150417245,
  2154129355,
  426522225,
  1852507879,
  4275313526,
  2312317920,
  282753626,
  1742555852,
  4189708143,
  2394877945,
  397917763,
  1622183637,
  3604390888,
  2714866558,
  953729732,
  1340076626,
  3518719985,
  2797360999,
  1068828381,
  1219638859,
  3624741850,
  2936675148,
  906185462,
  1090812512,
  3747672003,
  2825379669,
  829329135,
  1181335161,
  3412177804,
  3160834842,
  628085408,
  1382605366,
  3423369109,
  3138078467,
  570562233,
  1426400815,
  3317316542,
  2998733608,
  733239954,
  1555261956,
  3268935591,
  3050360625,
  752459403,
  1541320221,
  2607071920,
  3965973030,
  1969922972,
  40735498,
  2617837225,
  3943577151,
  1913087877,
  83908371,
  2512341634,
  3803740692,
  2075208622,
  213261112,
  2463272603,
  3855990285,
  2094854071,
  198958881,
  2262029012,
  4057260610,
  1759359992,
  534414190,
  2176718541,
  4139329115,
  1873836001,
  414664567,
  2282248934,
  4279200368,
  1711684554,
  285281116,
  2405801727,
  4167216745,
  1634467795,
  376229701,
  2685067896,
  3608007406,
  1308918612,
  956543938,
  2808555105,
  3495958263,
  1231636301,
  1047427035,
  2932959818,
  3654703836,
  1088359270,
  936918e3,
  2847714899,
  3736837829,
  1202900863,
  817233897,
  3183342108,
  3401237130,
  1404277552,
  615818150,
  3134207493,
  3453421203,
  1423857449,
  601450431,
  3009837614,
  3294710456,
  1567103746,
  711928724,
  3020668471,
  3272380065,
  1510334235,
  755167117
]);
function getCrc32(buf) {
  const b2 = new Uint8Array(buf);
  let crc = -1;
  for (let i2 = 0; i2 < b2.length; i2++) {
    const byte = b2[i2];
    const t2 = (byte ^ crc) & 255;
    crc = lookUpTable[t2] ^ crc >>> 8;
  }
  return (crc ^ -1) >>> 0;
}
function sha224(data2) {
  return sha224$1.create().update(new Uint8Array(data2)).digest();
}
const JSON_KEY_PRINCIPAL = "__principal__";
const SELF_AUTHENTICATING_SUFFIX = 2;
const ANONYMOUS_SUFFIX = 4;
const MANAGEMENT_CANISTER_PRINCIPAL_HEX_STR = "aaaaa-aa";
const fromHexString = (hexString) => {
  var _a2;
  return new Uint8Array(((_a2 = hexString.match(/.{1,2}/g)) !== null && _a2 !== void 0 ? _a2 : []).map((byte) => parseInt(byte, 16)));
};
const toHexString = (bytes) => bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, "0"), "");
let Principal$1 = class Principal {
  constructor(_arr) {
    this._arr = _arr;
    this._isPrincipal = true;
  }
  static anonymous() {
    return new this(new Uint8Array([ANONYMOUS_SUFFIX]));
  }
  /**
   * Utility method, returning the principal representing the management canister, decoded from the hex string `'aaaaa-aa'`
   * @returns {Principal} principal of the management canister
   */
  static managementCanister() {
    return this.fromHex(MANAGEMENT_CANISTER_PRINCIPAL_HEX_STR);
  }
  static selfAuthenticating(publicKey) {
    const sha = sha224(publicKey);
    return new this(new Uint8Array([...sha, SELF_AUTHENTICATING_SUFFIX]));
  }
  static from(other) {
    if (typeof other === "string") {
      return Principal.fromText(other);
    } else if (Object.getPrototypeOf(other) === Uint8Array.prototype) {
      return new Principal(other);
    } else if (typeof other === "object" && other !== null && other._isPrincipal === true) {
      return new Principal(other._arr);
    }
    throw new Error(`Impossible to convert ${JSON.stringify(other)} to Principal.`);
  }
  static fromHex(hex) {
    return new this(fromHexString(hex));
  }
  static fromText(text) {
    let maybePrincipal = text;
    if (text.includes(JSON_KEY_PRINCIPAL)) {
      const obj = JSON.parse(text);
      if (JSON_KEY_PRINCIPAL in obj) {
        maybePrincipal = obj[JSON_KEY_PRINCIPAL];
      }
    }
    const canisterIdNoDash = maybePrincipal.toLowerCase().replace(/-/g, "");
    let arr = decode$4(canisterIdNoDash);
    arr = arr.slice(4, arr.length);
    const principal = new this(arr);
    if (principal.toText() !== maybePrincipal) {
      throw new Error(`Principal "${principal.toText()}" does not have a valid checksum (original value "${maybePrincipal}" may not be a valid Principal ID).`);
    }
    return principal;
  }
  static fromUint8Array(arr) {
    return new this(arr);
  }
  isAnonymous() {
    return this._arr.byteLength === 1 && this._arr[0] === ANONYMOUS_SUFFIX;
  }
  toUint8Array() {
    return this._arr;
  }
  toHex() {
    return toHexString(this._arr).toUpperCase();
  }
  toText() {
    const checksumArrayBuf = new ArrayBuffer(4);
    const view = new DataView(checksumArrayBuf);
    view.setUint32(0, getCrc32(this._arr));
    const checksum = new Uint8Array(checksumArrayBuf);
    const bytes = Uint8Array.from(this._arr);
    const array = new Uint8Array([...checksum, ...bytes]);
    const result = encode$3(array);
    const matches = result.match(/.{1,5}/g);
    if (!matches) {
      throw new Error();
    }
    return matches.join("-");
  }
  toString() {
    return this.toText();
  }
  /**
   * Serializes to JSON
   * @returns {JsonnablePrincipal} a JSON object with a single key, {@link JSON_KEY_PRINCIPAL}, whose value is the principal as a string
   */
  toJSON() {
    return { [JSON_KEY_PRINCIPAL]: this.toText() };
  }
  /**
   * Utility method taking a Principal to compare against. Used for determining canister ranges in certificate verification
   * @param {Principal} other - a {@link Principal} to compare
   * @returns {'lt' | 'eq' | 'gt'} `'lt' | 'eq' | 'gt'` a string, representing less than, equal to, or greater than
   */
  compareTo(other) {
    for (let i2 = 0; i2 < Math.min(this._arr.length, other._arr.length); i2++) {
      if (this._arr[i2] < other._arr[i2])
        return "lt";
      else if (this._arr[i2] > other._arr[i2])
        return "gt";
    }
    if (this._arr.length < other._arr.length)
      return "lt";
    if (this._arr.length > other._arr.length)
      return "gt";
    return "eq";
  }
  /**
   * Utility method checking whether a provided Principal is less than or equal to the current one using the {@link Principal.compareTo} method
   * @param other a {@link Principal} to compare
   * @returns {boolean} boolean
   */
  ltEq(other) {
    const cmp = this.compareTo(other);
    return cmp == "lt" || cmp == "eq";
  }
  /**
   * Utility method checking whether a provided Principal is greater than or equal to the current one using the {@link Principal.compareTo} method
   * @param other a {@link Principal} to compare
   * @returns {boolean} boolean
   */
  gtEq(other) {
    const cmp = this.compareTo(other);
    return cmp == "gt" || cmp == "eq";
  }
};
class AgentError extends Error {
  constructor(message) {
    super(message);
    this.message = message;
    Object.setPrototypeOf(this, AgentError.prototype);
  }
}
function concat$1(...buffers) {
  const result = new Uint8Array(buffers.reduce((acc, curr) => acc + curr.byteLength, 0));
  let index2 = 0;
  for (const b2 of buffers) {
    result.set(new Uint8Array(b2), index2);
    index2 += b2.byteLength;
  }
  return result;
}
class PipeArrayBuffer {
  /**
   * Creates a new instance of a pipe
   * @param buffer an optional buffer to start with
   * @param length an optional amount of bytes to use for the length.
   */
  constructor(buffer2, length = (buffer2 === null || buffer2 === void 0 ? void 0 : buffer2.byteLength) || 0) {
    this._buffer = buffer2 || new ArrayBuffer(0);
    this._view = new Uint8Array(this._buffer, 0, length);
  }
  get buffer() {
    return this._view.slice();
  }
  get byteLength() {
    return this._view.byteLength;
  }
  /**
   * Read `num` number of bytes from the front of the pipe.
   * @param num The number of bytes to read.
   */
  read(num) {
    const result = this._view.subarray(0, num);
    this._view = this._view.subarray(num);
    return result.slice().buffer;
  }
  readUint8() {
    const result = this._view[0];
    this._view = this._view.subarray(1);
    return result;
  }
  /**
   * Write a buffer to the end of the pipe.
   * @param buf The bytes to write.
   */
  write(buf) {
    const b2 = new Uint8Array(buf);
    const offset = this._view.byteLength;
    if (this._view.byteOffset + this._view.byteLength + b2.byteLength >= this._buffer.byteLength) {
      this.alloc(b2.byteLength);
    } else {
      this._view = new Uint8Array(this._buffer, this._view.byteOffset, this._view.byteLength + b2.byteLength);
    }
    this._view.set(b2, offset);
  }
  /**
   * Whether or not there is more data to read from the buffer
   */
  get end() {
    return this._view.byteLength === 0;
  }
  /**
   * Allocate a fixed amount of memory in the buffer. This does not affect the view.
   * @param amount A number of bytes to add to the buffer.
   */
  alloc(amount) {
    const b2 = new ArrayBuffer((this._buffer.byteLength + amount) * 1.2 | 0);
    const v2 = new Uint8Array(b2, 0, this._view.byteLength + amount);
    v2.set(this._view);
    this._buffer = b2;
    this._view = v2;
  }
}
function idlHash(s2) {
  const utf8encoder = new TextEncoder();
  const array = utf8encoder.encode(s2);
  let h2 = 0;
  for (const c2 of array) {
    h2 = (h2 * 223 + c2) % 2 ** 32;
  }
  return h2;
}
function idlLabelToId(label) {
  if (/^_\d+_$/.test(label) || /^_0x[0-9a-fA-F]+_$/.test(label)) {
    const num = +label.slice(1, -1);
    if (Number.isSafeInteger(num) && num >= 0 && num < 2 ** 32) {
      return num;
    }
  }
  return idlHash(label);
}
function eob() {
  throw new Error("unexpected end of buffer");
}
function safeRead(pipe, num) {
  if (pipe.byteLength < num) {
    eob();
  }
  return pipe.read(num);
}
function safeReadUint8(pipe) {
  const byte = pipe.readUint8();
  if (byte === void 0) {
    eob();
  }
  return byte;
}
function lebEncode(value) {
  if (typeof value === "number") {
    value = BigInt(value);
  }
  if (value < BigInt(0)) {
    throw new Error("Cannot leb encode negative values.");
  }
  const byteLength = (value === BigInt(0) ? 0 : Math.ceil(Math.log2(Number(value)))) + 1;
  const pipe = new PipeArrayBuffer(new ArrayBuffer(byteLength), 0);
  while (true) {
    const i2 = Number(value & BigInt(127));
    value /= BigInt(128);
    if (value === BigInt(0)) {
      pipe.write(new Uint8Array([i2]));
      break;
    } else {
      pipe.write(new Uint8Array([i2 | 128]));
    }
  }
  return pipe.buffer;
}
function lebDecode(pipe) {
  let weight = BigInt(1);
  let value = BigInt(0);
  let byte;
  do {
    byte = safeReadUint8(pipe);
    value += BigInt(byte & 127).valueOf() * weight;
    weight *= BigInt(128);
  } while (byte >= 128);
  return value;
}
function slebEncode(value) {
  if (typeof value === "number") {
    value = BigInt(value);
  }
  const isNeg = value < BigInt(0);
  if (isNeg) {
    value = -value - BigInt(1);
  }
  const byteLength = (value === BigInt(0) ? 0 : Math.ceil(Math.log2(Number(value)))) + 1;
  const pipe = new PipeArrayBuffer(new ArrayBuffer(byteLength), 0);
  while (true) {
    const i2 = getLowerBytes(value);
    value /= BigInt(128);
    if (isNeg && value === BigInt(0) && (i2 & 64) !== 0 || !isNeg && value === BigInt(0) && (i2 & 64) === 0) {
      pipe.write(new Uint8Array([i2]));
      break;
    } else {
      pipe.write(new Uint8Array([i2 | 128]));
    }
  }
  function getLowerBytes(num) {
    const bytes = num % BigInt(128);
    if (isNeg) {
      return Number(BigInt(128) - bytes - BigInt(1));
    } else {
      return Number(bytes);
    }
  }
  return pipe.buffer;
}
function slebDecode(pipe) {
  const pipeView = new Uint8Array(pipe.buffer);
  let len = 0;
  for (; len < pipeView.byteLength; len++) {
    if (pipeView[len] < 128) {
      if ((pipeView[len] & 64) === 0) {
        return lebDecode(pipe);
      }
      break;
    }
  }
  const bytes = new Uint8Array(safeRead(pipe, len + 1));
  let value = BigInt(0);
  for (let i2 = bytes.byteLength - 1; i2 >= 0; i2--) {
    value = value * BigInt(128) + BigInt(128 - (bytes[i2] & 127) - 1);
  }
  return -value - BigInt(1);
}
function writeUIntLE(value, byteLength) {
  if (BigInt(value) < BigInt(0)) {
    throw new Error("Cannot write negative values.");
  }
  return writeIntLE(value, byteLength);
}
function writeIntLE(value, byteLength) {
  value = BigInt(value);
  const pipe = new PipeArrayBuffer(new ArrayBuffer(Math.min(1, byteLength)), 0);
  let i2 = 0;
  let mul = BigInt(256);
  let sub = BigInt(0);
  let byte = Number(value % mul);
  pipe.write(new Uint8Array([byte]));
  while (++i2 < byteLength) {
    if (value < 0 && sub === BigInt(0) && byte !== 0) {
      sub = BigInt(1);
    }
    byte = Number((value / mul - sub) % BigInt(256));
    pipe.write(new Uint8Array([byte]));
    mul *= BigInt(256);
  }
  return pipe.buffer;
}
function readUIntLE(pipe, byteLength) {
  let val = BigInt(safeReadUint8(pipe));
  let mul = BigInt(1);
  let i2 = 0;
  while (++i2 < byteLength) {
    mul *= BigInt(256);
    const byte = BigInt(safeReadUint8(pipe));
    val = val + mul * byte;
  }
  return val;
}
function readIntLE(pipe, byteLength) {
  let val = readUIntLE(pipe, byteLength);
  const mul = BigInt(2) ** (BigInt(8) * BigInt(byteLength - 1) + BigInt(7));
  if (val >= mul) {
    val -= mul * BigInt(2);
  }
  return val;
}
function iexp2(n2) {
  const nBig = BigInt(n2);
  if (n2 < 0) {
    throw new RangeError("Input must be non-negative");
  }
  return BigInt(1) << nBig;
}
const magicNumber = "DIDL";
const toReadableString_max = 400;
function zipWith(xs, ys, f2) {
  return xs.map((x2, i2) => f2(x2, ys[i2]));
}
class TypeTable {
  constructor() {
    this._typs = [];
    this._idx = /* @__PURE__ */ new Map();
  }
  has(obj) {
    return this._idx.has(obj.name);
  }
  add(type, buf) {
    const idx = this._typs.length;
    this._idx.set(type.name, idx);
    this._typs.push(buf);
  }
  merge(obj, knot) {
    const idx = this._idx.get(obj.name);
    const knotIdx = this._idx.get(knot);
    if (idx === void 0) {
      throw new Error("Missing type index for " + obj);
    }
    if (knotIdx === void 0) {
      throw new Error("Missing type index for " + knot);
    }
    this._typs[idx] = this._typs[knotIdx];
    this._typs.splice(knotIdx, 1);
    this._idx.delete(knot);
  }
  encode() {
    const len = lebEncode(this._typs.length);
    const buf = concat$1(...this._typs);
    return concat$1(len, buf);
  }
  indexOf(typeName) {
    if (!this._idx.has(typeName)) {
      throw new Error("Missing type index for " + typeName);
    }
    return slebEncode(this._idx.get(typeName) || 0);
  }
}
class Visitor {
  visitType(t2, data2) {
    throw new Error("Not implemented");
  }
  visitPrimitive(t2, data2) {
    return this.visitType(t2, data2);
  }
  visitEmpty(t2, data2) {
    return this.visitPrimitive(t2, data2);
  }
  visitBool(t2, data2) {
    return this.visitPrimitive(t2, data2);
  }
  visitNull(t2, data2) {
    return this.visitPrimitive(t2, data2);
  }
  visitReserved(t2, data2) {
    return this.visitPrimitive(t2, data2);
  }
  visitText(t2, data2) {
    return this.visitPrimitive(t2, data2);
  }
  visitNumber(t2, data2) {
    return this.visitPrimitive(t2, data2);
  }
  visitInt(t2, data2) {
    return this.visitNumber(t2, data2);
  }
  visitNat(t2, data2) {
    return this.visitNumber(t2, data2);
  }
  visitFloat(t2, data2) {
    return this.visitPrimitive(t2, data2);
  }
  visitFixedInt(t2, data2) {
    return this.visitNumber(t2, data2);
  }
  visitFixedNat(t2, data2) {
    return this.visitNumber(t2, data2);
  }
  visitPrincipal(t2, data2) {
    return this.visitPrimitive(t2, data2);
  }
  visitConstruct(t2, data2) {
    return this.visitType(t2, data2);
  }
  visitVec(t2, ty, data2) {
    return this.visitConstruct(t2, data2);
  }
  visitOpt(t2, ty, data2) {
    return this.visitConstruct(t2, data2);
  }
  visitRecord(t2, fields, data2) {
    return this.visitConstruct(t2, data2);
  }
  visitTuple(t2, components, data2) {
    const fields = components.map((ty, i2) => [`_${i2}_`, ty]);
    return this.visitRecord(t2, fields, data2);
  }
  visitVariant(t2, fields, data2) {
    return this.visitConstruct(t2, data2);
  }
  visitRec(t2, ty, data2) {
    return this.visitConstruct(ty, data2);
  }
  visitFunc(t2, data2) {
    return this.visitConstruct(t2, data2);
  }
  visitService(t2, data2) {
    return this.visitConstruct(t2, data2);
  }
}
class Type {
  /* Display type name */
  display() {
    return this.name;
  }
  valueToString(x2) {
    return toReadableString(x2);
  }
  /* Implement `T` in the IDL spec, only needed for non-primitive types */
  buildTypeTable(typeTable) {
    if (!typeTable.has(this)) {
      this._buildTypeTableImpl(typeTable);
    }
  }
}
class PrimitiveType extends Type {
  checkType(t2) {
    if (this.name !== t2.name) {
      throw new Error(`type mismatch: type on the wire ${t2.name}, expect type ${this.name}`);
    }
    return t2;
  }
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  _buildTypeTableImpl(typeTable) {
    return;
  }
}
class ConstructType extends Type {
  checkType(t2) {
    if (t2 instanceof RecClass) {
      const ty = t2.getType();
      if (typeof ty === "undefined") {
        throw new Error("type mismatch with uninitialized type");
      }
      return ty;
    }
    throw new Error(`type mismatch: type on the wire ${t2.name}, expect type ${this.name}`);
  }
  encodeType(typeTable) {
    return typeTable.indexOf(this.name);
  }
}
class EmptyClass extends PrimitiveType {
  accept(v2, d2) {
    return v2.visitEmpty(this, d2);
  }
  covariant(x2) {
    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x2)}`);
  }
  encodeValue() {
    throw new Error("Empty cannot appear as a function argument");
  }
  valueToString() {
    throw new Error("Empty cannot appear as a value");
  }
  encodeType() {
    return slebEncode(
      -17
      /* IDLTypeIds.Empty */
    );
  }
  decodeValue() {
    throw new Error("Empty cannot appear as an output");
  }
  get name() {
    return "empty";
  }
}
class UnknownClass extends Type {
  checkType(t2) {
    throw new Error("Method not implemented for unknown.");
  }
  accept(v2, d2) {
    throw v2.visitType(this, d2);
  }
  covariant(x2) {
    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x2)}`);
  }
  encodeValue() {
    throw new Error("Unknown cannot appear as a function argument");
  }
  valueToString() {
    throw new Error("Unknown cannot appear as a value");
  }
  encodeType() {
    throw new Error("Unknown cannot be serialized");
  }
  decodeValue(b2, t2) {
    let decodedValue = t2.decodeValue(b2, t2);
    if (Object(decodedValue) !== decodedValue) {
      decodedValue = Object(decodedValue);
    }
    let typeFunc;
    if (t2 instanceof RecClass) {
      typeFunc = () => t2.getType();
    } else {
      typeFunc = () => t2;
    }
    Object.defineProperty(decodedValue, "type", {
      value: typeFunc,
      writable: true,
      enumerable: false,
      configurable: true
    });
    return decodedValue;
  }
  _buildTypeTableImpl() {
    throw new Error("Unknown cannot be serialized");
  }
  get name() {
    return "Unknown";
  }
}
class BoolClass extends PrimitiveType {
  accept(v2, d2) {
    return v2.visitBool(this, d2);
  }
  covariant(x2) {
    if (typeof x2 === "boolean")
      return true;
    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x2)}`);
  }
  encodeValue(x2) {
    return new Uint8Array([x2 ? 1 : 0]);
  }
  encodeType() {
    return slebEncode(
      -2
      /* IDLTypeIds.Bool */
    );
  }
  decodeValue(b2, t2) {
    this.checkType(t2);
    switch (safeReadUint8(b2)) {
      case 0:
        return false;
      case 1:
        return true;
      default:
        throw new Error("Boolean value out of range");
    }
  }
  get name() {
    return "bool";
  }
}
class NullClass extends PrimitiveType {
  accept(v2, d2) {
    return v2.visitNull(this, d2);
  }
  covariant(x2) {
    if (x2 === null)
      return true;
    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x2)}`);
  }
  encodeValue() {
    return new ArrayBuffer(0);
  }
  encodeType() {
    return slebEncode(
      -1
      /* IDLTypeIds.Null */
    );
  }
  decodeValue(b2, t2) {
    this.checkType(t2);
    return null;
  }
  get name() {
    return "null";
  }
}
class ReservedClass extends PrimitiveType {
  accept(v2, d2) {
    return v2.visitReserved(this, d2);
  }
  covariant(x2) {
    return true;
  }
  encodeValue() {
    return new ArrayBuffer(0);
  }
  encodeType() {
    return slebEncode(
      -16
      /* IDLTypeIds.Reserved */
    );
  }
  decodeValue(b2, t2) {
    if (t2.name !== this.name) {
      t2.decodeValue(b2, t2);
    }
    return null;
  }
  get name() {
    return "reserved";
  }
}
class TextClass extends PrimitiveType {
  accept(v2, d2) {
    return v2.visitText(this, d2);
  }
  covariant(x2) {
    if (typeof x2 === "string")
      return true;
    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x2)}`);
  }
  encodeValue(x2) {
    const buf = new TextEncoder().encode(x2);
    const len = lebEncode(buf.byteLength);
    return concat$1(len, buf);
  }
  encodeType() {
    return slebEncode(
      -15
      /* IDLTypeIds.Text */
    );
  }
  decodeValue(b2, t2) {
    this.checkType(t2);
    const len = lebDecode(b2);
    const buf = safeRead(b2, Number(len));
    const decoder = new TextDecoder("utf8", { fatal: true });
    return decoder.decode(buf);
  }
  get name() {
    return "text";
  }
  valueToString(x2) {
    return '"' + x2 + '"';
  }
}
class IntClass extends PrimitiveType {
  accept(v2, d2) {
    return v2.visitInt(this, d2);
  }
  covariant(x2) {
    if (typeof x2 === "bigint" || Number.isInteger(x2))
      return true;
    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x2)}`);
  }
  encodeValue(x2) {
    return slebEncode(x2);
  }
  encodeType() {
    return slebEncode(
      -4
      /* IDLTypeIds.Int */
    );
  }
  decodeValue(b2, t2) {
    this.checkType(t2);
    return slebDecode(b2);
  }
  get name() {
    return "int";
  }
  valueToString(x2) {
    return x2.toString();
  }
}
class NatClass extends PrimitiveType {
  accept(v2, d2) {
    return v2.visitNat(this, d2);
  }
  covariant(x2) {
    if (typeof x2 === "bigint" && x2 >= BigInt(0) || Number.isInteger(x2) && x2 >= 0)
      return true;
    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x2)}`);
  }
  encodeValue(x2) {
    return lebEncode(x2);
  }
  encodeType() {
    return slebEncode(
      -3
      /* IDLTypeIds.Nat */
    );
  }
  decodeValue(b2, t2) {
    this.checkType(t2);
    return lebDecode(b2);
  }
  get name() {
    return "nat";
  }
  valueToString(x2) {
    return x2.toString();
  }
}
class FloatClass extends PrimitiveType {
  constructor(_bits) {
    super();
    this._bits = _bits;
    if (_bits !== 32 && _bits !== 64) {
      throw new Error("not a valid float type");
    }
  }
  accept(v2, d2) {
    return v2.visitFloat(this, d2);
  }
  covariant(x2) {
    if (typeof x2 === "number" || x2 instanceof Number)
      return true;
    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x2)}`);
  }
  encodeValue(x2) {
    const buf = new ArrayBuffer(this._bits / 8);
    const view = new DataView(buf);
    if (this._bits === 32) {
      view.setFloat32(0, x2, true);
    } else {
      view.setFloat64(0, x2, true);
    }
    return buf;
  }
  encodeType() {
    const opcode = this._bits === 32 ? -13 : -14;
    return slebEncode(opcode);
  }
  decodeValue(b2, t2) {
    this.checkType(t2);
    const bytes = safeRead(b2, this._bits / 8);
    const view = new DataView(bytes);
    if (this._bits === 32) {
      return view.getFloat32(0, true);
    } else {
      return view.getFloat64(0, true);
    }
  }
  get name() {
    return "float" + this._bits;
  }
  valueToString(x2) {
    return x2.toString();
  }
}
class FixedIntClass extends PrimitiveType {
  constructor(_bits) {
    super();
    this._bits = _bits;
  }
  accept(v2, d2) {
    return v2.visitFixedInt(this, d2);
  }
  covariant(x2) {
    const min = iexp2(this._bits - 1) * BigInt(-1);
    const max = iexp2(this._bits - 1) - BigInt(1);
    let ok = false;
    if (typeof x2 === "bigint") {
      ok = x2 >= min && x2 <= max;
    } else if (Number.isInteger(x2)) {
      const v2 = BigInt(x2);
      ok = v2 >= min && v2 <= max;
    } else {
      ok = false;
    }
    if (ok)
      return true;
    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x2)}`);
  }
  encodeValue(x2) {
    return writeIntLE(x2, this._bits / 8);
  }
  encodeType() {
    const offset = Math.log2(this._bits) - 3;
    return slebEncode(-9 - offset);
  }
  decodeValue(b2, t2) {
    this.checkType(t2);
    const num = readIntLE(b2, this._bits / 8);
    if (this._bits <= 32) {
      return Number(num);
    } else {
      return num;
    }
  }
  get name() {
    return `int${this._bits}`;
  }
  valueToString(x2) {
    return x2.toString();
  }
}
class FixedNatClass extends PrimitiveType {
  constructor(_bits) {
    super();
    this._bits = _bits;
  }
  accept(v2, d2) {
    return v2.visitFixedNat(this, d2);
  }
  covariant(x2) {
    const max = iexp2(this._bits);
    let ok = false;
    if (typeof x2 === "bigint" && x2 >= BigInt(0)) {
      ok = x2 < max;
    } else if (Number.isInteger(x2) && x2 >= 0) {
      const v2 = BigInt(x2);
      ok = v2 < max;
    } else {
      ok = false;
    }
    if (ok)
      return true;
    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x2)}`);
  }
  encodeValue(x2) {
    return writeUIntLE(x2, this._bits / 8);
  }
  encodeType() {
    const offset = Math.log2(this._bits) - 3;
    return slebEncode(-5 - offset);
  }
  decodeValue(b2, t2) {
    this.checkType(t2);
    const num = readUIntLE(b2, this._bits / 8);
    if (this._bits <= 32) {
      return Number(num);
    } else {
      return num;
    }
  }
  get name() {
    return `nat${this._bits}`;
  }
  valueToString(x2) {
    return x2.toString();
  }
}
class VecClass extends ConstructType {
  constructor(_type) {
    super();
    this._type = _type;
    this._blobOptimization = false;
    if (_type instanceof FixedNatClass && _type._bits === 8) {
      this._blobOptimization = true;
    }
  }
  accept(v2, d2) {
    return v2.visitVec(this, this._type, d2);
  }
  covariant(x2) {
    const bits = this._type instanceof FixedNatClass ? this._type._bits : this._type instanceof FixedIntClass ? this._type._bits : 0;
    if (ArrayBuffer.isView(x2) && bits == x2.BYTES_PER_ELEMENT * 8 || Array.isArray(x2) && x2.every((v2, idx) => {
      try {
        return this._type.covariant(v2);
      } catch (e2) {
        throw new Error(`Invalid ${this.display()} argument: 

index ${idx} -> ${e2.message}`);
      }
    }))
      return true;
    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x2)}`);
  }
  encodeValue(x2) {
    const len = lebEncode(x2.length);
    if (this._blobOptimization) {
      return concat$1(len, new Uint8Array(x2));
    }
    if (ArrayBuffer.isView(x2)) {
      return concat$1(len, new Uint8Array(x2.buffer));
    }
    const buf = new PipeArrayBuffer(new ArrayBuffer(len.byteLength + x2.length), 0);
    buf.write(len);
    for (const d2 of x2) {
      const encoded = this._type.encodeValue(d2);
      buf.write(new Uint8Array(encoded));
    }
    return buf.buffer;
  }
  _buildTypeTableImpl(typeTable) {
    this._type.buildTypeTable(typeTable);
    const opCode = slebEncode(
      -19
      /* IDLTypeIds.Vector */
    );
    const buffer2 = this._type.encodeType(typeTable);
    typeTable.add(this, concat$1(opCode, buffer2));
  }
  decodeValue(b2, t2) {
    const vec = this.checkType(t2);
    if (!(vec instanceof VecClass)) {
      throw new Error("Not a vector type");
    }
    const len = Number(lebDecode(b2));
    if (this._type instanceof FixedNatClass) {
      if (this._type._bits == 8) {
        return new Uint8Array(b2.read(len));
      }
      if (this._type._bits == 16) {
        return new Uint16Array(b2.read(len * 2));
      }
      if (this._type._bits == 32) {
        return new Uint32Array(b2.read(len * 4));
      }
      if (this._type._bits == 64) {
        return new BigUint64Array(b2.read(len * 8));
      }
    }
    if (this._type instanceof FixedIntClass) {
      if (this._type._bits == 8) {
        return new Int8Array(b2.read(len));
      }
      if (this._type._bits == 16) {
        return new Int16Array(b2.read(len * 2));
      }
      if (this._type._bits == 32) {
        return new Int32Array(b2.read(len * 4));
      }
      if (this._type._bits == 64) {
        return new BigInt64Array(b2.read(len * 8));
      }
    }
    const rets = [];
    for (let i2 = 0; i2 < len; i2++) {
      rets.push(this._type.decodeValue(b2, vec._type));
    }
    return rets;
  }
  get name() {
    return `vec ${this._type.name}`;
  }
  display() {
    return `vec ${this._type.display()}`;
  }
  valueToString(x2) {
    const elements = x2.map((e2) => this._type.valueToString(e2));
    return "vec {" + elements.join("; ") + "}";
  }
}
class OptClass extends ConstructType {
  constructor(_type) {
    super();
    this._type = _type;
  }
  accept(v2, d2) {
    return v2.visitOpt(this, this._type, d2);
  }
  covariant(x2) {
    try {
      if (Array.isArray(x2) && (x2.length === 0 || x2.length === 1 && this._type.covariant(x2[0])))
        return true;
    } catch (e2) {
      throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x2)} 

-> ${e2.message}`);
    }
    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x2)}`);
  }
  encodeValue(x2) {
    if (x2.length === 0) {
      return new Uint8Array([0]);
    } else {
      return concat$1(new Uint8Array([1]), this._type.encodeValue(x2[0]));
    }
  }
  _buildTypeTableImpl(typeTable) {
    this._type.buildTypeTable(typeTable);
    const opCode = slebEncode(
      -18
      /* IDLTypeIds.Opt */
    );
    const buffer2 = this._type.encodeType(typeTable);
    typeTable.add(this, concat$1(opCode, buffer2));
  }
  decodeValue(b2, t2) {
    const opt = this.checkType(t2);
    if (!(opt instanceof OptClass)) {
      throw new Error("Not an option type");
    }
    switch (safeReadUint8(b2)) {
      case 0:
        return [];
      case 1:
        return [this._type.decodeValue(b2, opt._type)];
      default:
        throw new Error("Not an option value");
    }
  }
  get name() {
    return `opt ${this._type.name}`;
  }
  display() {
    return `opt ${this._type.display()}`;
  }
  valueToString(x2) {
    if (x2.length === 0) {
      return "null";
    } else {
      return `opt ${this._type.valueToString(x2[0])}`;
    }
  }
}
class RecordClass extends ConstructType {
  constructor(fields = {}) {
    super();
    this._fields = Object.entries(fields).sort((a2, b2) => idlLabelToId(a2[0]) - idlLabelToId(b2[0]));
  }
  accept(v2, d2) {
    return v2.visitRecord(this, this._fields, d2);
  }
  tryAsTuple() {
    const res = [];
    for (let i2 = 0; i2 < this._fields.length; i2++) {
      const [key, type] = this._fields[i2];
      if (key !== `_${i2}_`) {
        return null;
      }
      res.push(type);
    }
    return res;
  }
  covariant(x2) {
    if (typeof x2 === "object" && this._fields.every(([k2, t2]) => {
      if (!x2.hasOwnProperty(k2)) {
        throw new Error(`Record is missing key "${k2}".`);
      }
      try {
        return t2.covariant(x2[k2]);
      } catch (e2) {
        throw new Error(`Invalid ${this.display()} argument: 

field ${k2} -> ${e2.message}`);
      }
    }))
      return true;
    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x2)}`);
  }
  encodeValue(x2) {
    const values = this._fields.map(([key]) => x2[key]);
    const bufs = zipWith(this._fields, values, ([, c2], d2) => c2.encodeValue(d2));
    return concat$1(...bufs);
  }
  _buildTypeTableImpl(T2) {
    this._fields.forEach(([_2, value]) => value.buildTypeTable(T2));
    const opCode = slebEncode(
      -20
      /* IDLTypeIds.Record */
    );
    const len = lebEncode(this._fields.length);
    const fields = this._fields.map(([key, value]) => concat$1(lebEncode(idlLabelToId(key)), value.encodeType(T2)));
    T2.add(this, concat$1(opCode, len, concat$1(...fields)));
  }
  decodeValue(b2, t2) {
    const record = this.checkType(t2);
    if (!(record instanceof RecordClass)) {
      throw new Error("Not a record type");
    }
    const x2 = {};
    let expectedRecordIdx = 0;
    let actualRecordIdx = 0;
    while (actualRecordIdx < record._fields.length) {
      const [hash2, type] = record._fields[actualRecordIdx];
      if (expectedRecordIdx >= this._fields.length) {
        type.decodeValue(b2, type);
        actualRecordIdx++;
        continue;
      }
      const [expectKey, expectType] = this._fields[expectedRecordIdx];
      const expectedId = idlLabelToId(this._fields[expectedRecordIdx][0]);
      const actualId = idlLabelToId(hash2);
      if (expectedId === actualId) {
        x2[expectKey] = expectType.decodeValue(b2, type);
        expectedRecordIdx++;
        actualRecordIdx++;
      } else if (actualId > expectedId) {
        if (expectType instanceof OptClass || expectType instanceof ReservedClass) {
          x2[expectKey] = [];
          expectedRecordIdx++;
        } else {
          throw new Error("Cannot find required field " + expectKey);
        }
      } else {
        type.decodeValue(b2, type);
        actualRecordIdx++;
      }
    }
    for (const [expectKey, expectType] of this._fields.slice(expectedRecordIdx)) {
      if (expectType instanceof OptClass || expectType instanceof ReservedClass) {
        x2[expectKey] = [];
      } else {
        throw new Error("Cannot find required field " + expectKey);
      }
    }
    return x2;
  }
  get name() {
    const fields = this._fields.map(([key, value]) => key + ":" + value.name);
    return `record {${fields.join("; ")}}`;
  }
  display() {
    const fields = this._fields.map(([key, value]) => key + ":" + value.display());
    return `record {${fields.join("; ")}}`;
  }
  valueToString(x2) {
    const values = this._fields.map(([key]) => x2[key]);
    const fields = zipWith(this._fields, values, ([k2, c2], d2) => k2 + "=" + c2.valueToString(d2));
    return `record {${fields.join("; ")}}`;
  }
}
class TupleClass extends RecordClass {
  constructor(_components) {
    const x2 = {};
    _components.forEach((e2, i2) => x2["_" + i2 + "_"] = e2);
    super(x2);
    this._components = _components;
  }
  accept(v2, d2) {
    return v2.visitTuple(this, this._components, d2);
  }
  covariant(x2) {
    if (Array.isArray(x2) && x2.length >= this._fields.length && this._components.every((t2, i2) => {
      try {
        return t2.covariant(x2[i2]);
      } catch (e2) {
        throw new Error(`Invalid ${this.display()} argument: 

index ${i2} -> ${e2.message}`);
      }
    }))
      return true;
    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x2)}`);
  }
  encodeValue(x2) {
    const bufs = zipWith(this._components, x2, (c2, d2) => c2.encodeValue(d2));
    return concat$1(...bufs);
  }
  decodeValue(b2, t2) {
    const tuple = this.checkType(t2);
    if (!(tuple instanceof TupleClass)) {
      throw new Error("not a tuple type");
    }
    if (tuple._components.length < this._components.length) {
      throw new Error("tuple mismatch");
    }
    const res = [];
    for (const [i2, wireType] of tuple._components.entries()) {
      if (i2 >= this._components.length) {
        wireType.decodeValue(b2, wireType);
      } else {
        res.push(this._components[i2].decodeValue(b2, wireType));
      }
    }
    return res;
  }
  display() {
    const fields = this._components.map((value) => value.display());
    return `record {${fields.join("; ")}}`;
  }
  valueToString(values) {
    const fields = zipWith(this._components, values, (c2, d2) => c2.valueToString(d2));
    return `record {${fields.join("; ")}}`;
  }
}
class VariantClass extends ConstructType {
  constructor(fields = {}) {
    super();
    this._fields = Object.entries(fields).sort((a2, b2) => idlLabelToId(a2[0]) - idlLabelToId(b2[0]));
  }
  accept(v2, d2) {
    return v2.visitVariant(this, this._fields, d2);
  }
  covariant(x2) {
    if (typeof x2 === "object" && Object.entries(x2).length === 1 && this._fields.every(([k2, v2]) => {
      try {
        return !x2.hasOwnProperty(k2) || v2.covariant(x2[k2]);
      } catch (e2) {
        throw new Error(`Invalid ${this.display()} argument: 

variant ${k2} -> ${e2.message}`);
      }
    }))
      return true;
    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x2)}`);
  }
  encodeValue(x2) {
    for (let i2 = 0; i2 < this._fields.length; i2++) {
      const [name, type] = this._fields[i2];
      if (x2.hasOwnProperty(name)) {
        const idx = lebEncode(i2);
        const buf = type.encodeValue(x2[name]);
        return concat$1(idx, buf);
      }
    }
    throw Error("Variant has no data: " + x2);
  }
  _buildTypeTableImpl(typeTable) {
    this._fields.forEach(([, type]) => {
      type.buildTypeTable(typeTable);
    });
    const opCode = slebEncode(
      -21
      /* IDLTypeIds.Variant */
    );
    const len = lebEncode(this._fields.length);
    const fields = this._fields.map(([key, value]) => concat$1(lebEncode(idlLabelToId(key)), value.encodeType(typeTable)));
    typeTable.add(this, concat$1(opCode, len, ...fields));
  }
  decodeValue(b2, t2) {
    const variant = this.checkType(t2);
    if (!(variant instanceof VariantClass)) {
      throw new Error("Not a variant type");
    }
    const idx = Number(lebDecode(b2));
    if (idx >= variant._fields.length) {
      throw Error("Invalid variant index: " + idx);
    }
    const [wireHash, wireType] = variant._fields[idx];
    for (const [key, expectType] of this._fields) {
      if (idlLabelToId(wireHash) === idlLabelToId(key)) {
        const value = expectType.decodeValue(b2, wireType);
        return { [key]: value };
      }
    }
    throw new Error("Cannot find field hash " + wireHash);
  }
  get name() {
    const fields = this._fields.map(([key, type]) => key + ":" + type.name);
    return `variant {${fields.join("; ")}}`;
  }
  display() {
    const fields = this._fields.map(([key, type]) => key + (type.name === "null" ? "" : `:${type.display()}`));
    return `variant {${fields.join("; ")}}`;
  }
  valueToString(x2) {
    for (const [name, type] of this._fields) {
      if (x2.hasOwnProperty(name)) {
        const value = type.valueToString(x2[name]);
        if (value === "null") {
          return `variant {${name}}`;
        } else {
          return `variant {${name}=${value}}`;
        }
      }
    }
    throw new Error("Variant has no data: " + x2);
  }
}
class RecClass extends ConstructType {
  constructor() {
    super(...arguments);
    this._id = RecClass._counter++;
    this._type = void 0;
  }
  accept(v2, d2) {
    if (!this._type) {
      throw Error("Recursive type uninitialized.");
    }
    return v2.visitRec(this, this._type, d2);
  }
  fill(t2) {
    this._type = t2;
  }
  getType() {
    return this._type;
  }
  covariant(x2) {
    if (this._type ? this._type.covariant(x2) : false)
      return true;
    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x2)}`);
  }
  encodeValue(x2) {
    if (!this._type) {
      throw Error("Recursive type uninitialized.");
    }
    return this._type.encodeValue(x2);
  }
  _buildTypeTableImpl(typeTable) {
    if (!this._type) {
      throw Error("Recursive type uninitialized.");
    }
    typeTable.add(this, new Uint8Array([]));
    this._type.buildTypeTable(typeTable);
    typeTable.merge(this, this._type.name);
  }
  decodeValue(b2, t2) {
    if (!this._type) {
      throw Error("Recursive type uninitialized.");
    }
    return this._type.decodeValue(b2, t2);
  }
  get name() {
    return `rec_${this._id}`;
  }
  display() {
    if (!this._type) {
      throw Error("Recursive type uninitialized.");
    }
    return `μ${this.name}.${this._type.name}`;
  }
  valueToString(x2) {
    if (!this._type) {
      throw Error("Recursive type uninitialized.");
    }
    return this._type.valueToString(x2);
  }
}
RecClass._counter = 0;
function decodePrincipalId(b2) {
  const x2 = safeReadUint8(b2);
  if (x2 !== 1) {
    throw new Error("Cannot decode principal");
  }
  const len = Number(lebDecode(b2));
  return Principal$1.fromUint8Array(new Uint8Array(safeRead(b2, len)));
}
class PrincipalClass extends PrimitiveType {
  accept(v2, d2) {
    return v2.visitPrincipal(this, d2);
  }
  covariant(x2) {
    if (x2 && x2._isPrincipal)
      return true;
    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x2)}`);
  }
  encodeValue(x2) {
    const buf = x2.toUint8Array();
    const len = lebEncode(buf.byteLength);
    return concat$1(new Uint8Array([1]), len, buf);
  }
  encodeType() {
    return slebEncode(
      -24
      /* IDLTypeIds.Principal */
    );
  }
  decodeValue(b2, t2) {
    this.checkType(t2);
    return decodePrincipalId(b2);
  }
  get name() {
    return "principal";
  }
  valueToString(x2) {
    return `${this.name} "${x2.toText()}"`;
  }
}
class FuncClass extends ConstructType {
  constructor(argTypes, retTypes, annotations = []) {
    super();
    this.argTypes = argTypes;
    this.retTypes = retTypes;
    this.annotations = annotations;
  }
  static argsToString(types2, v2) {
    if (types2.length !== v2.length) {
      throw new Error("arity mismatch");
    }
    return "(" + types2.map((t2, i2) => t2.valueToString(v2[i2])).join(", ") + ")";
  }
  accept(v2, d2) {
    return v2.visitFunc(this, d2);
  }
  covariant(x2) {
    if (Array.isArray(x2) && x2.length === 2 && x2[0] && x2[0]._isPrincipal && typeof x2[1] === "string")
      return true;
    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x2)}`);
  }
  encodeValue([principal, methodName]) {
    const buf = principal.toUint8Array();
    const len = lebEncode(buf.byteLength);
    const canister = concat$1(new Uint8Array([1]), len, buf);
    const method = new TextEncoder().encode(methodName);
    const methodLen = lebEncode(method.byteLength);
    return concat$1(new Uint8Array([1]), canister, methodLen, method);
  }
  _buildTypeTableImpl(T2) {
    this.argTypes.forEach((arg) => arg.buildTypeTable(T2));
    this.retTypes.forEach((arg) => arg.buildTypeTable(T2));
    const opCode = slebEncode(
      -22
      /* IDLTypeIds.Func */
    );
    const argLen = lebEncode(this.argTypes.length);
    const args = concat$1(...this.argTypes.map((arg) => arg.encodeType(T2)));
    const retLen = lebEncode(this.retTypes.length);
    const rets = concat$1(...this.retTypes.map((arg) => arg.encodeType(T2)));
    const annLen = lebEncode(this.annotations.length);
    const anns = concat$1(...this.annotations.map((a2) => this.encodeAnnotation(a2)));
    T2.add(this, concat$1(opCode, argLen, args, retLen, rets, annLen, anns));
  }
  decodeValue(b2) {
    const x2 = safeReadUint8(b2);
    if (x2 !== 1) {
      throw new Error("Cannot decode function reference");
    }
    const canister = decodePrincipalId(b2);
    const mLen = Number(lebDecode(b2));
    const buf = safeRead(b2, mLen);
    const decoder = new TextDecoder("utf8", { fatal: true });
    const method = decoder.decode(buf);
    return [canister, method];
  }
  get name() {
    const args = this.argTypes.map((arg) => arg.name).join(", ");
    const rets = this.retTypes.map((arg) => arg.name).join(", ");
    const annon = " " + this.annotations.join(" ");
    return `(${args}) -> (${rets})${annon}`;
  }
  valueToString([principal, str]) {
    return `func "${principal.toText()}".${str}`;
  }
  display() {
    const args = this.argTypes.map((arg) => arg.display()).join(", ");
    const rets = this.retTypes.map((arg) => arg.display()).join(", ");
    const annon = " " + this.annotations.join(" ");
    return `(${args}) → (${rets})${annon}`;
  }
  encodeAnnotation(ann) {
    if (ann === "query") {
      return new Uint8Array([1]);
    } else if (ann === "oneway") {
      return new Uint8Array([2]);
    } else if (ann === "composite_query") {
      return new Uint8Array([3]);
    } else {
      throw new Error("Illegal function annotation");
    }
  }
}
class ServiceClass extends ConstructType {
  constructor(fields) {
    super();
    this._fields = Object.entries(fields).sort((a2, b2) => {
      if (a2[0] < b2[0]) {
        return -1;
      }
      if (a2[0] > b2[0]) {
        return 1;
      }
      return 0;
    });
  }
  accept(v2, d2) {
    return v2.visitService(this, d2);
  }
  covariant(x2) {
    if (x2 && x2._isPrincipal)
      return true;
    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x2)}`);
  }
  encodeValue(x2) {
    const buf = x2.toUint8Array();
    const len = lebEncode(buf.length);
    return concat$1(new Uint8Array([1]), len, buf);
  }
  _buildTypeTableImpl(T2) {
    this._fields.forEach(([_2, func]) => func.buildTypeTable(T2));
    const opCode = slebEncode(
      -23
      /* IDLTypeIds.Service */
    );
    const len = lebEncode(this._fields.length);
    const meths = this._fields.map(([label, func]) => {
      const labelBuf = new TextEncoder().encode(label);
      const labelLen = lebEncode(labelBuf.length);
      return concat$1(labelLen, labelBuf, func.encodeType(T2));
    });
    T2.add(this, concat$1(opCode, len, ...meths));
  }
  decodeValue(b2) {
    return decodePrincipalId(b2);
  }
  get name() {
    const fields = this._fields.map(([key, value]) => key + ":" + value.name);
    return `service {${fields.join("; ")}}`;
  }
  valueToString(x2) {
    return `service "${x2.toText()}"`;
  }
}
function toReadableString(x2) {
  const str = JSON.stringify(x2, (_key, value) => typeof value === "bigint" ? `BigInt(${value})` : value);
  return str && str.length > toReadableString_max ? str.substring(0, toReadableString_max - 3) + "..." : str;
}
function encode$2(argTypes, args) {
  if (args.length < argTypes.length) {
    throw Error("Wrong number of message arguments");
  }
  const typeTable = new TypeTable();
  argTypes.forEach((t2) => t2.buildTypeTable(typeTable));
  const magic = new TextEncoder().encode(magicNumber);
  const table = typeTable.encode();
  const len = lebEncode(args.length);
  const typs = concat$1(...argTypes.map((t2) => t2.encodeType(typeTable)));
  const vals = concat$1(...zipWith(argTypes, args, (t2, x2) => {
    try {
      t2.covariant(x2);
    } catch (e2) {
      const err = new Error(e2.message + "\n\n");
      throw err;
    }
    return t2.encodeValue(x2);
  }));
  return concat$1(magic, table, len, typs, vals);
}
function decode$3(retTypes, bytes) {
  const b2 = new PipeArrayBuffer(bytes);
  if (bytes.byteLength < magicNumber.length) {
    throw new Error("Message length smaller than magic number");
  }
  const magicBuffer = safeRead(b2, magicNumber.length);
  const magic = new TextDecoder().decode(magicBuffer);
  if (magic !== magicNumber) {
    throw new Error("Wrong magic number: " + JSON.stringify(magic));
  }
  function readTypeTable(pipe) {
    const typeTable = [];
    const len = Number(lebDecode(pipe));
    for (let i2 = 0; i2 < len; i2++) {
      const ty = Number(slebDecode(pipe));
      switch (ty) {
        case -18:
        case -19: {
          const t2 = Number(slebDecode(pipe));
          typeTable.push([ty, t2]);
          break;
        }
        case -20:
        case -21: {
          const fields = [];
          let objectLength = Number(lebDecode(pipe));
          let prevHash;
          while (objectLength--) {
            const hash2 = Number(lebDecode(pipe));
            if (hash2 >= Math.pow(2, 32)) {
              throw new Error("field id out of 32-bit range");
            }
            if (typeof prevHash === "number" && prevHash >= hash2) {
              throw new Error("field id collision or not sorted");
            }
            prevHash = hash2;
            const t2 = Number(slebDecode(pipe));
            fields.push([hash2, t2]);
          }
          typeTable.push([ty, fields]);
          break;
        }
        case -22: {
          const args = [];
          let argLength = Number(lebDecode(pipe));
          while (argLength--) {
            args.push(Number(slebDecode(pipe)));
          }
          const returnValues = [];
          let returnValuesLength = Number(lebDecode(pipe));
          while (returnValuesLength--) {
            returnValues.push(Number(slebDecode(pipe)));
          }
          const annotations = [];
          let annotationLength = Number(lebDecode(pipe));
          while (annotationLength--) {
            const annotation = Number(lebDecode(pipe));
            switch (annotation) {
              case 1: {
                annotations.push("query");
                break;
              }
              case 2: {
                annotations.push("oneway");
                break;
              }
              case 3: {
                annotations.push("composite_query");
                break;
              }
              default:
                throw new Error("unknown annotation");
            }
          }
          typeTable.push([ty, [args, returnValues, annotations]]);
          break;
        }
        case -23: {
          let servLength = Number(lebDecode(pipe));
          const methods = [];
          while (servLength--) {
            const nameLength = Number(lebDecode(pipe));
            const funcName = new TextDecoder().decode(safeRead(pipe, nameLength));
            const funcType = slebDecode(pipe);
            methods.push([funcName, funcType]);
          }
          typeTable.push([ty, methods]);
          break;
        }
        default:
          throw new Error("Illegal op_code: " + ty);
      }
    }
    const rawList = [];
    const length = Number(lebDecode(pipe));
    for (let i2 = 0; i2 < length; i2++) {
      rawList.push(Number(slebDecode(pipe)));
    }
    return [typeTable, rawList];
  }
  const [rawTable, rawTypes] = readTypeTable(b2);
  if (rawTypes.length < retTypes.length) {
    throw new Error("Wrong number of return values");
  }
  const table = rawTable.map((_2) => Rec());
  function getType(t2) {
    if (t2 < -24) {
      throw new Error("future value not supported");
    }
    if (t2 < 0) {
      switch (t2) {
        case -1:
          return Null;
        case -2:
          return Bool;
        case -3:
          return Nat;
        case -4:
          return Int;
        case -5:
          return Nat8;
        case -6:
          return Nat16;
        case -7:
          return Nat32;
        case -8:
          return Nat64;
        case -9:
          return Int8;
        case -10:
          return Int16;
        case -11:
          return Int32;
        case -12:
          return Int64;
        case -13:
          return Float32;
        case -14:
          return Float64;
        case -15:
          return Text;
        case -16:
          return Reserved;
        case -17:
          return Empty;
        case -24:
          return Principal2;
        default:
          throw new Error("Illegal op_code: " + t2);
      }
    }
    if (t2 >= rawTable.length) {
      throw new Error("type index out of range");
    }
    return table[t2];
  }
  function buildType(entry) {
    switch (entry[0]) {
      case -19: {
        const ty = getType(entry[1]);
        return Vec(ty);
      }
      case -18: {
        const ty = getType(entry[1]);
        return Opt(ty);
      }
      case -20: {
        const fields = {};
        for (const [hash2, ty] of entry[1]) {
          const name = `_${hash2}_`;
          fields[name] = getType(ty);
        }
        const record = Record(fields);
        const tuple = record.tryAsTuple();
        if (Array.isArray(tuple)) {
          return Tuple(...tuple);
        } else {
          return record;
        }
      }
      case -21: {
        const fields = {};
        for (const [hash2, ty] of entry[1]) {
          const name = `_${hash2}_`;
          fields[name] = getType(ty);
        }
        return Variant(fields);
      }
      case -22: {
        const [args, returnValues, annotations] = entry[1];
        return Func(args.map((t2) => getType(t2)), returnValues.map((t2) => getType(t2)), annotations);
      }
      case -23: {
        const rec = {};
        const methods = entry[1];
        for (const [name, typeRef] of methods) {
          let type = getType(typeRef);
          if (type instanceof RecClass) {
            type = type.getType();
          }
          if (!(type instanceof FuncClass)) {
            throw new Error("Illegal service definition: services can only contain functions");
          }
          rec[name] = type;
        }
        return Service(rec);
      }
      default:
        throw new Error("Illegal op_code: " + entry[0]);
    }
  }
  rawTable.forEach((entry, i2) => {
    if (entry[0] === -22) {
      const t2 = buildType(entry);
      table[i2].fill(t2);
    }
  });
  rawTable.forEach((entry, i2) => {
    if (entry[0] !== -22) {
      const t2 = buildType(entry);
      table[i2].fill(t2);
    }
  });
  const types2 = rawTypes.map((t2) => getType(t2));
  const output = retTypes.map((t2, i2) => {
    return t2.decodeValue(b2, types2[i2]);
  });
  for (let ind = retTypes.length; ind < types2.length; ind++) {
    types2[ind].decodeValue(b2, types2[ind]);
  }
  if (b2.byteLength > 0) {
    throw new Error("decode: Left-over bytes");
  }
  return output;
}
const Empty = new EmptyClass();
const Reserved = new ReservedClass();
const Unknown = new UnknownClass();
const Bool = new BoolClass();
const Null = new NullClass();
const Text = new TextClass();
const Int = new IntClass();
const Nat = new NatClass();
const Float32 = new FloatClass(32);
const Float64 = new FloatClass(64);
const Int8 = new FixedIntClass(8);
const Int16 = new FixedIntClass(16);
const Int32 = new FixedIntClass(32);
const Int64 = new FixedIntClass(64);
const Nat8 = new FixedNatClass(8);
const Nat16 = new FixedNatClass(16);
const Nat32 = new FixedNatClass(32);
const Nat64 = new FixedNatClass(64);
const Principal2 = new PrincipalClass();
function Tuple(...types2) {
  return new TupleClass(types2);
}
function Vec(t2) {
  return new VecClass(t2);
}
function Opt(t2) {
  return new OptClass(t2);
}
function Record(t2) {
  return new RecordClass(t2);
}
function Variant(fields) {
  return new VariantClass(fields);
}
function Rec() {
  return new RecClass();
}
function Func(args, ret, annotations = []) {
  return new FuncClass(args, ret, annotations);
}
function Service(t2) {
  return new ServiceClass(t2);
}
const IDL = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Bool,
  BoolClass,
  ConstructType,
  Empty,
  EmptyClass,
  FixedIntClass,
  FixedNatClass,
  Float32,
  Float64,
  FloatClass,
  Func,
  FuncClass,
  Int,
  Int16,
  Int32,
  Int64,
  Int8,
  IntClass,
  Nat,
  Nat16,
  Nat32,
  Nat64,
  Nat8,
  NatClass,
  Null,
  NullClass,
  Opt,
  OptClass,
  PrimitiveType,
  Principal: Principal2,
  PrincipalClass,
  Rec,
  RecClass,
  Record,
  RecordClass,
  Reserved,
  ReservedClass,
  Service,
  ServiceClass,
  Text,
  TextClass,
  Tuple,
  TupleClass,
  Type,
  Unknown,
  UnknownClass,
  Variant,
  VariantClass,
  Vec,
  VecClass,
  Visitor,
  decode: decode$3,
  encode: encode$2
}, Symbol.toStringTag, { value: "Module" }));
function concat(...buffers) {
  const result = new Uint8Array(buffers.reduce((acc, curr) => acc + curr.byteLength, 0));
  let index2 = 0;
  for (const b2 of buffers) {
    result.set(new Uint8Array(b2), index2);
    index2 += b2.byteLength;
  }
  return result.buffer;
}
function toHex(buffer2) {
  return [...new Uint8Array(buffer2)].map((x2) => x2.toString(16).padStart(2, "0")).join("");
}
const hexRe = new RegExp(/^([0-9A-F]{2})*$/i);
function fromHex(hex) {
  if (!hexRe.test(hex)) {
    throw new Error("Invalid hexadecimal string.");
  }
  const buffer2 = [...hex].reduce((acc, curr, i2) => {
    acc[i2 / 2 | 0] = (acc[i2 / 2 | 0] || "") + curr;
    return acc;
  }, []).map((x2) => Number.parseInt(x2, 16));
  return new Uint8Array(buffer2).buffer;
}
function compare(b1, b2) {
  if (b1.byteLength !== b2.byteLength) {
    return b1.byteLength - b2.byteLength;
  }
  const u1 = new Uint8Array(b1);
  const u2 = new Uint8Array(b2);
  for (let i2 = 0; i2 < u1.length; i2++) {
    if (u1[i2] !== u2[i2]) {
      return u1[i2] - u2[i2];
    }
  }
  return 0;
}
function bufEquals(b1, b2) {
  return compare(b1, b2) === 0;
}
function uint8ToBuf(arr) {
  return new DataView(arr.buffer, arr.byteOffset, arr.byteLength).buffer;
}
function hash(data2) {
  return uint8ToBuf(sha256.create().update(new Uint8Array(data2)).digest());
}
function hashValue(value) {
  if (value instanceof borc.Tagged) {
    return hashValue(value.value);
  } else if (typeof value === "string") {
    return hashString(value);
  } else if (typeof value === "number") {
    return hash(lebEncode(value));
  } else if (value instanceof ArrayBuffer || ArrayBuffer.isView(value)) {
    return hash(value);
  } else if (Array.isArray(value)) {
    const vals = value.map(hashValue);
    return hash(concat(...vals));
  } else if (value && typeof value === "object" && value._isPrincipal) {
    return hash(value.toUint8Array());
  } else if (typeof value === "object" && value !== null && typeof value.toHash === "function") {
    return hashValue(value.toHash());
  } else if (typeof value === "object") {
    return hashOfMap(value);
  } else if (typeof value === "bigint") {
    return hash(lebEncode(value));
  }
  throw Object.assign(new Error(`Attempt to hash a value of unsupported type: ${value}`), {
    // include so logs/callers can understand the confusing value.
    // (when stringified in error message, prototype info is lost)
    value
  });
}
const hashString = (value) => {
  const encoded = new TextEncoder().encode(value);
  return hash(encoded);
};
function requestIdOf(request2) {
  return hashOfMap(request2);
}
function hashOfMap(map) {
  const hashed = Object.entries(map).filter(([, value]) => value !== void 0).map(([key, value]) => {
    const hashedKey = hashString(key);
    const hashedValue = hashValue(value);
    return [hashedKey, hashedValue];
  });
  const traversed = hashed;
  const sorted = traversed.sort(([k1], [k2]) => {
    return compare(k1, k2);
  });
  const concatenated = concat(...sorted.map((x2) => concat(...x2)));
  const result = hash(concatenated);
  return result;
}
(function(s2, e2) {
  var t2 = {};
  for (var p2 in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
});
new TextEncoder().encode("\nic-request");
class AnonymousIdentity {
  getPrincipal() {
    return Principal$1.anonymous();
  }
  async transformRequest(request2) {
    return Object.assign(Object.assign({}, request2), { body: { content: request2.body } });
  }
}
class PrincipalEncoder {
  get name() {
    return "Principal";
  }
  get priority() {
    return 0;
  }
  match(value) {
    return value && value._isPrincipal === true;
  }
  encode(v2) {
    return src$1.value.bytes(v2.toUint8Array());
  }
}
class BufferEncoder {
  get name() {
    return "Buffer";
  }
  get priority() {
    return 1;
  }
  match(value) {
    return value instanceof ArrayBuffer || ArrayBuffer.isView(value);
  }
  encode(v2) {
    return src$1.value.bytes(new Uint8Array(v2));
  }
}
class BigIntEncoder {
  get name() {
    return "BigInt";
  }
  get priority() {
    return 1;
  }
  match(value) {
    return typeof value === `bigint`;
  }
  encode(v2) {
    if (v2 > BigInt(0)) {
      return src$1.value.tagged(2, src$1.value.bytes(fromHex(v2.toString(16))));
    } else {
      return src$1.value.tagged(3, src$1.value.bytes(fromHex((BigInt("-1") * v2).toString(16))));
    }
  }
}
const serializer = src$1.SelfDescribeCborSerializer.withDefaultEncoders(true);
serializer.addEncoder(new PrincipalEncoder());
serializer.addEncoder(new BufferEncoder());
serializer.addEncoder(new BigIntEncoder());
var CborTag;
(function(CborTag2) {
  CborTag2[CborTag2["Uint64LittleEndian"] = 71] = "Uint64LittleEndian";
  CborTag2[CborTag2["Semantic"] = 55799] = "Semantic";
})(CborTag || (CborTag = {}));
function encode$1(value) {
  return serializer.serialize(value);
}
function decodePositiveBigInt(buf) {
  const len = buf.byteLength;
  let res = BigInt(0);
  for (let i2 = 0; i2 < len; i2++) {
    res = res * BigInt(256) + BigInt(buf[i2]);
  }
  return res;
}
class Uint8ArrayDecoder extends borc.Decoder {
  createByteString(raw) {
    return concat(...raw);
  }
  createByteStringFromHeap(start, end) {
    if (start === end) {
      return new ArrayBuffer(0);
    }
    return new Uint8Array(this._heap.slice(start, end));
  }
}
function decode$2(input) {
  const buffer2 = new Uint8Array(input);
  const decoder = new Uint8ArrayDecoder({
    size: buffer2.byteLength,
    tags: {
      // Override tags 2 and 3 for BigInt support (borc supports only BigNumber).
      2: (val) => decodePositiveBigInt(val),
      3: (val) => -decodePositiveBigInt(val),
      [CborTag.Semantic]: (value) => value
    }
  });
  return decoder.decodeFirst(buffer2);
}
const randomNumber = () => {
  if (typeof window !== "undefined" && !!window.crypto && !!window.crypto.getRandomValues) {
    const array = new Uint32Array(1);
    window.crypto.getRandomValues(array);
    return array[0];
  }
  if (typeof crypto !== "undefined" && crypto.getRandomValues) {
    const array = new Uint32Array(1);
    crypto.getRandomValues(array);
    return array[0];
  }
  if (typeof crypto !== "undefined" && crypto.randomInt) {
    return crypto.randomInt(0, 4294967295);
  }
  return Math.floor(Math.random() * 4294967295);
};
var SubmitRequestType;
(function(SubmitRequestType2) {
  SubmitRequestType2["Call"] = "call";
})(SubmitRequestType || (SubmitRequestType = {}));
function makeNonce() {
  const buffer2 = new ArrayBuffer(16);
  const view = new DataView(buffer2);
  const rand1 = randomNumber();
  const rand2 = randomNumber();
  const rand3 = randomNumber();
  const rand4 = randomNumber();
  view.setUint32(0, rand1);
  view.setUint32(4, rand2);
  view.setUint32(8, rand3);
  view.setUint32(12, rand4);
  return buffer2;
}
const NANOSECONDS_PER_MILLISECONDS = BigInt(1e6);
const REPLICA_PERMITTED_DRIFT_MILLISECONDS = 60 * 1e3;
class Expiry {
  constructor(deltaInMSec) {
    const raw_value = BigInt(Math.floor(Date.now() + deltaInMSec - REPLICA_PERMITTED_DRIFT_MILLISECONDS)) * NANOSECONDS_PER_MILLISECONDS;
    const ingress_as_seconds = raw_value / BigInt(1e9);
    const ingress_as_minutes = ingress_as_seconds / BigInt(60);
    const rounded_down_nanos = ingress_as_minutes * BigInt(60) * BigInt(1e9);
    this._value = rounded_down_nanos;
  }
  toCBOR() {
    return src$1.value.u64(this._value.toString(16), 16);
  }
  toHash() {
    return lebEncode(this._value);
  }
}
function makeNonceTransform(nonceFn = makeNonce) {
  return async (request2) => {
    const headers = request2.request.headers;
    request2.request.headers = headers;
    if (request2.endpoint === "call") {
      request2.body.nonce = nonceFn();
    }
  };
}
function httpHeadersTransform(headers) {
  const headerFields = [];
  headers.forEach((value, key) => {
    headerFields.push([key, value]);
  });
  return headerFields;
}
class AgentHTTPResponseError extends Error {
  constructor(message, response) {
    super(message);
    this.response = response;
    this.name = this.constructor.name;
    Object.setPrototypeOf(this, new.target.prototype);
  }
}
var decode$1;
(function() {
  var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  var lookup = new Uint8Array(256);
  for (var i2 = 0; i2 < chars.length; i2++) {
    lookup[chars.charCodeAt(i2)] = i2;
  }
  decode$1 = function(base64) {
    var bufferLength = base64.length * 0.75, len = base64.length, i3, p2 = 0, encoded1, encoded2, encoded3, encoded4;
    if (base64[base64.length - 1] === "=") {
      bufferLength--;
      if (base64[base64.length - 2] === "=") {
        bufferLength--;
      }
    }
    var arraybuffer = new ArrayBuffer(bufferLength), bytes = new Uint8Array(arraybuffer);
    for (i3 = 0; i3 < len; i3 += 4) {
      encoded1 = lookup[base64.charCodeAt(i3)];
      encoded2 = lookup[base64.charCodeAt(i3 + 1)];
      encoded3 = lookup[base64.charCodeAt(i3 + 2)];
      encoded4 = lookup[base64.charCodeAt(i3 + 3)];
      bytes[p2++] = encoded1 << 2 | encoded2 >> 4;
      bytes[p2++] = (encoded2 & 15) << 4 | encoded3 >> 2;
      bytes[p2++] = (encoded3 & 3) << 6 | encoded4 & 63;
    }
    return arraybuffer;
  };
})();
const wasmBytesBase64 = ``;
let wasm;
const wasmBytes = decode$1(wasmBytesBase64);
function bls_init() {
  let ret = wasm.bls_init();
  return ret;
}
let cachegetUint8Memory0 = null;
function getUint8Memory0() {
  if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {
    cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);
  }
  return cachegetUint8Memory0;
}
function passArray8ToWasm0(arg, malloc) {
  const ptr = malloc(arg.length * 1);
  getUint8Memory0().set(arg, ptr / 1);
  return [ptr, arg.length];
}
function bls_verify(sig, m2, w2) {
  const [ptr0, len0] = passArray8ToWasm0(sig, wasm.__wbindgen_malloc);
  const [ptr1, len1] = passArray8ToWasm0(m2, wasm.__wbindgen_malloc);
  const [ptr2, len2] = passArray8ToWasm0(w2, wasm.__wbindgen_malloc);
  const ret = wasm.bls_verify(ptr0, len0, ptr1, len1, ptr2, len2);
  return ret;
}
async function load(module, imports) {
  if (typeof Response === "function" && module instanceof Response) {
    const bytes = await module.arrayBuffer();
    return await WebAssembly.instantiate(bytes, imports);
  } else {
    const instance = await WebAssembly.instantiate(module, imports);
    if (instance instanceof WebAssembly.Instance) {
      return { instance, module };
    } else {
      return instance;
    }
  }
}
async function init() {
  const imports = {};
  const { instance, module } = await load(wasmBytes, imports);
  wasm = instance.exports;
  init.__wbindgen_wasm_module = module;
  return wasm;
}
let verify;
async function blsVerify(pk, sig, msg) {
  if (!verify) {
    await init();
    if (bls_init() !== 0) {
      throw new Error("Cannot initialize BLS");
    }
    verify = (pk1, sig1, msg1) => {
      return bls_verify(sig1, msg1, pk1) === 0;
    };
  }
  return verify(pk, sig, msg);
}
const decodeLeb128 = (buf) => {
  return lebDecode(new PipeArrayBuffer(buf));
};
const decodeTime = (buf) => {
  const decoded = decodeLeb128(buf);
  return new Date(Number(decoded) / 1e6);
};
class CertificateVerificationError extends AgentError {
  constructor(reason) {
    super(`Invalid certificate: ${reason}`);
  }
}
const NodeId = {
  Empty: 0,
  Fork: 1,
  Labeled: 2,
  Leaf: 3,
  Pruned: 4
};
function isBufferEqual(a2, b2) {
  if (a2.byteLength !== b2.byteLength) {
    return false;
  }
  const a8 = new Uint8Array(a2);
  const b8 = new Uint8Array(b2);
  for (let i2 = 0; i2 < a8.length; i2++) {
    if (a8[i2] !== b8[i2]) {
      return false;
    }
  }
  return true;
}
class Certificate {
  constructor(certificate, _rootKey, _canisterId, _blsVerify, _maxAgeInMinutes = 5) {
    this._rootKey = _rootKey;
    this._canisterId = _canisterId;
    this._blsVerify = _blsVerify;
    this._maxAgeInMinutes = _maxAgeInMinutes;
    this.cert = decode$2(new Uint8Array(certificate));
  }
  /**
   * Create a new instance of a certificate, automatically verifying it. Throws a
   * CertificateVerificationError if the certificate cannot be verified.
   * @constructs  Certificate
   * @param {CreateCertificateOptions} options {@link CreateCertificateOptions}
   * @param {ArrayBuffer} options.certificate The bytes of the certificate
   * @param {ArrayBuffer} options.rootKey The root key to verify against
   * @param {Principal} options.canisterId The effective or signing canister ID
   * @param {number} options.maxAgeInMinutes The maximum age of the certificate in minutes. Default is 5 minutes.
   * @throws {CertificateVerificationError}
   */
  static async create(options) {
    let blsVerify$1 = options.blsVerify;
    if (!blsVerify$1) {
      blsVerify$1 = blsVerify;
    }
    const cert = new Certificate(options.certificate, options.rootKey, options.canisterId, blsVerify$1, options.maxAgeInMinutes);
    await cert.verify();
    return cert;
  }
  lookup(path2) {
    return lookupResultToBuffer(lookup_path(path2, this.cert.tree));
  }
  lookup_label(label) {
    return this.lookup([label]);
  }
  async verify() {
    const rootHash = await reconstruct(this.cert.tree);
    const derKey = await this._checkDelegationAndGetKey(this.cert.delegation);
    const sig = this.cert.signature;
    const key = extractDER(derKey);
    const msg = concat(domain_sep("ic-state-root"), rootHash);
    let sigVer = false;
    const lookupTime = this.lookup(["time"]);
    if (!lookupTime) {
      throw new CertificateVerificationError("Certificate does not contain a time");
    }
    const FIVE_MINUTES_IN_MSEC2 = 5 * 60 * 1e3;
    const MAX_AGE_IN_MSEC = this._maxAgeInMinutes * 60 * 1e3;
    const now = Date.now();
    const earliestCertificateTime = now - MAX_AGE_IN_MSEC;
    const fiveMinutesFromNow = now + FIVE_MINUTES_IN_MSEC2;
    const certTime = decodeTime(lookupTime);
    if (certTime.getTime() < earliestCertificateTime) {
      throw new CertificateVerificationError(`Certificate is signed more than ${this._maxAgeInMinutes} minutes in the past. Certificate time: ` + certTime.toISOString() + " Current time: " + new Date(now).toISOString());
    } else if (certTime.getTime() > fiveMinutesFromNow) {
      throw new CertificateVerificationError("Certificate is signed more than 5 minutes in the future. Certificate time: " + certTime.toISOString() + " Current time: " + new Date(now).toISOString());
    }
    try {
      sigVer = await this._blsVerify(new Uint8Array(key), new Uint8Array(sig), new Uint8Array(msg));
    } catch (err) {
      sigVer = false;
    }
    if (!sigVer) {
      throw new CertificateVerificationError("Signature verification failed");
    }
  }
  async _checkDelegationAndGetKey(d2) {
    if (!d2) {
      return this._rootKey;
    }
    const cert = await Certificate.create({
      certificate: d2.certificate,
      rootKey: this._rootKey,
      canisterId: this._canisterId,
      blsVerify: this._blsVerify,
      // Do not check max age for delegation certificates
      maxAgeInMinutes: Infinity
    });
    const canisterInRange = check_canister_ranges({
      canisterId: this._canisterId,
      subnetId: Principal$1.fromUint8Array(new Uint8Array(d2.subnet_id)),
      tree: cert.cert.tree
    });
    if (!canisterInRange) {
      throw new CertificateVerificationError(`Canister ${this._canisterId} not in range of delegations for subnet 0x${toHex(d2.subnet_id)}`);
    }
    const publicKeyLookup = cert.lookup(["subnet", d2.subnet_id, "public_key"]);
    if (!publicKeyLookup) {
      throw new Error(`Could not find subnet key for subnet 0x${toHex(d2.subnet_id)}`);
    }
    return publicKeyLookup;
  }
}
const DER_PREFIX = fromHex("308182301d060d2b0601040182dc7c0503010201060c2b0601040182dc7c05030201036100");
const KEY_LENGTH = 96;
function extractDER(buf) {
  const expectedLength = DER_PREFIX.byteLength + KEY_LENGTH;
  if (buf.byteLength !== expectedLength) {
    throw new TypeError(`BLS DER-encoded public key must be ${expectedLength} bytes long`);
  }
  const prefix = buf.slice(0, DER_PREFIX.byteLength);
  if (!isBufferEqual(prefix, DER_PREFIX)) {
    throw new TypeError(`BLS DER-encoded public key is invalid. Expect the following prefix: ${DER_PREFIX}, but get ${prefix}`);
  }
  return buf.slice(DER_PREFIX.byteLength);
}
function lookupResultToBuffer(result) {
  if (result instanceof ArrayBuffer) {
    return result;
  } else if (result instanceof Uint8Array) {
    return result.buffer;
  }
  return void 0;
}
async function reconstruct(t2) {
  switch (t2[0]) {
    case NodeId.Empty:
      return hash(domain_sep("ic-hashtree-empty"));
    case NodeId.Pruned:
      return t2[1];
    case NodeId.Leaf:
      return hash(concat(domain_sep("ic-hashtree-leaf"), t2[1]));
    case NodeId.Labeled:
      return hash(concat(domain_sep("ic-hashtree-labeled"), t2[1], await reconstruct(t2[2])));
    case NodeId.Fork:
      return hash(concat(domain_sep("ic-hashtree-fork"), await reconstruct(t2[1]), await reconstruct(t2[2])));
    default:
      throw new Error("unreachable");
  }
}
function domain_sep(s2) {
  const len = new Uint8Array([s2.length]);
  const str = new TextEncoder().encode(s2);
  return concat(len, str);
}
function lookup_path(path2, tree) {
  if (path2.length === 0) {
    switch (tree[0]) {
      case NodeId.Leaf: {
        if (!tree[1])
          throw new Error("Invalid tree structure for leaf");
        if (tree[1] instanceof ArrayBuffer) {
          return tree[1];
        } else if (tree[1] instanceof Uint8Array) {
          return tree[1].buffer;
        } else
          return tree[1];
      }
      case NodeId.Fork: {
        return tree;
      }
      default: {
        return tree;
      }
    }
  }
  const label = typeof path2[0] === "string" ? new TextEncoder().encode(path2[0]) : path2[0];
  const t2 = find_label(label, flatten_forks(tree));
  if (t2) {
    return lookup_path(path2.slice(1), t2);
  }
}
function flatten_forks(t2) {
  switch (t2[0]) {
    case NodeId.Empty:
      return [];
    case NodeId.Fork:
      return flatten_forks(t2[1]).concat(flatten_forks(t2[2]));
    default:
      return [t2];
  }
}
function find_label(l2, trees) {
  if (trees.length === 0) {
    return void 0;
  }
  for (const t2 of trees) {
    if (t2[0] === NodeId.Labeled) {
      const p2 = t2[1];
      if (isBufferEqual(l2, p2)) {
        return t2[2];
      }
    }
  }
}
function check_canister_ranges(params) {
  const { canisterId, subnetId, tree } = params;
  const rangeLookup = lookup_path(["subnet", subnetId.toUint8Array(), "canister_ranges"], tree);
  if (!rangeLookup || !(rangeLookup instanceof ArrayBuffer)) {
    throw new Error(`Could not find canister ranges for subnet ${subnetId}`);
  }
  const ranges_arr = decode$2(rangeLookup);
  const ranges = ranges_arr.map((v2) => [
    Principal$1.fromUint8Array(v2[0]),
    Principal$1.fromUint8Array(v2[1])
  ]);
  const canisterInRange = ranges.some((r2) => r2[0].ltEq(canisterId) && r2[1].gtEq(canisterId));
  return canisterInRange;
}
const request = async (options) => {
  const { agent: agent2, paths } = options;
  const canisterId = Principal$1.from(options.canisterId);
  const uniquePaths = [...new Set(paths)];
  const encodedPaths = uniquePaths.map((path2) => {
    return encodePath(path2, canisterId);
  });
  const status = /* @__PURE__ */ new Map();
  const promises = uniquePaths.map((path2, index2) => {
    return (async () => {
      var _a2;
      try {
        const response = await agent2.readState(canisterId, {
          paths: [encodedPaths[index2]]
        });
        const cert = await Certificate.create({
          certificate: response.certificate,
          rootKey: agent2.rootKey,
          canisterId
        });
        const lookup = (cert2, path4) => {
          if (path4 === "subnet") {
            const data3 = fetchNodeKeys(response.certificate, canisterId, agent2.rootKey);
            return {
              path: path4,
              data: data3
            };
          } else {
            return {
              path: path4,
              data: lookupResultToBuffer(cert2.lookup(encodePath(path4, canisterId)))
            };
          }
        };
        const { path: path3, data: data2 } = lookup(cert, uniquePaths[index2]);
        if (!data2) {
          console.warn(`Expected to find result for path ${path3}, but instead found nothing.`);
          if (typeof path3 === "string") {
            status.set(path3, null);
          } else {
            status.set(path3.key, null);
          }
        } else {
          switch (path3) {
            case "time": {
              status.set(path3, decodeTime(data2));
              break;
            }
            case "controllers": {
              status.set(path3, decodeControllers(data2));
              break;
            }
            case "module_hash": {
              status.set(path3, decodeHex(data2));
              break;
            }
            case "subnet": {
              status.set(path3, data2);
              break;
            }
            case "candid": {
              status.set(path3, new TextDecoder().decode(data2));
              break;
            }
            default: {
              if (typeof path3 !== "string" && "key" in path3 && "path" in path3) {
                switch (path3.decodeStrategy) {
                  case "raw":
                    status.set(path3.key, data2);
                    break;
                  case "leb128": {
                    status.set(path3.key, decodeLeb128(data2));
                    break;
                  }
                  case "cbor": {
                    status.set(path3.key, decodeCbor(data2));
                    break;
                  }
                  case "hex": {
                    status.set(path3.key, decodeHex(data2));
                    break;
                  }
                  case "utf-8": {
                    status.set(path3.key, decodeUtf8(data2));
                  }
                }
              }
            }
          }
        }
      } catch (error2) {
        if ((_a2 = error2 === null || error2 === void 0 ? void 0 : error2.message) === null || _a2 === void 0 ? void 0 : _a2.includes("Invalid certificate")) {
          throw new AgentError(error2.message);
        }
        if (typeof path2 !== "string" && "key" in path2 && "path" in path2) {
          status.set(path2.key, null);
        } else {
          status.set(path2, null);
        }
        console.group();
        console.warn(`Expected to find result for path ${path2}, but instead found nothing.`);
        console.warn(error2);
        console.groupEnd();
      }
    })();
  });
  await Promise.all(promises);
  return status;
};
const fetchNodeKeys = (certificate, canisterId, root_key) => {
  if (!canisterId._isPrincipal) {
    throw new Error("Invalid canisterId");
  }
  const cert = decode$2(new Uint8Array(certificate));
  const tree = cert.tree;
  let delegation = cert.delegation;
  let subnetId;
  if (delegation && delegation.subnet_id) {
    subnetId = Principal$1.fromUint8Array(new Uint8Array(delegation.subnet_id));
  } else if (!delegation && typeof root_key !== "undefined") {
    subnetId = Principal$1.selfAuthenticating(new Uint8Array(root_key));
    delegation = {
      subnet_id: subnetId.toUint8Array(),
      certificate: new ArrayBuffer(0)
    };
  } else {
    subnetId = Principal$1.selfAuthenticating(Principal$1.fromText("tdb26-jop6k-aogll-7ltgs-eruif-6kk7m-qpktf-gdiqx-mxtrf-vb5e6-eqe").toUint8Array());
    delegation = {
      subnet_id: subnetId.toUint8Array(),
      certificate: new ArrayBuffer(0)
    };
  }
  const canisterInRange = check_canister_ranges({ canisterId, subnetId, tree });
  if (!canisterInRange) {
    throw new Error("Canister not in range");
  }
  const nodeTree = lookup_path(["subnet", delegation === null || delegation === void 0 ? void 0 : delegation.subnet_id, "node"], tree);
  const nodeForks = flatten_forks(nodeTree);
  nodeForks.length;
  const nodeKeys = /* @__PURE__ */ new Map();
  nodeForks.forEach((fork) => {
    Object.getPrototypeOf(new Uint8Array(fork[1]));
    const node_id = Principal$1.from(new Uint8Array(fork[1])).toText();
    const derEncodedPublicKey = lookup_path(["public_key"], fork[2]);
    if (derEncodedPublicKey.byteLength !== 44) {
      throw new Error("Invalid public key length");
    } else {
      nodeKeys.set(node_id, derEncodedPublicKey);
    }
  });
  return {
    subnetId: Principal$1.fromUint8Array(new Uint8Array(delegation.subnet_id)).toText(),
    nodeKeys
  };
};
const encodePath = (path2, canisterId) => {
  const encoder = new TextEncoder();
  const encode2 = (arg) => {
    return new DataView(encoder.encode(arg).buffer).buffer;
  };
  const canisterBuffer = new DataView(canisterId.toUint8Array().buffer).buffer;
  switch (path2) {
    case "time":
      return [encode2("time")];
    case "controllers":
      return [encode2("canister"), canisterBuffer, encode2("controllers")];
    case "module_hash":
      return [encode2("canister"), canisterBuffer, encode2("module_hash")];
    case "subnet":
      return [encode2("subnet")];
    case "candid":
      return [encode2("canister"), canisterBuffer, encode2("metadata"), encode2("candid:service")];
    default: {
      if ("key" in path2 && "path" in path2) {
        if (typeof path2["path"] === "string" || path2["path"] instanceof ArrayBuffer) {
          const metaPath = path2.path;
          const encoded = typeof metaPath === "string" ? encode2(metaPath) : metaPath;
          return [encode2("canister"), canisterBuffer, encode2("metadata"), encoded];
        } else {
          return path2["path"];
        }
      }
    }
  }
  throw new Error(`An unexpeected error was encountered while encoding your path for canister status. Please ensure that your path, ${path2} was formatted correctly.`);
};
const decodeHex = (buf) => {
  return toHex(buf);
};
const decodeCbor = (buf) => {
  return decode$2(buf);
};
const decodeUtf8 = (buf) => {
  return new TextDecoder().decode(buf);
};
const decodeControllers = (buf) => {
  const controllersRaw = decodeCbor(buf);
  return controllersRaw.map((buf2) => {
    return Principal$1.fromUint8Array(new Uint8Array(buf2));
  });
};
const index = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  encodePath,
  fetchNodeKeys,
  request
}, Symbol.toStringTag, { value: "Module" }));
var __classPrivateFieldSet$2 = function(receiver, state2, value, kind, f2) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f2)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state2 === "function" ? receiver !== state2 || !f2 : !state2.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f2.call(receiver, value) : f2 ? f2.value = value : state2.set(receiver, value), value;
};
var __classPrivateFieldGet$3 = function(receiver, state2, kind, f2) {
  if (kind === "a" && !f2)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state2 === "function" ? receiver !== state2 || !f2 : !state2.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state2.get(receiver);
};
var _ExpirableMap_inner, _ExpirableMap_expirationTime, _a, _b;
class ExpirableMap {
  /**
   * Create a new ExpirableMap.
   * @param {ExpirableMapOptions<any, any>} options - options for the map.
   * @param {Iterable<[any, any]>} options.source - an optional source of entries to initialize the map with.
   * @param {number} options.expirationTime - the time in milliseconds after which entries will expire.
   */
  constructor(options = {}) {
    _ExpirableMap_inner.set(this, void 0);
    _ExpirableMap_expirationTime.set(this, void 0);
    this[_a] = this.entries.bind(this);
    this[_b] = "ExpirableMap";
    const { source = [], expirationTime = 10 * 60 * 1e3 } = options;
    const currentTime = Date.now();
    __classPrivateFieldSet$2(this, _ExpirableMap_inner, new Map([...source].map(([key, value]) => [key, { value, timestamp: currentTime }])), "f");
    __classPrivateFieldSet$2(this, _ExpirableMap_expirationTime, expirationTime, "f");
  }
  /**
   * Prune removes all expired entries.
   */
  prune() {
    const currentTime = Date.now();
    for (const [key, entry] of __classPrivateFieldGet$3(this, _ExpirableMap_inner, "f").entries()) {
      if (currentTime - entry.timestamp > __classPrivateFieldGet$3(this, _ExpirableMap_expirationTime, "f")) {
        __classPrivateFieldGet$3(this, _ExpirableMap_inner, "f").delete(key);
      }
    }
    return this;
  }
  // Implementing the Map interface
  /**
   * Set the value for the given key. Prunes expired entries.
   * @param key for the entry
   * @param value of the entry
   * @returns this
   */
  set(key, value) {
    this.prune();
    const entry = {
      value,
      timestamp: Date.now()
    };
    __classPrivateFieldGet$3(this, _ExpirableMap_inner, "f").set(key, entry);
    return this;
  }
  /**
   * Get the value associated with the key, if it exists and has not expired.
   * @param key K
   * @returns the value associated with the key, or undefined if the key is not present or has expired.
   */
  get(key) {
    const entry = __classPrivateFieldGet$3(this, _ExpirableMap_inner, "f").get(key);
    if (entry === void 0) {
      return void 0;
    }
    if (Date.now() - entry.timestamp > __classPrivateFieldGet$3(this, _ExpirableMap_expirationTime, "f")) {
      __classPrivateFieldGet$3(this, _ExpirableMap_inner, "f").delete(key);
      return void 0;
    }
    return entry.value;
  }
  /**
   * Clear all entries.
   */
  clear() {
    __classPrivateFieldGet$3(this, _ExpirableMap_inner, "f").clear();
  }
  /**
   * Entries returns the entries of the map, without the expiration time.
   * @returns an iterator over the entries of the map.
   */
  entries() {
    const iterator = __classPrivateFieldGet$3(this, _ExpirableMap_inner, "f").entries();
    const generator = function* () {
      for (const [key, value] of iterator) {
        yield [key, value.value];
      }
    };
    return generator();
  }
  /**
   * Values returns the values of the map, without the expiration time.
   * @returns an iterator over the values of the map.
   */
  values() {
    const iterator = __classPrivateFieldGet$3(this, _ExpirableMap_inner, "f").values();
    const generator = function* () {
      for (const value of iterator) {
        yield value.value;
      }
    };
    return generator();
  }
  /**
   * Keys returns the keys of the map
   * @returns an iterator over the keys of the map.
   */
  keys() {
    return __classPrivateFieldGet$3(this, _ExpirableMap_inner, "f").keys();
  }
  /**
   * forEach calls the callbackfn on each entry of the map.
   * @param callbackfn to call on each entry
   * @param thisArg to use as this when calling the callbackfn
   */
  forEach(callbackfn, thisArg) {
    for (const [key, value] of __classPrivateFieldGet$3(this, _ExpirableMap_inner, "f").entries()) {
      callbackfn.call(thisArg, value.value, key, this);
    }
  }
  /**
   * has returns true if the key exists and has not expired.
   * @param key K
   * @returns true if the key exists and has not expired.
   */
  has(key) {
    return __classPrivateFieldGet$3(this, _ExpirableMap_inner, "f").has(key);
  }
  /**
   * delete the entry for the given key.
   * @param key K
   * @returns true if the key existed and has been deleted.
   */
  delete(key) {
    return __classPrivateFieldGet$3(this, _ExpirableMap_inner, "f").delete(key);
  }
  /**
   * get size of the map.
   * @returns the size of the map.
   */
  get size() {
    return __classPrivateFieldGet$3(this, _ExpirableMap_inner, "f").size;
  }
}
_ExpirableMap_inner = /* @__PURE__ */ new WeakMap(), _ExpirableMap_expirationTime = /* @__PURE__ */ new WeakMap(), _a = Symbol.iterator, _b = Symbol.toStringTag;
const encodeLenBytes = (len) => {
  if (len <= 127) {
    return 1;
  } else if (len <= 255) {
    return 2;
  } else if (len <= 65535) {
    return 3;
  } else if (len <= 16777215) {
    return 4;
  } else {
    throw new Error("Length too long (> 4 bytes)");
  }
};
const encodeLen = (buf, offset, len) => {
  if (len <= 127) {
    buf[offset] = len;
    return 1;
  } else if (len <= 255) {
    buf[offset] = 129;
    buf[offset + 1] = len;
    return 2;
  } else if (len <= 65535) {
    buf[offset] = 130;
    buf[offset + 1] = len >> 8;
    buf[offset + 2] = len;
    return 3;
  } else if (len <= 16777215) {
    buf[offset] = 131;
    buf[offset + 1] = len >> 16;
    buf[offset + 2] = len >> 8;
    buf[offset + 3] = len;
    return 4;
  } else {
    throw new Error("Length too long (> 4 bytes)");
  }
};
const decodeLenBytes = (buf, offset) => {
  if (buf[offset] < 128)
    return 1;
  if (buf[offset] === 128)
    throw new Error("Invalid length 0");
  if (buf[offset] === 129)
    return 2;
  if (buf[offset] === 130)
    return 3;
  if (buf[offset] === 131)
    return 4;
  throw new Error("Length too long (> 4 bytes)");
};
const decodeLen = (buf, offset) => {
  const lenBytes = decodeLenBytes(buf, offset);
  if (lenBytes === 1)
    return buf[offset];
  else if (lenBytes === 2)
    return buf[offset + 1];
  else if (lenBytes === 3)
    return (buf[offset + 1] << 8) + buf[offset + 2];
  else if (lenBytes === 4)
    return (buf[offset + 1] << 16) + (buf[offset + 2] << 8) + buf[offset + 3];
  throw new Error("Length too long (> 4 bytes)");
};
Uint8Array.from([
  ...[48, 12],
  ...[6, 10],
  ...[43, 6, 1, 4, 1, 131, 184, 67, 1, 1]
  // DER encoded COSE
]);
const ED25519_OID = Uint8Array.from([
  ...[48, 5],
  ...[6, 3],
  ...[43, 101, 112]
  // id-Ed25519 OID
]);
Uint8Array.from([
  ...[48, 16],
  ...[6, 7],
  ...[42, 134, 72, 206, 61, 2, 1],
  ...[6, 5],
  ...[43, 129, 4, 0, 10]
  // OID secp256k1
]);
function wrapDER(payload, oid) {
  const bitStringHeaderLength = 2 + encodeLenBytes(payload.byteLength + 1);
  const len = oid.byteLength + bitStringHeaderLength + payload.byteLength;
  let offset = 0;
  const buf = new Uint8Array(1 + encodeLenBytes(len) + len);
  buf[offset++] = 48;
  offset += encodeLen(buf, offset, len);
  buf.set(oid, offset);
  offset += oid.byteLength;
  buf[offset++] = 3;
  offset += encodeLen(buf, offset, payload.byteLength + 1);
  buf[offset++] = 0;
  buf.set(new Uint8Array(payload), offset);
  return buf;
}
const unwrapDER = (derEncoded, oid) => {
  let offset = 0;
  const expect = (n2, msg) => {
    if (buf[offset++] !== n2) {
      throw new Error("Expected: " + msg);
    }
  };
  const buf = new Uint8Array(derEncoded);
  expect(48, "sequence");
  offset += decodeLenBytes(buf, offset);
  if (!bufEquals(buf.slice(offset, offset + oid.byteLength), oid)) {
    throw new Error("Not the expected OID.");
  }
  offset += oid.byteLength;
  expect(3, "bit string");
  const payloadLen = decodeLen(buf, offset) - 1;
  offset += decodeLenBytes(buf, offset);
  expect(0, "0 padding");
  const result = buf.slice(offset);
  if (payloadLen !== result.length) {
    throw new Error(`DER payload mismatch: Expected length ${payloadLen} actual length ${result.length}`);
  }
  return result;
};
var __classPrivateFieldSet$1 = function(receiver, state2, value, kind, f2) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f2)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state2 === "function" ? receiver !== state2 || !f2 : !state2.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f2.call(receiver, value) : f2 ? f2.value = value : state2.set(receiver, value), value;
};
var __classPrivateFieldGet$2 = function(receiver, state2, kind, f2) {
  if (kind === "a" && !f2)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state2 === "function" ? receiver !== state2 || !f2 : !state2.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state2.get(receiver);
};
var _Ed25519PublicKey_rawKey, _Ed25519PublicKey_derKey;
class Ed25519PublicKey {
  // `fromRaw` and `fromDer` should be used for instantiation, not this constructor.
  constructor(key) {
    _Ed25519PublicKey_rawKey.set(this, void 0);
    _Ed25519PublicKey_derKey.set(this, void 0);
    if (key.byteLength !== Ed25519PublicKey.RAW_KEY_LENGTH) {
      throw new Error("An Ed25519 public key must be exactly 32bytes long");
    }
    __classPrivateFieldSet$1(this, _Ed25519PublicKey_rawKey, key, "f");
    __classPrivateFieldSet$1(this, _Ed25519PublicKey_derKey, Ed25519PublicKey.derEncode(key), "f");
  }
  static from(key) {
    return this.fromDer(key.toDer());
  }
  static fromRaw(rawKey) {
    return new Ed25519PublicKey(rawKey);
  }
  static fromDer(derKey) {
    return new Ed25519PublicKey(this.derDecode(derKey));
  }
  static derEncode(publicKey) {
    return wrapDER(publicKey, ED25519_OID).buffer;
  }
  static derDecode(key) {
    const unwrapped = unwrapDER(key, ED25519_OID);
    if (unwrapped.length !== this.RAW_KEY_LENGTH) {
      throw new Error("An Ed25519 public key must be exactly 32bytes long");
    }
    return unwrapped;
  }
  get rawKey() {
    return __classPrivateFieldGet$2(this, _Ed25519PublicKey_rawKey, "f");
  }
  get derKey() {
    return __classPrivateFieldGet$2(this, _Ed25519PublicKey_derKey, "f");
  }
  toDer() {
    return this.derKey;
  }
  toRaw() {
    return this.rawKey;
  }
}
_Ed25519PublicKey_rawKey = /* @__PURE__ */ new WeakMap(), _Ed25519PublicKey_derKey = /* @__PURE__ */ new WeakMap();
Ed25519PublicKey.RAW_KEY_LENGTH = 32;
var __classPrivateFieldSet = function(receiver, state2, value, kind, f2) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f2)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state2 === "function" ? receiver !== state2 || !f2 : !state2.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f2.call(receiver, value) : f2 ? f2.value = value : state2.set(receiver, value), value;
};
var __classPrivateFieldGet$1 = function(receiver, state2, kind, f2) {
  if (kind === "a" && !f2)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state2 === "function" ? receiver !== state2 || !f2 : !state2.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state2.get(receiver);
};
var _HttpAgent_queryPipeline, _HttpAgent_updatePipeline, _HttpAgent_subnetKeys, _HttpAgent_verifyQuerySignatures, _HttpAgent_verifyQueryResponse;
var RequestStatusResponseStatus;
(function(RequestStatusResponseStatus2) {
  RequestStatusResponseStatus2["Received"] = "received";
  RequestStatusResponseStatus2["Processing"] = "processing";
  RequestStatusResponseStatus2["Replied"] = "replied";
  RequestStatusResponseStatus2["Rejected"] = "rejected";
  RequestStatusResponseStatus2["Unknown"] = "unknown";
  RequestStatusResponseStatus2["Done"] = "done";
})(RequestStatusResponseStatus || (RequestStatusResponseStatus = {}));
const DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS = 5 * 60 * 1e3;
const IC_ROOT_KEY = "308182301d060d2b0601040182dc7c0503010201060c2b0601040182dc7c05030201036100814c0e6ec71fab583b08bd81373c255c3c371b2e84863c98a4f1e08b74235d14fb5d9c0cd546d9685f913a0c0b2cc5341583bf4b4392e467db96d65b9bb4cb717112f8472e0d5a4d14505ffd7484b01291091c5f87b98883463f98091a0baaae";
const IC0_DOMAIN = "ic0.app";
const IC0_SUB_DOMAIN = ".ic0.app";
const ICP0_DOMAIN = "icp0.io";
const ICP0_SUB_DOMAIN = ".icp0.io";
const ICP_API_DOMAIN = "icp-api.io";
const ICP_API_SUB_DOMAIN = ".icp-api.io";
class HttpDefaultFetchError extends AgentError {
  constructor(message) {
    super(message);
    this.message = message;
  }
}
class IdentityInvalidError extends AgentError {
  constructor(message) {
    super(message);
    this.message = message;
  }
}
function getDefaultFetch() {
  let defaultFetch;
  if (typeof window !== "undefined") {
    if (window.fetch) {
      defaultFetch = window.fetch.bind(window);
    } else {
      throw new HttpDefaultFetchError("Fetch implementation was not available. You appear to be in a browser context, but window.fetch was not present.");
    }
  } else if (typeof global !== "undefined") {
    if (global.fetch) {
      defaultFetch = global.fetch.bind(global);
    } else {
      throw new HttpDefaultFetchError("Fetch implementation was not available. You appear to be in a Node.js context, but global.fetch was not available.");
    }
  } else if (typeof self !== "undefined") {
    if (self.fetch) {
      defaultFetch = self.fetch.bind(self);
    }
  }
  if (defaultFetch) {
    return defaultFetch;
  }
  throw new HttpDefaultFetchError("Fetch implementation was not available. Please provide fetch to the HttpAgent constructor, or ensure it is available in the window or global context.");
}
class HttpAgent {
  constructor(options = {}) {
    this.rootKey = fromHex(IC_ROOT_KEY);
    this._timeDiffMsecs = 0;
    this._rootKeyFetched = false;
    this._isAgent = true;
    _HttpAgent_queryPipeline.set(this, []);
    _HttpAgent_updatePipeline.set(this, []);
    _HttpAgent_subnetKeys.set(this, new ExpirableMap({
      expirationTime: 5 * 60 * 1e3
      // 5 minutes
    }));
    _HttpAgent_verifyQuerySignatures.set(this, true);
    _HttpAgent_verifyQueryResponse.set(this, (queryResponse, subnetStatus) => {
      if (__classPrivateFieldGet$1(this, _HttpAgent_verifyQuerySignatures, "f") === false) {
        return queryResponse;
      }
      if (!subnetStatus) {
        throw new CertificateVerificationError("Invalid signature from replica signed query: no matching node key found.");
      }
      const { status, signatures = [], requestId } = queryResponse;
      const domainSeparator = new TextEncoder().encode("\vic-response");
      for (const sig of signatures) {
        const { timestamp, identity } = sig;
        const nodeId = Principal$1.fromUint8Array(identity).toText();
        let hash2;
        if (status === "replied") {
          const { reply } = queryResponse;
          hash2 = hashOfMap({
            status,
            reply,
            timestamp: BigInt(timestamp),
            request_id: requestId
          });
        } else if (status === "rejected") {
          const { reject_code, reject_message, error_code } = queryResponse;
          hash2 = hashOfMap({
            status,
            reject_code,
            reject_message,
            error_code,
            timestamp: BigInt(timestamp),
            request_id: requestId
          });
        } else {
          throw new Error(`Unknown status: ${status}`);
        }
        const separatorWithHash = concat(domainSeparator, new Uint8Array(hash2));
        const pubKey = subnetStatus === null || subnetStatus === void 0 ? void 0 : subnetStatus.nodeKeys.get(nodeId);
        if (!pubKey) {
          throw new CertificateVerificationError("Invalid signature from replica signed query: no matching node key found.");
        }
        const rawKey = Ed25519PublicKey.fromDer(pubKey).rawKey;
        const valid = ed25519.verify(sig.signature, new Uint8Array(separatorWithHash), new Uint8Array(rawKey));
        if (valid)
          return queryResponse;
        throw new CertificateVerificationError(`Invalid signature from replica ${nodeId} signed query.`);
      }
      return queryResponse;
    });
    if (options.source) {
      if (!(options.source instanceof HttpAgent)) {
        throw new Error("An Agent's source can only be another HttpAgent");
      }
      this._identity = options.source._identity;
      this._fetch = options.source._fetch;
      this._host = options.source._host;
      this._credentials = options.source._credentials;
    } else {
      this._fetch = options.fetch || getDefaultFetch() || fetch.bind(global);
      this._fetchOptions = options.fetchOptions;
      this._callOptions = options.callOptions;
    }
    if (options.host !== void 0) {
      if (!options.host.match(/^[a-z]+:/) && typeof window !== "undefined") {
        this._host = new URL(window.location.protocol + "//" + options.host);
      } else {
        this._host = new URL(options.host);
      }
    } else if (options.source !== void 0) {
      this._host = options.source._host;
    } else {
      const location2 = typeof window !== "undefined" ? window.location : void 0;
      if (!location2) {
        this._host = new URL("https://icp-api.io");
        console.warn("Could not infer host from window.location, defaulting to mainnet gateway of https://icp-api.io. Please provide a host to the HttpAgent constructor to avoid this warning.");
      }
      const knownHosts = ["ic0.app", "icp0.io", "127.0.0.1", "localhost"];
      const hostname = location2 === null || location2 === void 0 ? void 0 : location2.hostname;
      let knownHost;
      if (hostname && typeof hostname === "string") {
        knownHost = knownHosts.find((host) => hostname.endsWith(host));
      }
      if (location2 && knownHost) {
        this._host = new URL(`${location2.protocol}//${knownHost}${location2.port ? ":" + location2.port : ""}`);
      } else {
        this._host = new URL("https://icp-api.io");
        console.warn("Could not infer host from window.location, defaulting to mainnet gateway of https://icp-api.io. Please provide a host to the HttpAgent constructor to avoid this warning.");
      }
    }
    if (options.verifyQuerySignatures !== void 0) {
      __classPrivateFieldSet(this, _HttpAgent_verifyQuerySignatures, options.verifyQuerySignatures, "f");
    }
    this._retryTimes = options.retryTimes !== void 0 && options.retryTimes >= 0 ? options.retryTimes : 3;
    if (this._host.hostname.endsWith(IC0_SUB_DOMAIN)) {
      this._host.hostname = IC0_DOMAIN;
    } else if (this._host.hostname.endsWith(ICP0_SUB_DOMAIN)) {
      this._host.hostname = ICP0_DOMAIN;
    } else if (this._host.hostname.endsWith(ICP_API_SUB_DOMAIN)) {
      this._host.hostname = ICP_API_DOMAIN;
    }
    if (options.credentials) {
      const { name, password } = options.credentials;
      this._credentials = `${name}${password ? ":" + password : ""}`;
    }
    this._identity = Promise.resolve(options.identity || new AnonymousIdentity());
    this.addTransform("update", makeNonceTransform(makeNonce));
    if (options.useQueryNonces) {
      this.addTransform("query", makeNonceTransform(makeNonce));
    }
  }
  isLocal() {
    const hostname = this._host.hostname;
    return hostname === "127.0.0.1" || hostname.endsWith("127.0.0.1");
  }
  addTransform(type, fn2, priority = fn2.priority || 0) {
    if (type === "update") {
      const i2 = __classPrivateFieldGet$1(this, _HttpAgent_updatePipeline, "f").findIndex((x2) => (x2.priority || 0) < priority);
      __classPrivateFieldGet$1(this, _HttpAgent_updatePipeline, "f").splice(i2 >= 0 ? i2 : __classPrivateFieldGet$1(this, _HttpAgent_updatePipeline, "f").length, 0, Object.assign(fn2, { priority }));
    } else if (type === "query") {
      const i2 = __classPrivateFieldGet$1(this, _HttpAgent_queryPipeline, "f").findIndex((x2) => (x2.priority || 0) < priority);
      __classPrivateFieldGet$1(this, _HttpAgent_queryPipeline, "f").splice(i2 >= 0 ? i2 : __classPrivateFieldGet$1(this, _HttpAgent_queryPipeline, "f").length, 0, Object.assign(fn2, { priority }));
    }
  }
  async getPrincipal() {
    if (!this._identity) {
      throw new IdentityInvalidError("This identity has expired due this application's security policy. Please refresh your authentication.");
    }
    return (await this._identity).getPrincipal();
  }
  async call(canisterId, options, identity) {
    const id = await (identity !== void 0 ? await identity : await this._identity);
    if (!id) {
      throw new IdentityInvalidError("This identity has expired due this application's security policy. Please refresh your authentication.");
    }
    const canister = Principal$1.from(canisterId);
    const ecid = options.effectiveCanisterId ? Principal$1.from(options.effectiveCanisterId) : canister;
    const sender = id.getPrincipal() || Principal$1.anonymous();
    let ingress_expiry = new Expiry(DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS);
    if (Math.abs(this._timeDiffMsecs) > 1e3 * 30) {
      ingress_expiry = new Expiry(DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS + this._timeDiffMsecs);
    }
    const submit = {
      request_type: SubmitRequestType.Call,
      canister_id: canister,
      method_name: options.methodName,
      arg: options.arg,
      sender,
      ingress_expiry
    };
    let transformedRequest = await this._transform({
      request: {
        body: null,
        method: "POST",
        headers: Object.assign({ "Content-Type": "application/cbor" }, this._credentials ? { Authorization: "Basic " + btoa(this._credentials) } : {})
      },
      endpoint: "call",
      body: submit
    });
    transformedRequest = await id.transformRequest(transformedRequest);
    const body = encode$1(transformedRequest.body);
    const request2 = this._requestAndRetry(() => this._fetch("" + new URL(`/api/v2/canister/${ecid.toText()}/call`, this._host), Object.assign(Object.assign(Object.assign({}, this._callOptions), transformedRequest.request), { body })));
    const [response, requestId] = await Promise.all([request2, requestIdOf(submit)]);
    const responseBuffer = await response.arrayBuffer();
    const responseBody = response.status === 200 && responseBuffer.byteLength > 0 ? decode$2(responseBuffer) : null;
    return {
      requestId,
      response: {
        ok: response.ok,
        status: response.status,
        statusText: response.statusText,
        body: responseBody,
        headers: httpHeadersTransform(response.headers)
      }
    };
  }
  async _requestAndRetry(request2, tries = 0) {
    let response;
    try {
      response = await request2();
    } catch (error2) {
      if (this._retryTimes > tries) {
        console.warn(`Caught exception while attempting to make request:
  ${error2}
  Retrying request.`);
        return await this._requestAndRetry(request2, tries + 1);
      }
      throw error2;
    }
    if (response.ok) {
      return response;
    }
    const responseText = await response.clone().text();
    const errorMessage = `Server returned an error:
  Code: ${response.status} (${response.statusText})
  Body: ${responseText}
`;
    if (this._retryTimes > tries) {
      console.warn(errorMessage + `  Retrying request.`);
      return await this._requestAndRetry(request2, tries + 1);
    }
    throw new AgentHTTPResponseError(errorMessage, {
      ok: response.ok,
      status: response.status,
      statusText: response.statusText,
      headers: httpHeadersTransform(response.headers)
    });
  }
  async query(canisterId, fields, identity) {
    const makeQuery = async () => {
      const id = await (identity !== void 0 ? await identity : await this._identity);
      if (!id) {
        throw new IdentityInvalidError("This identity has expired due this application's security policy. Please refresh your authentication.");
      }
      const canister = Principal$1.from(canisterId);
      const sender = (id === null || id === void 0 ? void 0 : id.getPrincipal()) || Principal$1.anonymous();
      const request2 = {
        request_type: "query",
        canister_id: canister,
        method_name: fields.methodName,
        arg: fields.arg,
        sender,
        ingress_expiry: new Expiry(DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS)
      };
      const requestId = await requestIdOf(request2);
      let transformedRequest = await this._transform({
        request: {
          method: "POST",
          headers: Object.assign({ "Content-Type": "application/cbor" }, this._credentials ? { Authorization: "Basic " + btoa(this._credentials) } : {})
        },
        endpoint: "read",
        body: request2
      });
      transformedRequest = await (id === null || id === void 0 ? void 0 : id.transformRequest(transformedRequest));
      const body = encode$1(transformedRequest.body);
      const response = await this._requestAndRetry(() => this._fetch("" + new URL(`/api/v2/canister/${canister.toText()}/query`, this._host), Object.assign(Object.assign(Object.assign({}, this._fetchOptions), transformedRequest.request), { body })));
      const queryResponse = decode$2(await response.arrayBuffer());
      return Object.assign(Object.assign({}, queryResponse), { httpDetails: {
        ok: response.ok,
        status: response.status,
        statusText: response.statusText,
        headers: httpHeadersTransform(response.headers)
      }, requestId });
    };
    const getSubnetStatus = async () => {
      if (!__classPrivateFieldGet$1(this, _HttpAgent_verifyQuerySignatures, "f")) {
        return void 0;
      }
      const subnetStatus2 = __classPrivateFieldGet$1(this, _HttpAgent_subnetKeys, "f").get(canisterId.toString());
      if (subnetStatus2) {
        return subnetStatus2;
      }
      await this.fetchSubnetKeys(canisterId.toString());
      return __classPrivateFieldGet$1(this, _HttpAgent_subnetKeys, "f").get(canisterId.toString());
    };
    const [query, subnetStatus] = await Promise.all([makeQuery(), getSubnetStatus()]);
    if (!__classPrivateFieldGet$1(this, _HttpAgent_verifyQuerySignatures, "f")) {
      return query;
    }
    try {
      return __classPrivateFieldGet$1(this, _HttpAgent_verifyQueryResponse, "f").call(this, query, subnetStatus);
    } catch (_2) {
      console.warn("Query response verification failed. Retrying with fresh subnet keys.");
      __classPrivateFieldGet$1(this, _HttpAgent_subnetKeys, "f").delete(canisterId.toString());
      await this.fetchSubnetKeys(canisterId.toString());
      const updatedSubnetStatus = __classPrivateFieldGet$1(this, _HttpAgent_subnetKeys, "f").get(canisterId.toString());
      if (!updatedSubnetStatus) {
        throw new CertificateVerificationError("Invalid signature from replica signed query: no matching node key found.");
      }
      return __classPrivateFieldGet$1(this, _HttpAgent_verifyQueryResponse, "f").call(this, query, updatedSubnetStatus);
    }
  }
  async createReadStateRequest(fields, identity) {
    const id = await (identity !== void 0 ? await identity : await this._identity);
    if (!id) {
      throw new IdentityInvalidError("This identity has expired due this application's security policy. Please refresh your authentication.");
    }
    const sender = (id === null || id === void 0 ? void 0 : id.getPrincipal()) || Principal$1.anonymous();
    const transformedRequest = await this._transform({
      request: {
        method: "POST",
        headers: Object.assign({ "Content-Type": "application/cbor" }, this._credentials ? { Authorization: "Basic " + btoa(this._credentials) } : {})
      },
      endpoint: "read_state",
      body: {
        request_type: "read_state",
        paths: fields.paths,
        sender,
        ingress_expiry: new Expiry(DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS)
      }
    });
    return id === null || id === void 0 ? void 0 : id.transformRequest(transformedRequest);
  }
  async readState(canisterId, fields, identity, request2) {
    const canister = typeof canisterId === "string" ? Principal$1.fromText(canisterId) : canisterId;
    const transformedRequest = request2 !== null && request2 !== void 0 ? request2 : await this.createReadStateRequest(fields, identity);
    const body = encode$1(transformedRequest.body);
    const response = await this._requestAndRetry(() => this._fetch("" + new URL(`/api/v2/canister/${canister}/read_state`, this._host), Object.assign(Object.assign(Object.assign({}, this._fetchOptions), transformedRequest.request), { body })));
    if (!response.ok) {
      throw new Error(`Server returned an error:
  Code: ${response.status} (${response.statusText})
  Body: ${await response.text()}
`);
    }
    return decode$2(await response.arrayBuffer());
  }
  /**
   * Allows agent to sync its time with the network. Can be called during intialization or mid-lifecycle if the device's clock has drifted away from the network time. This is necessary to set the Expiry for a request
   * @param {Principal} canisterId - Pass a canister ID if you need to sync the time with a particular replica. Uses the management canister by default
   */
  async syncTime(canisterId) {
    const CanisterStatus = await __vitePreload(() => Promise.resolve().then(() => index), true ? void 0 : void 0);
    const callTime = Date.now();
    try {
      if (!canisterId) {
        console.log("Syncing time with the IC. No canisterId provided, so falling back to ryjl3-tyaaa-aaaaa-aaaba-cai");
      }
      const status = await CanisterStatus.request({
        // Fall back with canisterId of the ICP Ledger
        canisterId: canisterId !== null && canisterId !== void 0 ? canisterId : Principal$1.from("ryjl3-tyaaa-aaaaa-aaaba-cai"),
        agent: this,
        paths: ["time"]
      });
      const replicaTime = status.get("time");
      if (replicaTime) {
        this._timeDiffMsecs = Number(replicaTime) - Number(callTime);
      }
    } catch (error2) {
      console.error("Caught exception while attempting to sync time:", error2);
    }
  }
  async status() {
    const headers = this._credentials ? {
      Authorization: "Basic " + btoa(this._credentials)
    } : {};
    const response = await this._requestAndRetry(() => this._fetch("" + new URL(`/api/v2/status`, this._host), Object.assign({ headers }, this._fetchOptions)));
    return decode$2(await response.arrayBuffer());
  }
  async fetchRootKey() {
    if (!this._rootKeyFetched) {
      this.rootKey = (await this.status()).root_key;
      this._rootKeyFetched = true;
    }
    return this.rootKey;
  }
  invalidateIdentity() {
    this._identity = null;
  }
  replaceIdentity(identity) {
    this._identity = Promise.resolve(identity);
  }
  async fetchSubnetKeys(canisterId) {
    const effectiveCanisterId = Principal$1.from(canisterId);
    const response = await request({
      canisterId: effectiveCanisterId,
      paths: ["subnet"],
      agent: this
    });
    const subnetResponse = response.get("subnet");
    if (subnetResponse && typeof subnetResponse === "object" && "nodeKeys" in subnetResponse) {
      __classPrivateFieldGet$1(this, _HttpAgent_subnetKeys, "f").set(effectiveCanisterId.toText(), subnetResponse);
      return subnetResponse;
    }
    return void 0;
  }
  _transform(request2) {
    let p2 = Promise.resolve(request2);
    if (request2.endpoint === "call") {
      for (const fn2 of __classPrivateFieldGet$1(this, _HttpAgent_updatePipeline, "f")) {
        p2 = p2.then((r2) => fn2(r2).then((r22) => r22 || r2));
      }
    } else {
      for (const fn2 of __classPrivateFieldGet$1(this, _HttpAgent_queryPipeline, "f")) {
        p2 = p2.then((r2) => fn2(r2).then((r22) => r22 || r2));
      }
    }
    return p2;
  }
}
_HttpAgent_queryPipeline = /* @__PURE__ */ new WeakMap(), _HttpAgent_updatePipeline = /* @__PURE__ */ new WeakMap(), _HttpAgent_subnetKeys = /* @__PURE__ */ new WeakMap(), _HttpAgent_verifyQuerySignatures = /* @__PURE__ */ new WeakMap(), _HttpAgent_verifyQueryResponse = /* @__PURE__ */ new WeakMap();
var ProxyMessageKind;
(function(ProxyMessageKind2) {
  ProxyMessageKind2["Error"] = "err";
  ProxyMessageKind2["GetPrincipal"] = "gp";
  ProxyMessageKind2["GetPrincipalResponse"] = "gpr";
  ProxyMessageKind2["Query"] = "q";
  ProxyMessageKind2["QueryResponse"] = "qr";
  ProxyMessageKind2["Call"] = "c";
  ProxyMessageKind2["CallResponse"] = "cr";
  ProxyMessageKind2["ReadState"] = "rs";
  ProxyMessageKind2["ReadStateResponse"] = "rsr";
  ProxyMessageKind2["Status"] = "s";
  ProxyMessageKind2["StatusResponse"] = "sr";
})(ProxyMessageKind || (ProxyMessageKind = {}));
function getDefaultAgent() {
  const agent2 = typeof window === "undefined" ? typeof global === "undefined" ? typeof self === "undefined" ? void 0 : self.ic.agent : global.ic.agent : window.ic.agent;
  if (!agent2) {
    throw new Error("No Agent could be found.");
  }
  return agent2;
}
const FIVE_MINUTES_IN_MSEC = 5 * 60 * 1e3;
function defaultStrategy() {
  return chain(conditionalDelay(once$2(), 1e3), backoff(1e3, 1.2), timeout(FIVE_MINUTES_IN_MSEC));
}
function once$2() {
  let first = true;
  return async () => {
    if (first) {
      first = false;
      return true;
    }
    return false;
  };
}
function conditionalDelay(condition, timeInMsec) {
  return async (canisterId, requestId, status) => {
    if (await condition(canisterId, requestId, status)) {
      return new Promise((resolve2) => setTimeout(resolve2, timeInMsec));
    }
  };
}
function timeout(timeInMsec) {
  const end = Date.now() + timeInMsec;
  return async (canisterId, requestId, status) => {
    if (Date.now() > end) {
      throw new Error(`Request timed out after ${timeInMsec} msec:
  Request ID: ${toHex(requestId)}
  Request status: ${status}
`);
    }
  };
}
function backoff(startingThrottleInMsec, backoffFactor) {
  let currentThrottling = startingThrottleInMsec;
  return () => new Promise((resolve2) => setTimeout(() => {
    currentThrottling *= backoffFactor;
    resolve2();
  }, currentThrottling));
}
function chain(...strategies) {
  return async (canisterId, requestId, status) => {
    for (const a2 of strategies) {
      await a2(canisterId, requestId, status);
    }
  };
}
async function pollForResponse(agent2, canisterId, requestId, strategy, request2, blsVerify2) {
  var _a2;
  const path2 = [new TextEncoder().encode("request_status"), requestId];
  const currentRequest = request2 !== null && request2 !== void 0 ? request2 : await ((_a2 = agent2.createReadStateRequest) === null || _a2 === void 0 ? void 0 : _a2.call(agent2, { paths: [path2] }));
  const state2 = await agent2.readState(canisterId, { paths: [path2] }, void 0, currentRequest);
  if (agent2.rootKey == null)
    throw new Error("Agent root key not initialized before polling");
  const cert = await Certificate.create({
    certificate: state2.certificate,
    rootKey: agent2.rootKey,
    canisterId,
    blsVerify: blsVerify2
  });
  const maybeBuf = cert.lookup([...path2, new TextEncoder().encode("status")]);
  let status;
  if (typeof maybeBuf === "undefined") {
    status = RequestStatusResponseStatus.Unknown;
  } else {
    status = new TextDecoder().decode(maybeBuf);
  }
  switch (status) {
    case RequestStatusResponseStatus.Replied: {
      return cert.lookup([...path2, "reply"]);
    }
    case RequestStatusResponseStatus.Received:
    case RequestStatusResponseStatus.Unknown:
    case RequestStatusResponseStatus.Processing:
      await strategy(canisterId, requestId, status);
      return pollForResponse(agent2, canisterId, requestId, strategy, currentRequest);
    case RequestStatusResponseStatus.Rejected: {
      const rejectCode = new Uint8Array(cert.lookup([...path2, "reject_code"]))[0];
      const rejectMessage = new TextDecoder().decode(cert.lookup([...path2, "reject_message"]));
      throw new Error(`Call was rejected:
  Request ID: ${toHex(requestId)}
  Reject code: ${rejectCode}
  Reject text: ${rejectMessage}
`);
    }
    case RequestStatusResponseStatus.Done:
      throw new Error(`Call was marked as done but we never saw the reply:
  Request ID: ${toHex(requestId)}
`);
  }
  throw new Error("unreachable");
}
const managementCanisterIdl = ({ IDL: IDL2 }) => {
  const canister_id = IDL2.Principal;
  const definite_canister_settings = IDL2.Record({
    controllers: IDL2.Vec(IDL2.Principal),
    freezing_threshold: IDL2.Nat,
    memory_allocation: IDL2.Nat,
    compute_allocation: IDL2.Nat
  });
  const canister_settings = IDL2.Record({
    controllers: IDL2.Opt(IDL2.Vec(IDL2.Principal)),
    freezing_threshold: IDL2.Opt(IDL2.Nat),
    memory_allocation: IDL2.Opt(IDL2.Nat),
    compute_allocation: IDL2.Opt(IDL2.Nat)
  });
  const wasm_module = IDL2.Vec(IDL2.Nat8);
  return IDL2.Service({
    canister_status: IDL2.Func([IDL2.Record({ canister_id })], [
      IDL2.Record({
        status: IDL2.Variant({
          stopped: IDL2.Null,
          stopping: IDL2.Null,
          running: IDL2.Null
        }),
        memory_size: IDL2.Nat,
        cycles: IDL2.Nat,
        settings: definite_canister_settings,
        module_hash: IDL2.Opt(IDL2.Vec(IDL2.Nat8))
      })
    ], []),
    create_canister: IDL2.Func([IDL2.Record({ settings: IDL2.Opt(canister_settings) })], [IDL2.Record({ canister_id })], []),
    delete_canister: IDL2.Func([IDL2.Record({ canister_id })], [], []),
    deposit_cycles: IDL2.Func([IDL2.Record({ canister_id })], [], []),
    install_code: IDL2.Func([
      IDL2.Record({
        arg: IDL2.Vec(IDL2.Nat8),
        wasm_module,
        mode: IDL2.Variant({
          reinstall: IDL2.Null,
          upgrade: IDL2.Null,
          install: IDL2.Null
        }),
        canister_id
      })
    ], [], []),
    provisional_create_canister_with_cycles: IDL2.Func([
      IDL2.Record({
        settings: IDL2.Opt(canister_settings),
        amount: IDL2.Opt(IDL2.Nat)
      })
    ], [IDL2.Record({ canister_id })], []),
    provisional_top_up_canister: IDL2.Func([IDL2.Record({ canister_id, amount: IDL2.Nat })], [], []),
    raw_rand: IDL2.Func([], [IDL2.Vec(IDL2.Nat8)], []),
    start_canister: IDL2.Func([IDL2.Record({ canister_id })], [], []),
    stop_canister: IDL2.Func([IDL2.Record({ canister_id })], [], []),
    uninstall_code: IDL2.Func([IDL2.Record({ canister_id })], [], []),
    update_settings: IDL2.Func([
      IDL2.Record({
        canister_id: IDL2.Principal,
        settings: canister_settings
      })
    ], [], [])
  });
};
class ActorCallError extends AgentError {
  constructor(canisterId, methodName, type, props) {
    super([
      `Call failed:`,
      `  Canister: ${canisterId.toText()}`,
      `  Method: ${methodName} (${type})`,
      ...Object.getOwnPropertyNames(props).map((n2) => `  "${n2}": ${JSON.stringify(props[n2])}`)
    ].join("\n"));
    this.canisterId = canisterId;
    this.methodName = methodName;
    this.type = type;
    this.props = props;
  }
}
class QueryCallRejectedError extends ActorCallError {
  constructor(canisterId, methodName, result) {
    var _a2;
    super(canisterId, methodName, "query", {
      Status: result.status,
      Code: (_a2 = ReplicaRejectCode[result.reject_code]) !== null && _a2 !== void 0 ? _a2 : `Unknown Code "${result.reject_code}"`,
      Message: result.reject_message
    });
    this.result = result;
  }
}
class UpdateCallRejectedError extends ActorCallError {
  constructor(canisterId, methodName, requestId, response) {
    super(canisterId, methodName, "update", Object.assign({ "Request ID": toHex(requestId) }, response.body ? Object.assign(Object.assign({}, response.body.error_code ? {
      "Error code": response.body.error_code
    } : {}), { "Reject code": String(response.body.reject_code), "Reject message": response.body.reject_message }) : {
      "HTTP status code": response.status.toString(),
      "HTTP status text": response.statusText
    }));
    this.requestId = requestId;
    this.response = response;
  }
}
var CanisterInstallMode;
(function(CanisterInstallMode2) {
  CanisterInstallMode2["Install"] = "install";
  CanisterInstallMode2["Reinstall"] = "reinstall";
  CanisterInstallMode2["Upgrade"] = "upgrade";
})(CanisterInstallMode || (CanisterInstallMode = {}));
const metadataSymbol = Symbol.for("ic-agent-metadata");
class Actor {
  constructor(metadata) {
    this[metadataSymbol] = Object.freeze(metadata);
  }
  /**
   * Get the Agent class this Actor would call, or undefined if the Actor would use
   * the default agent (global.ic.agent).
   * @param actor The actor to get the agent of.
   */
  static agentOf(actor) {
    return actor[metadataSymbol].config.agent;
  }
  /**
   * Get the interface of an actor, in the form of an instance of a Service.
   * @param actor The actor to get the interface of.
   */
  static interfaceOf(actor) {
    return actor[metadataSymbol].service;
  }
  static canisterIdOf(actor) {
    return Principal$1.from(actor[metadataSymbol].config.canisterId);
  }
  static async install(fields, config) {
    const mode = fields.mode === void 0 ? CanisterInstallMode.Install : fields.mode;
    const arg = fields.arg ? [...new Uint8Array(fields.arg)] : [];
    const wasmModule = [...new Uint8Array(fields.module)];
    const canisterId = typeof config.canisterId === "string" ? Principal$1.fromText(config.canisterId) : config.canisterId;
    await getManagementCanister(config).install_code({
      mode: { [mode]: null },
      arg,
      wasm_module: wasmModule,
      canister_id: canisterId
    });
  }
  static async createCanister(config) {
    const { canister_id: canisterId } = await getManagementCanister(config || {}).provisional_create_canister_with_cycles({ amount: [], settings: [] });
    return canisterId;
  }
  static async createAndInstallCanister(interfaceFactory, fields, config) {
    const canisterId = await this.createCanister(config);
    await this.install(Object.assign({}, fields), Object.assign(Object.assign({}, config), { canisterId }));
    return this.createActor(interfaceFactory, Object.assign(Object.assign({}, config), { canisterId }));
  }
  static createActorClass(interfaceFactory, options) {
    const service = interfaceFactory({ IDL });
    class CanisterActor extends Actor {
      constructor(config) {
        if (!config.canisterId)
          throw new AgentError(`Canister ID is required, but received ${typeof config.canisterId} instead. If you are using automatically generated declarations, this may be because your application is not setting the canister ID in process.env correctly.`);
        const canisterId = typeof config.canisterId === "string" ? Principal$1.fromText(config.canisterId) : config.canisterId;
        super({
          config: Object.assign(Object.assign(Object.assign({}, DEFAULT_ACTOR_CONFIG), config), { canisterId }),
          service
        });
        for (const [methodName, func] of service._fields) {
          if (options === null || options === void 0 ? void 0 : options.httpDetails) {
            func.annotations.push(ACTOR_METHOD_WITH_HTTP_DETAILS);
          }
          this[methodName] = _createActorMethod(this, methodName, func, config.blsVerify);
        }
      }
    }
    return CanisterActor;
  }
  static createActor(interfaceFactory, configuration) {
    if (!configuration.canisterId) {
      throw new AgentError(`Canister ID is required, but received ${typeof configuration.canisterId} instead. If you are using automatically generated declarations, this may be because your application is not setting the canister ID in process.env correctly.`);
    }
    return new (this.createActorClass(interfaceFactory))(configuration);
  }
  static createActorWithHttpDetails(interfaceFactory, configuration) {
    return new (this.createActorClass(interfaceFactory, { httpDetails: true }))(configuration);
  }
}
function decodeReturnValue(types2, msg) {
  const returnValues = decode$3(types2, buffer.Buffer.from(msg));
  switch (returnValues.length) {
    case 0:
      return void 0;
    case 1:
      return returnValues[0];
    default:
      return returnValues;
  }
}
const DEFAULT_ACTOR_CONFIG = {
  pollingStrategyFactory: defaultStrategy
};
const ACTOR_METHOD_WITH_HTTP_DETAILS = "http-details";
function _createActorMethod(actor, methodName, func, blsVerify2) {
  let caller;
  if (func.annotations.includes("query") || func.annotations.includes("composite_query")) {
    caller = async (options, ...args) => {
      var _a2, _b2;
      options = Object.assign(Object.assign({}, options), (_b2 = (_a2 = actor[metadataSymbol].config).queryTransform) === null || _b2 === void 0 ? void 0 : _b2.call(_a2, methodName, args, Object.assign(Object.assign({}, actor[metadataSymbol].config), options)));
      const agent2 = options.agent || actor[metadataSymbol].config.agent || getDefaultAgent();
      const cid = Principal$1.from(options.canisterId || actor[metadataSymbol].config.canisterId);
      const arg = encode$2(func.argTypes, args);
      const result = await agent2.query(cid, { methodName, arg });
      switch (result.status) {
        case "rejected":
          throw new QueryCallRejectedError(cid, methodName, result);
        case "replied":
          return func.annotations.includes(ACTOR_METHOD_WITH_HTTP_DETAILS) ? {
            httpDetails: result.httpDetails,
            result: decodeReturnValue(func.retTypes, result.reply.arg)
          } : decodeReturnValue(func.retTypes, result.reply.arg);
      }
    };
  } else {
    caller = async (options, ...args) => {
      var _a2, _b2;
      options = Object.assign(Object.assign({}, options), (_b2 = (_a2 = actor[metadataSymbol].config).callTransform) === null || _b2 === void 0 ? void 0 : _b2.call(_a2, methodName, args, Object.assign(Object.assign({}, actor[metadataSymbol].config), options)));
      const agent2 = options.agent || actor[metadataSymbol].config.agent || getDefaultAgent();
      const { canisterId, effectiveCanisterId, pollingStrategyFactory } = Object.assign(Object.assign(Object.assign({}, DEFAULT_ACTOR_CONFIG), actor[metadataSymbol].config), options);
      const cid = Principal$1.from(canisterId);
      const ecid = effectiveCanisterId !== void 0 ? Principal$1.from(effectiveCanisterId) : cid;
      const arg = encode$2(func.argTypes, args);
      const { requestId, response } = await agent2.call(cid, {
        methodName,
        arg,
        effectiveCanisterId: ecid
      });
      if (!response.ok || response.body) {
        throw new UpdateCallRejectedError(cid, methodName, requestId, response);
      }
      const pollStrategy = pollingStrategyFactory();
      const responseBytes = await pollForResponse(agent2, ecid, requestId, pollStrategy, blsVerify2);
      const shouldIncludeHttpDetails = func.annotations.includes(ACTOR_METHOD_WITH_HTTP_DETAILS);
      if (responseBytes !== void 0) {
        return shouldIncludeHttpDetails ? {
          httpDetails: response,
          result: decodeReturnValue(func.retTypes, responseBytes)
        } : decodeReturnValue(func.retTypes, responseBytes);
      } else if (func.retTypes.length === 0) {
        return shouldIncludeHttpDetails ? {
          httpDetails: response,
          result: void 0
        } : void 0;
      } else {
        throw new Error(`Call was returned undefined, but type [${func.retTypes.join(",")}].`);
      }
    };
  }
  const handler = (...args) => caller({}, ...args);
  handler.withOptions = (options) => (...args) => caller(options, ...args);
  return handler;
}
function getManagementCanister(config) {
  function transform(_methodName, args, _callConfig) {
    const first = args[0];
    let effectiveCanisterId = Principal$1.fromHex("");
    if (first && typeof first === "object" && first.canister_id) {
      effectiveCanisterId = Principal$1.from(first.canister_id);
    }
    return { effectiveCanisterId };
  }
  return Actor.createActor(managementCanisterIdl, Object.assign(Object.assign(Object.assign({}, config), { canisterId: Principal$1.fromHex("") }), {
    callTransform: transform,
    queryTransform: transform
  }));
}
const idlFactory = ({
  IDL: IDL2
}) => {
  const PictureId = IDL2.Text;
  const Time = IDL2.Int;
  const Picture = IDL2.Record({
    "content": IDL2.Vec(IDL2.Nat8),
    "collection": IDL2.Text,
    "owner": IDL2.Text,
    "name": IDL2.Text,
    "pictureId": PictureId,
    "uploadedAt": Time
  });
  const Pictures = IDL2.Service({
    "getMemorySize": IDL2.Func([], [IDL2.Nat], []),
    "listPictureIds": IDL2.Func([IDL2.Text], [IDL2.Vec(PictureId)], ["query"]),
    "readPicture": IDL2.Func([IDL2.Text, IDL2.Text], [IDL2.Opt(Picture)], ["query"]),
    "uploadPicture": IDL2.Func([IDL2.Text, IDL2.Text, IDL2.Vec(IDL2.Nat8)], [IDL2.Opt(PictureId)], []),
    "wallet_balance": IDL2.Func([], [IDL2.Nat], []),
    "whoami": IDL2.Func([], [IDL2.Principal], ["query"])
  });
  return Pictures;
};
const urlParams = new URLSearchParams(location.search);
const {
  CANISTER_ID_MAY16_GALAXY_BACKEND,
  DFX_NETWORK,
  REGISTER_TIMESTAMP
} = Object.fromEntries(urlParams);
console.log("DFX_NETWORK", DFX_NETWORK);
console.log("self.location.hostname", self.location.hostname);
const isLocalhost = !!self.location.hostname.includes("localhost");
console.log("canister", REGISTER_TIMESTAMP);
const agent = new HttpAgent({
  host: isLocalhost ? "http://127.0.0.1:4943/" : void 0,
  verifyQuerySignatures: false
});
const backendActor = Actor.createActor(idlFactory, {
  agent,
  canisterId: CANISTER_ID_MAY16_GALAXY_BACKEND
});
const authorize = async () => {
  try {
    console.log("authorize", REGISTER_TIMESTAMP);
    const authClient = await AuthClient.create({
      "idleOptions": {
        disableIdle: true
      }
    });
    console.log("authClient", authClient);
    const identity = await authClient.getIdentity();
    if (identity) {
      const actor = Actor.agentOf(backendActor);
      if (actor) {
        actor.replaceIdentity(identity);
      }
    } else {
      console.error("NOT authorized", identity);
    }
  } catch (e2) {
    console.error("authorize", e2.toString());
  }
};
const data$5 = {
  "width": 24,
  "height": 24,
  "body": '<path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4m-5-4l5-5l-5-5m5 5H3"/>'
};
var _default$5 = data$5;
const authImage = "/auth-hero.png";
const avatar1Image = "/avatar.png";
const data$4 = {
  "width": 24,
  "height": 24,
  "body": '<path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m12 2l3.09 6.26L22 9.27l-5 4.87l1.18 6.88L12 17.77l-6.18 3.25L7 14.14L2 9.27l6.91-1.01L12 2z"/>'
};
var _default$4 = data$4;
const LoginPage = () => {
  return u$1("div", {
    className: "grid h-screen grid-cols-12",
    children: [u$1("div", {
      className: "relative hidden bg-[#FFE9D1] dark:bg-[#14181c] lg:col-span-7 lg:block xl:col-span-8 2xl:col-span-9",
      children: [u$1("div", {
        className: "absolute inset-0 flex items-center justify-center",
        children: u$1("img", {
          src: authImage,
          className: "object-cover",
          alt: "Auth Image"
        })
      }), u$1("div", {
        className: "animate-bounce-2 absolute bottom-[15%] right-[20%]",
        children: u$1(Card, {
          className: "w-64 bg-base-100/80  backdrop-blur-lg",
          children: u$1(CardBody, {
            className: "p-6",
            children: [u$1("div", {
              className: "flex flex-col items-center justify-center",
              children: [u$1("img", {
                src: avatar1Image,
                className: `size-11 bg-base-content/10 p-0.5 ${Mask$1.className({
                  variant: "squircle"
                })}`,
                alt: ""
              }), u$1("div", {
                className: "mt-2 flex items-center justify-center gap-0.5",
                children: Array.from({
                  length: 5
                }).map((_2, index2) => u$1(Icon, {
                  icon: _default$4,
                  className: "size-3 text-orange-400 svg-path:fill-orange-400"
                }, index2))
              }), u$1("p", {
                className: "mt-2 text-sm font-medium",
                children: "Happy Customer"
              })]
            }), u$1("p", {
              className: "text-sm text-base-content/90",
              children: "When I can see all of my notes and workflows organized in inter-connected manner it brings me a lot of clarity and insights."
            })]
          })
        })
      })]
    }), u$1("div", {
      className: "col-span-12  lg:col-span-5 xl:col-span-4 2xl:col-span-3",
      children: u$1("div", {
        className: "flex flex-col items-stretch p-8 lg:p-16",
        children: [u$1("div", {
          className: "flex items-center justify-between",
          children: u$1("h1", {
            class: "text-bold text-xl",
            children: "Galaxy"
          })
        }), u$1("h3", {
          className: "mt-12 text-center text-xl font-semibold lg:mt-24",
          children: "Login"
        }), u$1("h3", {
          className: "mt-2 text-center text-sm text-base-content/70",
          children: "Web-based Personal Knowledge Management System on Internet Computer"
        }), u$1("div", {
          className: "mt-10",
          children: [u$1("div", {
            children: u$1("div", {
              className: "mt-3 flex items-center gap-3",
              children: [u$1(Checkbox, {
                name: "agreement",
                id: "agreement",
                size: "xs",
                color: "primary"
              }), u$1("label", {
                htmlFor: "agreement",
                children: ["I agree with", " ", u$1("span", {
                  className: "cursor-pointer text-primary underline",
                  children: "terms and conditions"
                })]
              })]
            })
          }), u$1("div", {
            className: "mt-6",
            children: u$1(Button, {
              _: "on click call loginWithInternetIdentity() ",
              color: "primary",
              loading: false,
              className: "gap-3 text-base",
              fullWidth: true,
              startIcon: u$1(Icon, {
                icon: _default$5,
                fontSize: 16
              }),
              children: "Login with Internet Identity"
            })
          })]
        })]
      })
    })]
  });
};
const root_url = get_root_path();
const root_url_re = new RegExp("^" + escape_re(root_url));
function same_origin(origin) {
  return origin === self.location.origin;
}
function get_root_path() {
  if (self.registration) {
    const url = new URL(registration.scope);
    return url.pathname.replace(/\/$/, "");
  }
  return location.pathname.replace(/\/[^\/]+$/, "");
}
function normalize_url(url) {
  return url.replace(root_url_re, "");
}
function escape_re(str) {
  if (typeof str == "string") {
    var special = /([\^\$\[\]\(\)\{\}\+\*\.\|\?])/g;
    return str.replace(special, "\\$1");
  }
}
function is_function(arg) {
  return typeof arg === "function";
}
function is_promise(arg) {
  return arg && typeof arg === "object" && is_function(arg.then);
}
function isPromiseFs(fs2) {
  const test = (targetFs) => {
    try {
      return targetFs.readFile().catch((e2) => e2);
    } catch (e2) {
      return e2;
    }
  };
  return is_promise(test(fs2));
}
const commands = ["stat", "readdir", "readFile"];
function bind_fs(fs2) {
  const result = {};
  if (isPromiseFs(fs2)) {
    for (const command of commands) {
      result[command] = fs2[command].bind(fs2);
    }
  } else {
    for (const command of commands) {
      result[command] = function(...args) {
        return new Promise((resolve2, reject) => {
          fs2[command](...args, function(err, data2) {
            if (err) {
              reject(err);
            } else {
              resolve2(data2);
            }
          });
        });
      };
    }
  }
  return result;
}
class HTTPResponse {
  constructor(resolve2, reject) {
    this._resolve = resolve2;
    this._reject = reject;
  }
  html(data2, init2) {
    this.send(data2, { type: "text/html", ...init2 });
  }
  text(data2, init2) {
    this.send(data2, init2);
  }
  json(data2, init2) {
    this.send(JSON.stringify(data2), { type: "application/json", ...init2 });
  }
  blob(blob, init2 = {}) {
    this._resolve(new Response(blob, init2));
  }
  send(data2, { type = "text/plain", ...init2 } = {}) {
    if (![void 0, null].includes(data2)) {
      data2 = new Blob([data2], { type });
    }
    this.blob(data2, init2);
  }
  async fetch(arg) {
    if (typeof arg === "string") {
      const _res = await fetch(arg);
      const type = _res.headers.get("Content-Type") ?? "application/octet-stream";
      this.send(await _res.arrayBuffer(), { type });
    } else if (arg instanceof Request) {
      return fetch(arg).then(this._resolve).catch(this._reject);
    }
  }
  download(content, { filename = "download", type = "text/plain", ...init2 } = {}) {
    const headers = { "Content-Disposition": `attachment; filename="${filename}"` };
    this.send(content, { type, headers, ...init2 });
  }
  redirect(code, url) {
    if (url === void 0) {
      url = code;
      code = 302;
    }
    if (!url.match(/https?:\/\//)) {
      url = root_url + url;
    }
    this._resolve(Response.redirect(url, code));
  }
  sse({ onClose } = {}) {
    let send, close2, stream, defunct;
    stream = new ReadableStream({ cancel() {
      defunct = true;
      trigger(onClose);
    }, start: (controller) => {
      send = function(event) {
        if (!defunct) {
          const chunk = createChunk(event);
          const payload = new TextEncoder().encode(chunk);
          controller.enqueue(payload);
        }
      };
      close2 = function close3() {
        controller.close();
        stream = null;
        trigger(onClose);
      };
    } });
    this._resolve(new Response(stream, { headers: { "Content-Type": "text/event-stream; charset=utf-8", "Transfer-Encoding": "chunked", Connection: "keep-alive" } }));
    return { send, close: close2 };
  }
}
function RouteParser() {
  const name_re = "[a-zA-Z_][a-zA-Z_0-9]*";
  const self2 = this;
  const open_tag = "{";
  const close_tag = "}";
  const glob = "*";
  const number = "\\d";
  const optional = "?";
  const open_group = "(";
  const close_group = ")";
  const plus = "+";
  const dot = ".";
  self2.route_parser = function(open, close2) {
    const tag_re = new RegExp("(" + escape_re(open) + name_re + escape_re(close2) + ")", "g");
    const tokenizer_re = new RegExp(["(", escape_re(open), name_re, escape_re(close2), "|", escape_re(glob), "|", escape_re(number), "|", escape_re(dot), "|", escape_re(optional), "|", escape_re(open_group), "|", escape_re(close_group), "|", escape_re(plus), ")"].join(""), "g");
    const clear_re = new RegExp(escape_re(open) + "(" + name_re + ")" + escape_re(close2), "g");
    return function(str) {
      const result = [];
      let index2 = 0;
      let parentheses = 0;
      str = str.split(tokenizer_re).map(function(chunk, i2, chunks) {
        if (chunk === open_group) {
          parentheses++;
        } else if (chunk === close_group) {
          parentheses--;
        }
        if ([open_group, plus, close_group, optional, dot, number].includes(chunk)) {
          return chunk;
        } else if (chunk === glob) {
          result.push(index2++);
          return "(.*?)";
        } else if (chunk.match(tag_re)) {
          result.push(chunk.replace(clear_re, "$1"));
          return "([^\\/]+)";
        } else {
          return chunk;
        }
      }).join("");
      if (parentheses !== 0) {
        throw new Error(`Wayne: Unbalanced parentheses in an expression: ${str}`);
      }
      return { re: str, names: result };
    };
  };
  const parse2 = self2.route_parser(open_tag, close_tag);
  self2.parse = parse2;
  self2.pick = function(routes, url, origin) {
    let input;
    let keys2;
    if (routes instanceof Array) {
      input = {};
      keys2 = routes;
      routes.map(function(route) {
        input[route] = route;
      });
    } else {
      keys2 = Object.keys(routes);
      input = routes;
    }
    const results = [];
    for (let i2 = keys2.length; i2--; ) {
      const key = keys2[i2];
      let pattern;
      if (key.match(/:\/\//)) {
        const url2 = new URL(key);
        if (url2.origin !== origin) {
          continue;
        }
        pattern = key.replace(url2.origin, "");
      } else if (!same_origin(origin)) {
        continue;
      } else {
        pattern = key;
      }
      const parts = parse2(pattern);
      const m2 = url.match(new RegExp("^" + parts.re + "$"));
      if (m2) {
        const matched = m2.slice(1);
        const data2 = {};
        if (matched.length) {
          parts.names.forEach((name, i3) => {
            data2[name] = matched[i3];
          });
        }
        results.push({ pattern: key, data: data2 });
      }
    }
    return results;
  };
}
function html(content) {
  return ["<!DOCTYPE html>", "<html>", "<head>", '<meta charset="UTF-8">', "<title>Wayne Service Worker</title>", "</head>", "<body>", ...content, "</body>", "</html>"].join("\n");
}
function error500(error2) {
  var output = html(["<h1>Wayne: 500 Server Error</h1>", "<p>Service worker give 500 error</p>", `<p>${error2.message || error2}</p>`, `<pre>${error2.stack || ""}</pre>`]);
  return [output, { status: 500, statusText: "500 Server Error" }];
}
function error404(path2) {
  var output = html(["<h1>Wayne: 404 File Not Found</h1>", `<p>File ${path2} not found`]);
  return [output, { status: 404, statusText: "404 Page Not Found" }];
}
function createChunk({ data: data2, event, retry, id }) {
  return Object.entries({ event, id, data: data2, retry }).filter(([, value]) => value).map(([key, value]) => `${key}: ${value}`).join("\n") + "\n\n";
}
function trigger(maybeFn, ...args) {
  if (typeof maybeFn === "function") {
    maybeFn(...args);
  }
}
function chain_handlers(handlers, callback) {
  if (handlers.length) {
    return new Promise((resolve2, reject) => {
      let i2 = 0;
      (async function recur() {
        const handler = handlers[i2];
        if (!handler) {
          return resolve2();
        }
        try {
          await callback(handler, function next() {
            i2++;
            recur();
          });
        } catch (error2) {
          reject(error2);
        }
      })();
    });
  }
}
async function list_dir({ fs: fs2, path: path2 }, path_name) {
  const names = await fs2.readdir(path_name);
  return Promise.all(names.map(async (name) => {
    const fullname = path2.join(path_name, name);
    const stat2 = await fs2.stat(fullname);
    if (stat2.isDirectory()) {
      return `${name}/`;
    }
    return name;
  }));
}
function FileSystem(options) {
  let { path: path2, prefix = "", test, dir = () => "/", fs: fs2, mime: mime2, default_file = "index.html" } = options;
  fs2 = bind_fs(fs2);
  new RouteParser();
  if (prefix && !prefix.startsWith("/")) {
    prefix = `/${prefix}`;
  }
  if (!test) {
    test = (url) => url.pathname.startsWith(prefix);
  }
  async function serve(res, path_name) {
    const ext = path2.extname(path_name);
    const type = mime2.getType(ext);
    const data2 = await fs2.readFile(path_name);
    res.send(data2, { type });
  }
  return async function(req, res, next) {
    req.method;
    const url = new URL(req.url);
    let path_name = normalize_url(decodeURIComponent(url.pathname));
    url.pathname = path_name;
    if (!(same_origin(url.origin) && await test(url))) {
      return next();
    }
    if (req.method !== "GET") {
      return res.send("Method Not Allowed", { status: 405 });
    }
    if (prefix) {
      path_name = path_name.substring(prefix.length);
    }
    if (!path_name) {
      path_name = "/";
    }
    path_name = path2.join(await dir(), path_name);
    try {
      const stat2 = await fs2.stat(path_name);
      if (stat2.isFile()) {
        await serve(res, path_name);
      } else if (stat2.isDirectory()) {
        const default_path = path2.join(path_name, default_file);
        const stat3 = await fs2.stat(default_path);
        if (stat3.isFile()) {
          await serve(res, default_path);
        } else {
          res.html(...dir(prefix, path_name, await list_dir({ fs: fs2, path: path2 }, path_name)));
        }
      }
    } catch (e2) {
      console.log(e2.stack);
      if (typeof stat === "undefined") {
        res.html(...error404(path_name));
      } else {
        res.html(...error500(error));
      }
    }
  };
}
class Wayne {
  constructor({ filter = () => true } = {}) {
    this._er_handlers = [];
    this._middlewares = [];
    this._routes = {};
    this._timeout = 5 * 60 * 1e3;
    this._parser = new RouteParser();
    self.addEventListener("fetch", (event) => {
      if (filter(event.request) === false) {
        return;
      }
      const promise = new Promise(async (resolve2, reject) => {
        const req = event.request;
        try {
          const res = new HTTPResponse(resolve2, reject);
          await chain_handlers(this._middlewares, function(fn2, next) {
            return fn2(req, res, next);
          });
          const method = req.method;
          const url = new URL(req.url);
          const path2 = normalize_url(url.pathname);
          const origin = url.origin;
          const routes = this._routes[method];
          if (routes) {
            const match = this._parser.pick(routes, path2, origin);
            const have_wildcard = match.length > 1 && match.find((route) => {
              return !!route.pattern.match(/\*/);
            });
            if (match.length) {
              let selected_route;
              if (have_wildcard) {
                selected_route = match.find((route) => {
                  return !route.pattern.match(/\*/);
                });
              }
              if (!(have_wildcard && selected_route)) {
                selected_route = match[0];
              }
              const fns = [...this._middlewares, ...routes[selected_route.pattern]];
              req.params = selected_route.data;
              setTimeout(function() {
                reject("Timeout Error");
              }, this._timeout);
              await chain_handlers(fns, (fn2, next) => {
                return fn2(req, res, next);
              });
              return;
            }
          }
          if (event.request.cache === "only-if-cached" && event.request.mode !== "same-origin") {
            return;
          }
          fetch(event.request).then(resolve2).catch(reject);
        } catch (error2) {
          this._handle_error(resolve2, req, error2);
        }
      });
      event.respondWith(promise.catch(() => {
      }));
    });
    ["GET", "POST", "DELETE", "PATCH", "PUT"].forEach((method) => {
      this[method.toLowerCase()] = this.method(method);
    });
  }
  _handle_error(resolve2, req, error2) {
    const res = new HTTPResponse(resolve2);
    if (this._er_handlers.length) {
      chain_handlers(this._er_handlers, function(handler, next) {
        handler(error2, req, res, next);
      });
    } else {
      res.html(...error500(error2));
    }
  }
  use(...fns) {
    fns.forEach((fn2) => {
      if (typeof fn2 === "function") {
        if (fn2.length === 4) {
          this._er_handlers.push(fn2);
        } else if (fn2.length === 3) {
          this._middlewares.push(fn2);
        }
      }
    });
  }
  method(method) {
    return function(url, fn2) {
      if (!this._routes[method]) {
        this._routes[method] = {};
      }
      const routes = this._routes[method];
      if (!routes[url]) {
        routes[url] = [];
      }
      routes[url].push(fn2);
      return this;
    };
  }
}
var justOnce = once$1;
function once$1(fn2) {
  var called, value;
  if (typeof fn2 !== "function") {
    throw new Error("expected a function but got " + fn2);
  }
  return function wrap() {
    if (called) {
      return value;
    }
    called = true;
    value = fn2.apply(this, arguments);
    return value;
  };
}
(function(scope) {
  function B2(r2, e2) {
    var f2;
    return r2 instanceof Buffer ? f2 = r2 : f2 = Buffer.from(r2.buffer, r2.byteOffset, r2.byteLength), f2.toString(e2);
  }
  var w2 = function(r2) {
    return Buffer.from(r2);
  };
  function h2(r2) {
    for (var e2 = 0, f2 = Math.min(256 * 256, r2.length + 1), n2 = new Uint16Array(f2), i2 = [], o2 = 0; ; ) {
      var t2 = e2 < r2.length;
      if (!t2 || o2 >= f2 - 1) {
        var s2 = n2.subarray(0, o2), m2 = s2;
        if (i2.push(String.fromCharCode.apply(null, m2)), !t2)
          return i2.join("");
        r2 = r2.subarray(e2), e2 = 0, o2 = 0;
      }
      var a2 = r2[e2++];
      if ((a2 & 128) === 0)
        n2[o2++] = a2;
      else if ((a2 & 224) === 192) {
        var d2 = r2[e2++] & 63;
        n2[o2++] = (a2 & 31) << 6 | d2;
      } else if ((a2 & 240) === 224) {
        var d2 = r2[e2++] & 63, l2 = r2[e2++] & 63;
        n2[o2++] = (a2 & 31) << 12 | d2 << 6 | l2;
      } else if ((a2 & 248) === 240) {
        var d2 = r2[e2++] & 63, l2 = r2[e2++] & 63, R2 = r2[e2++] & 63, c2 = (a2 & 7) << 18 | d2 << 12 | l2 << 6 | R2;
        c2 > 65535 && (c2 -= 65536, n2[o2++] = c2 >>> 10 & 1023 | 55296, c2 = 56320 | c2 & 1023), n2[o2++] = c2;
      }
    }
  }
  function F2(r2) {
    for (var e2 = 0, f2 = r2.length, n2 = 0, i2 = Math.max(32, f2 + (f2 >>> 1) + 7), o2 = new Uint8Array(i2 >>> 3 << 3); e2 < f2; ) {
      var t2 = r2.charCodeAt(e2++);
      if (t2 >= 55296 && t2 <= 56319) {
        if (e2 < f2) {
          var s2 = r2.charCodeAt(e2);
          (s2 & 64512) === 56320 && (++e2, t2 = ((t2 & 1023) << 10) + (s2 & 1023) + 65536);
        }
        if (t2 >= 55296 && t2 <= 56319)
          continue;
      }
      if (n2 + 4 > o2.length) {
        i2 += 8, i2 *= 1 + e2 / r2.length * 2, i2 = i2 >>> 3 << 3;
        var m2 = new Uint8Array(i2);
        m2.set(o2), o2 = m2;
      }
      if ((t2 & 4294967168) === 0) {
        o2[n2++] = t2;
        continue;
      } else if ((t2 & 4294965248) === 0)
        o2[n2++] = t2 >>> 6 & 31 | 192;
      else if ((t2 & 4294901760) === 0)
        o2[n2++] = t2 >>> 12 & 15 | 224, o2[n2++] = t2 >>> 6 & 63 | 128;
      else if ((t2 & 4292870144) === 0)
        o2[n2++] = t2 >>> 18 & 7 | 240, o2[n2++] = t2 >>> 12 & 63 | 128, o2[n2++] = t2 >>> 6 & 63 | 128;
      else
        continue;
      o2[n2++] = t2 & 63 | 128;
    }
    return o2.slice ? o2.slice(0, n2) : o2.subarray(0, n2);
  }
  var u2 = "Failed to ", p2 = function(r2, e2, f2) {
    if (r2)
      throw new Error("".concat(u2).concat(e2, ": the '").concat(f2, "' option is unsupported."));
  };
  var x2 = typeof Buffer == "function" && Buffer.from;
  var A2 = x2 ? w2 : F2;
  function v2() {
    this.encoding = "utf-8";
  }
  v2.prototype.encode = function(r2, e2) {
    return p2(e2 && e2.stream, "encode", "stream"), A2(r2);
  };
  function U2(r2) {
    var e2;
    try {
      var f2 = new Blob([r2], { type: "text/plain;charset=UTF-8" });
      e2 = URL.createObjectURL(f2);
      var n2 = new XMLHttpRequest();
      return n2.open("GET", e2, false), n2.send(), n2.responseText;
    } finally {
      e2 && URL.revokeObjectURL(e2);
    }
  }
  var O2 = !x2 && typeof Blob == "function" && typeof URL == "function" && typeof URL.createObjectURL == "function", S2 = ["utf-8", "utf8", "unicode-1-1-utf-8"], T2 = h2;
  x2 ? T2 = B2 : O2 && (T2 = function(r2) {
    try {
      return U2(r2);
    } catch (e2) {
      return h2(r2);
    }
  });
  var y2 = "construct 'TextDecoder'", E2 = "".concat(u2, " ").concat(y2, ": the ");
  function g2(r2, e2) {
    p2(e2 && e2.fatal, y2, "fatal"), r2 = r2 || "utf-8";
    var f2;
    if (x2 ? f2 = Buffer.isEncoding(r2) : f2 = S2.indexOf(r2.toLowerCase()) !== -1, !f2)
      throw new RangeError("".concat(E2, " encoding label provided ('").concat(r2, "') is invalid."));
    this.encoding = r2, this.fatal = false, this.ignoreBOM = false;
  }
  g2.prototype.decode = function(r2, e2) {
    p2(e2 && e2.stream, "decode", "stream");
    var f2;
    return r2 instanceof Uint8Array ? f2 = r2 : r2.buffer instanceof ArrayBuffer ? f2 = new Uint8Array(r2.buffer) : f2 = new Uint8Array(r2), T2(f2, this.encoding);
  };
  scope.TextEncoder = scope.TextEncoder || v2;
  scope.TextDecoder = scope.TextDecoder || g2;
})(typeof window !== "undefined" ? window : typeof commonjsGlobal !== "undefined" ? commonjsGlobal : commonjsGlobal);
var browser = {
  encode: (string) => new TextEncoder().encode(string),
  decode: (buffer2) => new TextDecoder().decode(buffer2)
};
var justDebounceIt = debounce$1;
function debounce$1(fn2, wait, callFirst) {
  var timeout2;
  return function() {
    if (!wait) {
      return fn2.apply(this, arguments);
    }
    var context = this;
    var args = arguments;
    var callNow = callFirst && !timeout2;
    clearTimeout(timeout2);
    timeout2 = setTimeout(function() {
      timeout2 = null;
      if (!callNow) {
        return fn2.apply(context, args);
      }
    }, wait);
    if (callNow) {
      return fn2.apply(this, arguments);
    }
  };
}
function normalizePath(path2) {
  if (path2.length === 0) {
    return ".";
  }
  let parts = splitPath(path2);
  parts = parts.reduce(reducer, []);
  return joinPath(...parts);
}
function resolvePath(...paths) {
  let result = "";
  for (let path2 of paths) {
    if (path2.startsWith("/")) {
      result = path2;
    } else {
      result = normalizePath(joinPath(result, path2));
    }
  }
  return result;
}
function joinPath(...parts) {
  if (parts.length === 0)
    return "";
  let path2 = parts.join("/");
  path2 = path2.replace(/\/{2,}/g, "/");
  return path2;
}
function splitPath(path2) {
  if (path2.length === 0)
    return [];
  if (path2 === "/")
    return ["/"];
  let parts = path2.split("/");
  if (parts[parts.length - 1] === "") {
    parts.pop();
  }
  if (path2[0] === "/") {
    parts[0] = "/";
  } else {
    if (parts[0] !== ".") {
      parts.unshift(".");
    }
  }
  return parts;
}
function dirname(path2) {
  const last = path2.lastIndexOf("/");
  if (last === -1)
    throw new Error(`Cannot get dirname of "${path2}"`);
  if (last === 0)
    return "/";
  return path2.slice(0, last);
}
function basename(path2) {
  if (path2 === "/")
    throw new Error(`Cannot get basename of "${path2}"`);
  const last = path2.lastIndexOf("/");
  if (last === -1)
    return path2;
  return path2.slice(last + 1);
}
function reducer(ancestors, current) {
  if (ancestors.length === 0) {
    ancestors.push(current);
    return ancestors;
  }
  if (current === ".")
    return ancestors;
  if (current === "..") {
    if (ancestors.length === 1) {
      if (ancestors[0] === "/") {
        throw new Error("Unable to normalize path - traverses above root directory");
      }
      if (ancestors[0] === ".") {
        ancestors.push(current);
        return ancestors;
      }
    }
    if (ancestors[ancestors.length - 1] === "..") {
      ancestors.push("..");
      return ancestors;
    } else {
      ancestors.pop();
      return ancestors;
    }
  }
  ancestors.push(current);
  return ancestors;
}
var path$4 = {
  join: joinPath,
  normalize: normalizePath,
  split: splitPath,
  basename,
  dirname,
  resolve: resolvePath
};
function Err(name) {
  return class extends Error {
    constructor(...args) {
      super(...args);
      this.code = name;
      if (this.message) {
        this.message = name + ": " + this.message;
      } else {
        this.message = name;
      }
    }
  };
}
const EEXIST$1 = Err("EEXIST");
const ENOENT$2 = Err("ENOENT");
const ENOTDIR$1 = Err("ENOTDIR");
const ENOTEMPTY$2 = Err("ENOTEMPTY");
const ETIMEDOUT$1 = Err("ETIMEDOUT");
var errors = { EEXIST: EEXIST$1, ENOENT: ENOENT$2, ENOTDIR: ENOTDIR$1, ENOTEMPTY: ENOTEMPTY$2, ETIMEDOUT: ETIMEDOUT$1 };
const path$3 = path$4;
const { EEXIST, ENOENT: ENOENT$1, ENOTDIR, ENOTEMPTY: ENOTEMPTY$1 } = errors;
const STAT = 0;
var CacheFS_1 = class CacheFS {
  constructor() {
  }
  _makeRoot(root = /* @__PURE__ */ new Map()) {
    root.set(STAT, { mode: 511, type: "dir", size: 0, ino: 0, mtimeMs: Date.now() });
    return root;
  }
  activate(superblock = null) {
    if (superblock === null) {
      this._root = /* @__PURE__ */ new Map([["/", this._makeRoot()]]);
    } else if (typeof superblock === "string") {
      this._root = /* @__PURE__ */ new Map([["/", this._makeRoot(this.parse(superblock))]]);
    } else {
      this._root = superblock;
    }
  }
  get activated() {
    return !!this._root;
  }
  deactivate() {
    this._root = void 0;
  }
  size() {
    return this._countInodes(this._root.get("/")) - 1;
  }
  _countInodes(map) {
    let count = 1;
    for (let [key, val] of map) {
      if (key === STAT)
        continue;
      count += this._countInodes(val);
    }
    return count;
  }
  autoinc() {
    let val = this._maxInode(this._root.get("/")) + 1;
    return val;
  }
  _maxInode(map) {
    let max = map.get(STAT).ino;
    for (let [key, val] of map) {
      if (key === STAT)
        continue;
      max = Math.max(max, this._maxInode(val));
    }
    return max;
  }
  print(root = this._root.get("/")) {
    let str = "";
    const printTree = (root2, indent) => {
      for (let [file, node] of root2) {
        if (file === 0)
          continue;
        let stat2 = node.get(STAT);
        let mode = stat2.mode.toString(8);
        str += `${"	".repeat(indent)}${file}	${mode}`;
        if (stat2.type === "file") {
          str += `	${stat2.size}	${stat2.mtimeMs}
`;
        } else {
          str += `
`;
          printTree(node, indent + 1);
        }
      }
    };
    printTree(root, 0);
    return str;
  }
  parse(print) {
    let autoinc = 0;
    function mk(stat2) {
      const ino = ++autoinc;
      const type = stat2.length === 1 ? "dir" : "file";
      let [mode, size, mtimeMs] = stat2;
      mode = parseInt(mode, 8);
      size = size ? parseInt(size) : 0;
      mtimeMs = mtimeMs ? parseInt(mtimeMs) : Date.now();
      return /* @__PURE__ */ new Map([[STAT, { mode, type, size, mtimeMs, ino }]]);
    }
    let lines = print.trim().split("\n");
    let _root = this._makeRoot();
    let stack = [
      { indent: -1, node: _root },
      { indent: 0, node: null }
    ];
    for (let line of lines) {
      let prefix = line.match(/^\t*/)[0];
      let indent = prefix.length;
      line = line.slice(indent);
      let [filename, ...stat2] = line.split("	");
      let node = mk(stat2);
      if (indent <= stack[stack.length - 1].indent) {
        while (indent <= stack[stack.length - 1].indent) {
          stack.pop();
        }
      }
      stack.push({ indent, node });
      let cd = stack[stack.length - 2].node;
      cd.set(filename, node);
    }
    return _root;
  }
  _lookup(filepath, follow = true) {
    let dir = this._root;
    let partialPath = "/";
    let parts = path$3.split(filepath);
    for (let i2 = 0; i2 < parts.length; ++i2) {
      let part = parts[i2];
      dir = dir.get(part);
      if (!dir)
        throw new ENOENT$1(filepath);
      if (follow || i2 < parts.length - 1) {
        const stat2 = dir.get(STAT);
        if (stat2.type === "symlink") {
          let target = path$3.resolve(partialPath, stat2.target);
          dir = this._lookup(target);
        }
        if (!partialPath) {
          partialPath = part;
        } else {
          partialPath = path$3.join(partialPath, part);
        }
      }
    }
    return dir;
  }
  mkdir(filepath, { mode }) {
    if (filepath === "/")
      throw new EEXIST();
    let dir = this._lookup(path$3.dirname(filepath));
    let basename3 = path$3.basename(filepath);
    if (dir.has(basename3)) {
      throw new EEXIST();
    }
    let entry = /* @__PURE__ */ new Map();
    let stat2 = {
      mode,
      type: "dir",
      size: 0,
      mtimeMs: Date.now(),
      ino: this.autoinc()
    };
    entry.set(STAT, stat2);
    dir.set(basename3, entry);
  }
  rmdir(filepath) {
    let dir = this._lookup(filepath);
    if (dir.get(STAT).type !== "dir")
      throw new ENOTDIR();
    if (dir.size > 1)
      throw new ENOTEMPTY$1();
    let parent = this._lookup(path$3.dirname(filepath));
    let basename3 = path$3.basename(filepath);
    parent.delete(basename3);
  }
  readdir(filepath) {
    let dir = this._lookup(filepath);
    if (dir.get(STAT).type !== "dir")
      throw new ENOTDIR();
    return [...dir.keys()].filter((key) => typeof key === "string");
  }
  writeStat(filepath, size, { mode }) {
    let ino;
    try {
      let oldStat = this.stat(filepath);
      if (mode == null) {
        mode = oldStat.mode;
      }
      ino = oldStat.ino;
    } catch (err) {
    }
    if (mode == null) {
      mode = 438;
    }
    if (ino == null) {
      ino = this.autoinc();
    }
    let dir = this._lookup(path$3.dirname(filepath));
    let basename3 = path$3.basename(filepath);
    let stat2 = {
      mode,
      type: "file",
      size,
      mtimeMs: Date.now(),
      ino
    };
    let entry = /* @__PURE__ */ new Map();
    entry.set(STAT, stat2);
    dir.set(basename3, entry);
    return stat2;
  }
  unlink(filepath) {
    let parent = this._lookup(path$3.dirname(filepath));
    let basename3 = path$3.basename(filepath);
    parent.delete(basename3);
  }
  rename(oldFilepath, newFilepath) {
    let basename3 = path$3.basename(newFilepath);
    let entry = this._lookup(oldFilepath);
    let destDir = this._lookup(path$3.dirname(newFilepath));
    destDir.set(basename3, entry);
    this.unlink(oldFilepath);
  }
  stat(filepath) {
    return this._lookup(filepath).get(STAT);
  }
  lstat(filepath) {
    return this._lookup(filepath, false).get(STAT);
  }
  readlink(filepath) {
    return this._lookup(filepath, false).get(STAT).target;
  }
  symlink(target, filepath) {
    let ino, mode;
    try {
      let oldStat = this.stat(filepath);
      if (mode === null) {
        mode = oldStat.mode;
      }
      ino = oldStat.ino;
    } catch (err) {
    }
    if (mode == null) {
      mode = 40960;
    }
    if (ino == null) {
      ino = this.autoinc();
    }
    let dir = this._lookup(path$3.dirname(filepath));
    let basename3 = path$3.basename(filepath);
    let stat2 = {
      mode,
      type: "symlink",
      target,
      size: 0,
      mtimeMs: Date.now(),
      ino
    };
    let entry = /* @__PURE__ */ new Map();
    entry.set(STAT, stat2);
    dir.set(basename3, entry);
    return stat2;
  }
  _du(dir) {
    let size = 0;
    for (const [name, entry] of dir.entries()) {
      if (name === STAT) {
        size += entry.size;
      } else {
        size += this._du(entry);
      }
    }
    return size;
  }
  du(filepath) {
    let dir = this._lookup(filepath);
    return this._du(dir);
  }
};
class Store {
  constructor(dbName = "keyval-store", storeName = "keyval") {
    this.storeName = storeName;
    this._dbName = dbName;
    this._storeName = storeName;
    this._init();
  }
  _init() {
    if (this._dbp) {
      return;
    }
    this._dbp = new Promise((resolve2, reject) => {
      const openreq = indexedDB.open(this._dbName);
      openreq.onerror = () => reject(openreq.error);
      openreq.onsuccess = () => resolve2(openreq.result);
      openreq.onupgradeneeded = () => {
        openreq.result.createObjectStore(this._storeName);
      };
    });
  }
  _withIDBStore(type, callback) {
    this._init();
    return this._dbp.then((db) => new Promise((resolve2, reject) => {
      const transaction = db.transaction(this.storeName, type);
      transaction.oncomplete = () => resolve2();
      transaction.onabort = transaction.onerror = () => reject(transaction.error);
      callback(transaction.objectStore(this.storeName));
    }));
  }
  _close() {
    this._init();
    return this._dbp.then((db) => {
      db.close();
      this._dbp = void 0;
    });
  }
}
let store;
function getDefaultStore() {
  if (!store)
    store = new Store();
  return store;
}
function get(key, store2 = getDefaultStore()) {
  let req;
  return store2._withIDBStore("readwrite", (store3) => {
    req = store3.get(key);
  }).then(() => req.result);
}
function set(key, value, store2 = getDefaultStore()) {
  return store2._withIDBStore("readwrite", (store3) => {
    store3.put(value, key);
  });
}
function update(key, updater, store2 = getDefaultStore()) {
  return store2._withIDBStore("readwrite", (store3) => {
    const req = store3.get(key);
    req.onsuccess = () => {
      store3.put(updater(req.result), key);
    };
  });
}
function del(key, store2 = getDefaultStore()) {
  return store2._withIDBStore("readwrite", (store3) => {
    store3.delete(key);
  });
}
function clear(store2 = getDefaultStore()) {
  return store2._withIDBStore("readwrite", (store3) => {
    store3.clear();
  });
}
function keys(store2 = getDefaultStore()) {
  const keys2 = [];
  return store2._withIDBStore("readwrite", (store3) => {
    (store3.openKeyCursor || store3.openCursor).call(store3).onsuccess = function() {
      if (!this.result)
        return;
      keys2.push(this.result.key);
      this.result.continue();
    };
  }).then(() => keys2);
}
function close(store2 = getDefaultStore()) {
  return store2._close();
}
const idbKeyval = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Store,
  clear,
  close,
  del,
  get,
  keys,
  set,
  update
}, Symbol.toStringTag, { value: "Module" }));
const require$$0 = /* @__PURE__ */ getAugmentedNamespace(idbKeyval);
const idb$1 = require$$0;
var IdbBackend_1 = class IdbBackend {
  constructor(dbname, storename) {
    this._database = dbname;
    this._storename = storename;
    this._store = new idb$1.Store(this._database, this._storename);
  }
  saveSuperblock(superblock) {
    return idb$1.set("!root", superblock, this._store);
  }
  loadSuperblock() {
    return idb$1.get("!root", this._store);
  }
  readFile(inode) {
    return idb$1.get(inode, this._store);
  }
  writeFile(inode, data2) {
    return idb$1.set(inode, data2, this._store);
  }
  unlink(inode) {
    return idb$1.del(inode, this._store);
  }
  wipe() {
    return idb$1.clear(this._store);
  }
  close() {
    return idb$1.close(this._store);
  }
};
var HttpBackend_1 = class HttpBackend {
  constructor(url) {
    this._url = url;
  }
  loadSuperblock() {
    return fetch(this._url + "/.superblock.txt").then((res) => res.ok ? res.text() : null);
  }
  async readFile(filepath) {
    const res = await fetch(this._url + filepath);
    if (res.status === 200) {
      return res.arrayBuffer();
    } else {
      throw new Error("ENOENT");
    }
  }
  async sizeFile(filepath) {
    const res = await fetch(this._url + filepath, { method: "HEAD" });
    if (res.status === 200) {
      return res.headers.get("content-length");
    } else {
      throw new Error("ENOENT");
    }
  }
};
const idb = require$$0;
const sleep = (ms) => new Promise((r2) => setTimeout(r2, ms));
var Mutex_1 = class Mutex {
  constructor(dbname, storename) {
    this._id = Math.random();
    this._database = dbname;
    this._storename = storename;
    this._store = new idb.Store(this._database, this._storename);
    this._lock = null;
  }
  async has({ margin = 2e3 } = {}) {
    if (this._lock && this._lock.holder === this._id) {
      const now = Date.now();
      if (this._lock.expires > now + margin) {
        return true;
      } else {
        return await this.renew();
      }
    } else {
      return false;
    }
  }
  // Returns true if successful
  async renew({ ttl = 5e3 } = {}) {
    let success;
    await idb.update("lock", (current) => {
      const now = Date.now();
      const expires = now + ttl;
      success = current && current.holder === this._id;
      this._lock = success ? { holder: this._id, expires } : current;
      return this._lock;
    }, this._store);
    return success;
  }
  // Returns true if successful
  async acquire({ ttl = 5e3 } = {}) {
    let success;
    let expired;
    let doubleLock;
    await idb.update("lock", (current) => {
      const now = Date.now();
      const expires = now + ttl;
      expired = current && current.expires < now;
      success = current === void 0 || expired;
      doubleLock = current && current.holder === this._id;
      this._lock = success ? { holder: this._id, expires } : current;
      return this._lock;
    }, this._store);
    if (doubleLock) {
      throw new Error("Mutex double-locked");
    }
    return success;
  }
  // check at 10Hz, give up after 10 minutes
  async wait({ interval = 100, limit = 6e3, ttl } = {}) {
    while (limit--) {
      if (await this.acquire({ ttl }))
        return true;
      await sleep(interval);
    }
    throw new Error("Mutex timeout");
  }
  // Returns true if successful
  async release({ force = false } = {}) {
    let success;
    let doubleFree;
    let someoneElseHasIt;
    await idb.update("lock", (current) => {
      success = force || current && current.holder === this._id;
      doubleFree = current === void 0;
      someoneElseHasIt = current && current.holder !== this._id;
      this._lock = success ? void 0 : current;
      return this._lock;
    }, this._store);
    await idb.close(this._store);
    if (!success && !force) {
      if (doubleFree)
        throw new Error("Mutex double-freed");
      if (someoneElseHasIt)
        throw new Error("Mutex lost ownership");
    }
    return success;
  }
};
var Mutex2$1 = class Mutex2 {
  constructor(name) {
    this._id = Math.random();
    this._database = name;
    this._has = false;
    this._release = null;
  }
  async has() {
    return this._has;
  }
  // Returns true if successful
  async acquire() {
    return new Promise((resolve2) => {
      navigator.locks.request(this._database + "_lock", { ifAvailable: true }, (lock) => {
        this._has = !!lock;
        resolve2(!!lock);
        return new Promise((resolve3) => {
          this._release = resolve3;
        });
      });
    });
  }
  // Returns true if successful, gives up after 10 minutes
  async wait({ timeout: timeout2 = 6e5 } = {}) {
    return new Promise((resolve2, reject) => {
      const controller = new AbortController();
      setTimeout(() => {
        controller.abort();
        reject(new Error("Mutex timeout"));
      }, timeout2);
      navigator.locks.request(this._database + "_lock", { signal: controller.signal }, (lock) => {
        this._has = !!lock;
        resolve2(!!lock);
        return new Promise((resolve3) => {
          this._release = resolve3;
        });
      });
    });
  }
  // Returns true if successful
  async release({ force = false } = {}) {
    this._has = false;
    if (this._release) {
      this._release();
    } else if (force) {
      navigator.locks.request(this._database + "_lock", { steal: true }, (lock) => true);
    }
  }
};
const { encode, decode } = browser;
const debounce = justDebounceIt;
const CacheFS2 = CacheFS_1;
const { ENOENT, ENOTEMPTY, ETIMEDOUT } = errors;
const IdbBackend2 = IdbBackend_1;
const HttpBackend2 = HttpBackend_1;
const Mutex3 = Mutex_1;
const Mutex22 = Mutex2$1;
const path$2 = path$4;
var DefaultBackend_1 = class DefaultBackend {
  constructor() {
    this.saveSuperblock = debounce(() => {
      this.flush();
    }, 500);
  }
  async init(name, {
    wipe,
    url,
    urlauto,
    fileDbName = name,
    db = null,
    fileStoreName = name + "_files",
    lockDbName = name + "_lock",
    lockStoreName = name + "_lock"
  } = {}) {
    this._name = name;
    this._idb = db || new IdbBackend2(fileDbName, fileStoreName);
    this._mutex = navigator.locks ? new Mutex22(name) : new Mutex3(lockDbName, lockStoreName);
    this._cache = new CacheFS2(name);
    this._opts = { wipe, url };
    this._needsWipe = !!wipe;
    if (url) {
      this._http = new HttpBackend2(url);
      this._urlauto = !!urlauto;
    }
  }
  async activate() {
    if (this._cache.activated)
      return;
    if (this._needsWipe) {
      this._needsWipe = false;
      await this._idb.wipe();
      await this._mutex.release({ force: true });
    }
    if (!await this._mutex.has())
      await this._mutex.wait();
    const root = await this._idb.loadSuperblock();
    if (root) {
      this._cache.activate(root);
    } else if (this._http) {
      const text = await this._http.loadSuperblock();
      this._cache.activate(text);
      await this._saveSuperblock();
    } else {
      this._cache.activate();
    }
    if (await this._mutex.has()) {
      return;
    } else {
      throw new ETIMEDOUT();
    }
  }
  async deactivate() {
    if (await this._mutex.has()) {
      await this._saveSuperblock();
    }
    this._cache.deactivate();
    try {
      await this._mutex.release();
    } catch (e2) {
      console.log(e2);
    }
    await this._idb.close();
  }
  async _saveSuperblock() {
    if (this._cache.activated) {
      this._lastSavedAt = Date.now();
      await this._idb.saveSuperblock(this._cache._root);
    }
  }
  _writeStat(filepath, size, opts) {
    let dirparts = path$2.split(path$2.dirname(filepath));
    let dir = dirparts.shift();
    for (let dirpart of dirparts) {
      dir = path$2.join(dir, dirpart);
      try {
        this._cache.mkdir(dir, { mode: 511 });
      } catch (e2) {
      }
    }
    return this._cache.writeStat(filepath, size, opts);
  }
  async readFile(filepath, opts) {
    const { encoding } = opts;
    if (encoding && encoding !== "utf8")
      throw new Error('Only "utf8" encoding is supported in readFile');
    let data2 = null, stat2 = null;
    try {
      stat2 = this._cache.stat(filepath);
      data2 = await this._idb.readFile(stat2.ino);
    } catch (e2) {
      if (!this._urlauto)
        throw e2;
    }
    if (!data2 && this._http) {
      let lstat = this._cache.lstat(filepath);
      while (lstat.type === "symlink") {
        filepath = path$2.resolve(path$2.dirname(filepath), lstat.target);
        lstat = this._cache.lstat(filepath);
      }
      data2 = await this._http.readFile(filepath);
    }
    if (data2) {
      if (!stat2 || stat2.size != data2.byteLength) {
        stat2 = await this._writeStat(filepath, data2.byteLength, { mode: stat2 ? stat2.mode : 438 });
        this.saveSuperblock();
      }
      if (encoding === "utf8") {
        data2 = decode(data2);
      } else {
        data2.toString = () => decode(data2);
      }
    }
    if (!stat2)
      throw new ENOENT(filepath);
    return data2;
  }
  async writeFile(filepath, data2, opts) {
    const { mode, encoding = "utf8" } = opts;
    if (typeof data2 === "string") {
      if (encoding !== "utf8") {
        throw new Error('Only "utf8" encoding is supported in writeFile');
      }
      data2 = encode(data2);
    }
    const stat2 = await this._cache.writeStat(filepath, data2.byteLength, { mode });
    await this._idb.writeFile(stat2.ino, data2);
  }
  async unlink(filepath, opts) {
    const stat2 = this._cache.lstat(filepath);
    this._cache.unlink(filepath);
    if (stat2.type !== "symlink") {
      await this._idb.unlink(stat2.ino);
    }
  }
  readdir(filepath, opts) {
    return this._cache.readdir(filepath);
  }
  mkdir(filepath, opts) {
    const { mode = 511 } = opts;
    this._cache.mkdir(filepath, { mode });
  }
  rmdir(filepath, opts) {
    if (filepath === "/") {
      throw new ENOTEMPTY();
    }
    this._cache.rmdir(filepath);
  }
  rename(oldFilepath, newFilepath) {
    this._cache.rename(oldFilepath, newFilepath);
  }
  stat(filepath, opts) {
    return this._cache.stat(filepath);
  }
  lstat(filepath, opts) {
    return this._cache.lstat(filepath);
  }
  readlink(filepath, opts) {
    return this._cache.readlink(filepath);
  }
  symlink(target, filepath) {
    this._cache.symlink(target, filepath);
  }
  async backFile(filepath, opts) {
    let size = await this._http.sizeFile(filepath);
    await this._writeStat(filepath, size, opts);
  }
  du(filepath) {
    return this._cache.du(filepath);
  }
  flush() {
    return this._saveSuperblock();
  }
};
var Stat_1 = class Stat {
  constructor(stats) {
    this.type = stats.type;
    this.mode = stats.mode;
    this.size = stats.size;
    this.ino = stats.ino;
    this.mtimeMs = stats.mtimeMs;
    this.ctimeMs = stats.ctimeMs || stats.mtimeMs;
    this.uid = 1;
    this.gid = 1;
    this.dev = 1;
  }
  isFile() {
    return this.type === "file";
  }
  isDirectory() {
    return this.type === "dir";
  }
  isSymbolicLink() {
    return this.type === "symlink";
  }
};
const DefaultBackend2 = DefaultBackend_1;
const Stat2 = Stat_1;
const path$1 = path$4;
function cleanParamsFilepathOpts(filepath, opts, ...rest) {
  filepath = path$1.normalize(filepath);
  if (typeof opts === "undefined" || typeof opts === "function") {
    opts = {};
  }
  if (typeof opts === "string") {
    opts = {
      encoding: opts
    };
  }
  return [filepath, opts, ...rest];
}
function cleanParamsFilepathDataOpts(filepath, data2, opts, ...rest) {
  filepath = path$1.normalize(filepath);
  if (typeof opts === "undefined" || typeof opts === "function") {
    opts = {};
  }
  if (typeof opts === "string") {
    opts = {
      encoding: opts
    };
  }
  return [filepath, data2, opts, ...rest];
}
function cleanParamsFilepathFilepath(oldFilepath, newFilepath, ...rest) {
  return [path$1.normalize(oldFilepath), path$1.normalize(newFilepath), ...rest];
}
var PromisifiedFS_1 = class PromisifiedFS {
  constructor(name, options = {}) {
    this.init = this.init.bind(this);
    this.readFile = this._wrap(this.readFile, cleanParamsFilepathOpts, false);
    this.writeFile = this._wrap(this.writeFile, cleanParamsFilepathDataOpts, true);
    this.unlink = this._wrap(this.unlink, cleanParamsFilepathOpts, true);
    this.readdir = this._wrap(this.readdir, cleanParamsFilepathOpts, false);
    this.mkdir = this._wrap(this.mkdir, cleanParamsFilepathOpts, true);
    this.rmdir = this._wrap(this.rmdir, cleanParamsFilepathOpts, true);
    this.rename = this._wrap(this.rename, cleanParamsFilepathFilepath, true);
    this.stat = this._wrap(this.stat, cleanParamsFilepathOpts, false);
    this.lstat = this._wrap(this.lstat, cleanParamsFilepathOpts, false);
    this.readlink = this._wrap(this.readlink, cleanParamsFilepathOpts, false);
    this.symlink = this._wrap(this.symlink, cleanParamsFilepathFilepath, true);
    this.backFile = this._wrap(this.backFile, cleanParamsFilepathOpts, true);
    this.du = this._wrap(this.du, cleanParamsFilepathOpts, false);
    this._deactivationPromise = null;
    this._deactivationTimeout = null;
    this._activationPromise = null;
    this._operations = /* @__PURE__ */ new Set();
    if (name) {
      this.init(name, options);
    }
  }
  async init(...args) {
    if (this._initPromiseResolve)
      await this._initPromise;
    this._initPromise = this._init(...args);
    return this._initPromise;
  }
  async _init(name, options = {}) {
    await this._gracefulShutdown();
    if (this._activationPromise)
      await this._deactivate();
    if (this._backend && this._backend.destroy) {
      await this._backend.destroy();
    }
    this._backend = options.backend || new DefaultBackend2();
    if (this._backend.init) {
      await this._backend.init(name, options);
    }
    if (this._initPromiseResolve) {
      this._initPromiseResolve();
      this._initPromiseResolve = null;
    }
    if (!options.defer) {
      this.stat("/");
    }
  }
  async _gracefulShutdown() {
    if (this._operations.size > 0) {
      this._isShuttingDown = true;
      await new Promise((resolve2) => this._gracefulShutdownResolve = resolve2);
      this._isShuttingDown = false;
      this._gracefulShutdownResolve = null;
    }
  }
  _wrap(fn2, paramCleaner, mutating) {
    return async (...args) => {
      args = paramCleaner(...args);
      let op = {
        name: fn2.name,
        args
      };
      this._operations.add(op);
      try {
        await this._activate();
        return await fn2.apply(this, args);
      } finally {
        this._operations.delete(op);
        if (mutating)
          this._backend.saveSuperblock();
        if (this._operations.size === 0) {
          if (!this._deactivationTimeout)
            clearTimeout(this._deactivationTimeout);
          this._deactivationTimeout = setTimeout(this._deactivate.bind(this), 500);
        }
      }
    };
  }
  async _activate() {
    if (!this._initPromise)
      console.warn(new Error(`Attempted to use LightningFS ${this._name} before it was initialized.`));
    await this._initPromise;
    if (this._deactivationTimeout) {
      clearTimeout(this._deactivationTimeout);
      this._deactivationTimeout = null;
    }
    if (this._deactivationPromise)
      await this._deactivationPromise;
    this._deactivationPromise = null;
    if (!this._activationPromise) {
      this._activationPromise = this._backend.activate ? this._backend.activate() : Promise.resolve();
    }
    await this._activationPromise;
  }
  async _deactivate() {
    if (this._activationPromise)
      await this._activationPromise;
    if (!this._deactivationPromise) {
      this._deactivationPromise = this._backend.deactivate ? this._backend.deactivate() : Promise.resolve();
    }
    this._activationPromise = null;
    if (this._gracefulShutdownResolve)
      this._gracefulShutdownResolve();
    return this._deactivationPromise;
  }
  async readFile(filepath, opts) {
    return this._backend.readFile(filepath, opts);
  }
  async writeFile(filepath, data2, opts) {
    await this._backend.writeFile(filepath, data2, opts);
    return null;
  }
  async unlink(filepath, opts) {
    await this._backend.unlink(filepath, opts);
    return null;
  }
  async readdir(filepath, opts) {
    return this._backend.readdir(filepath, opts);
  }
  async mkdir(filepath, opts) {
    await this._backend.mkdir(filepath, opts);
    return null;
  }
  async rmdir(filepath, opts) {
    await this._backend.rmdir(filepath, opts);
    return null;
  }
  async rename(oldFilepath, newFilepath) {
    await this._backend.rename(oldFilepath, newFilepath);
    return null;
  }
  async stat(filepath, opts) {
    const data2 = await this._backend.stat(filepath, opts);
    return new Stat2(data2);
  }
  async lstat(filepath, opts) {
    const data2 = await this._backend.lstat(filepath, opts);
    return new Stat2(data2);
  }
  async readlink(filepath, opts) {
    return this._backend.readlink(filepath, opts);
  }
  async symlink(target, filepath) {
    await this._backend.symlink(target, filepath);
    return null;
  }
  async backFile(filepath, opts) {
    await this._backend.backFile(filepath, opts);
    return null;
  }
  async du(filepath) {
    return this._backend.du(filepath);
  }
  async flush() {
    return this._backend.flush();
  }
};
const once = justOnce;
const PromisifiedFS2 = PromisifiedFS_1;
function wrapCallback(opts, cb) {
  if (typeof opts === "function") {
    cb = opts;
  }
  cb = once(cb);
  const resolve2 = (...args) => cb(null, ...args);
  return [resolve2, cb];
}
var src = class FS {
  constructor(...args) {
    this.promises = new PromisifiedFS2(...args);
    this.init = this.init.bind(this);
    this.readFile = this.readFile.bind(this);
    this.writeFile = this.writeFile.bind(this);
    this.unlink = this.unlink.bind(this);
    this.readdir = this.readdir.bind(this);
    this.mkdir = this.mkdir.bind(this);
    this.rmdir = this.rmdir.bind(this);
    this.rename = this.rename.bind(this);
    this.stat = this.stat.bind(this);
    this.lstat = this.lstat.bind(this);
    this.readlink = this.readlink.bind(this);
    this.symlink = this.symlink.bind(this);
    this.backFile = this.backFile.bind(this);
    this.du = this.du.bind(this);
    this.flush = this.flush.bind(this);
  }
  init(name, options) {
    return this.promises.init(name, options);
  }
  readFile(filepath, opts, cb) {
    const [resolve2, reject] = wrapCallback(opts, cb);
    this.promises.readFile(filepath, opts).then(resolve2).catch(reject);
  }
  writeFile(filepath, data2, opts, cb) {
    const [resolve2, reject] = wrapCallback(opts, cb);
    this.promises.writeFile(filepath, data2, opts).then(resolve2).catch(reject);
  }
  unlink(filepath, opts, cb) {
    const [resolve2, reject] = wrapCallback(opts, cb);
    this.promises.unlink(filepath, opts).then(resolve2).catch(reject);
  }
  readdir(filepath, opts, cb) {
    const [resolve2, reject] = wrapCallback(opts, cb);
    this.promises.readdir(filepath, opts).then(resolve2).catch(reject);
  }
  mkdir(filepath, opts, cb) {
    const [resolve2, reject] = wrapCallback(opts, cb);
    this.promises.mkdir(filepath, opts).then(resolve2).catch(reject);
  }
  rmdir(filepath, opts, cb) {
    const [resolve2, reject] = wrapCallback(opts, cb);
    this.promises.rmdir(filepath, opts).then(resolve2).catch(reject);
  }
  rename(oldFilepath, newFilepath, cb) {
    const [resolve2, reject] = wrapCallback(cb);
    this.promises.rename(oldFilepath, newFilepath).then(resolve2).catch(reject);
  }
  stat(filepath, opts, cb) {
    const [resolve2, reject] = wrapCallback(opts, cb);
    this.promises.stat(filepath).then(resolve2).catch(reject);
  }
  lstat(filepath, opts, cb) {
    const [resolve2, reject] = wrapCallback(opts, cb);
    this.promises.lstat(filepath).then(resolve2).catch(reject);
  }
  readlink(filepath, opts, cb) {
    const [resolve2, reject] = wrapCallback(opts, cb);
    this.promises.readlink(filepath).then(resolve2).catch(reject);
  }
  symlink(target, filepath, cb) {
    const [resolve2, reject] = wrapCallback(cb);
    this.promises.symlink(target, filepath).then(resolve2).catch(reject);
  }
  backFile(filepath, opts, cb) {
    const [resolve2, reject] = wrapCallback(opts, cb);
    this.promises.backFile(filepath, opts).then(resolve2).catch(reject);
  }
  du(filepath, cb) {
    const [resolve2, reject] = wrapCallback(cb);
    this.promises.du(filepath).then(resolve2).catch(reject);
  }
  flush(cb) {
    const [resolve2, reject] = wrapCallback(cb);
    this.promises.flush().then(resolve2).catch(reject);
  }
};
const FS2 = /* @__PURE__ */ getDefaultExportFromCjs(src);
const types$1 = { "application/prs.cww": ["cww"], "application/prs.xsf+xml": ["xsf"], "application/vnd.1000minds.decision-model+xml": ["1km"], "application/vnd.3gpp.pic-bw-large": ["plb"], "application/vnd.3gpp.pic-bw-small": ["psb"], "application/vnd.3gpp.pic-bw-var": ["pvb"], "application/vnd.3gpp2.tcap": ["tcap"], "application/vnd.3m.post-it-notes": ["pwn"], "application/vnd.accpac.simply.aso": ["aso"], "application/vnd.accpac.simply.imp": ["imp"], "application/vnd.acucobol": ["acu"], "application/vnd.acucorp": ["atc", "acutc"], "application/vnd.adobe.air-application-installer-package+zip": ["air"], "application/vnd.adobe.formscentral.fcdt": ["fcdt"], "application/vnd.adobe.fxp": ["fxp", "fxpl"], "application/vnd.adobe.xdp+xml": ["xdp"], "application/vnd.adobe.xfdf": ["*xfdf"], "application/vnd.age": ["age"], "application/vnd.ahead.space": ["ahead"], "application/vnd.airzip.filesecure.azf": ["azf"], "application/vnd.airzip.filesecure.azs": ["azs"], "application/vnd.amazon.ebook": ["azw"], "application/vnd.americandynamics.acc": ["acc"], "application/vnd.amiga.ami": ["ami"], "application/vnd.android.package-archive": ["apk"], "application/vnd.anser-web-certificate-issue-initiation": ["cii"], "application/vnd.anser-web-funds-transfer-initiation": ["fti"], "application/vnd.antix.game-component": ["atx"], "application/vnd.apple.installer+xml": ["mpkg"], "application/vnd.apple.keynote": ["key"], "application/vnd.apple.mpegurl": ["m3u8"], "application/vnd.apple.numbers": ["numbers"], "application/vnd.apple.pages": ["pages"], "application/vnd.apple.pkpass": ["pkpass"], "application/vnd.aristanetworks.swi": ["swi"], "application/vnd.astraea-software.iota": ["iota"], "application/vnd.audiograph": ["aep"], "application/vnd.balsamiq.bmml+xml": ["bmml"], "application/vnd.blueice.multipass": ["mpm"], "application/vnd.bmi": ["bmi"], "application/vnd.businessobjects": ["rep"], "application/vnd.chemdraw+xml": ["cdxml"], "application/vnd.chipnuts.karaoke-mmd": ["mmd"], "application/vnd.cinderella": ["cdy"], "application/vnd.citationstyles.style+xml": ["csl"], "application/vnd.claymore": ["cla"], "application/vnd.cloanto.rp9": ["rp9"], "application/vnd.clonk.c4group": ["c4g", "c4d", "c4f", "c4p", "c4u"], "application/vnd.cluetrust.cartomobile-config": ["c11amc"], "application/vnd.cluetrust.cartomobile-config-pkg": ["c11amz"], "application/vnd.commonspace": ["csp"], "application/vnd.contact.cmsg": ["cdbcmsg"], "application/vnd.cosmocaller": ["cmc"], "application/vnd.crick.clicker": ["clkx"], "application/vnd.crick.clicker.keyboard": ["clkk"], "application/vnd.crick.clicker.palette": ["clkp"], "application/vnd.crick.clicker.template": ["clkt"], "application/vnd.crick.clicker.wordbank": ["clkw"], "application/vnd.criticaltools.wbs+xml": ["wbs"], "application/vnd.ctc-posml": ["pml"], "application/vnd.cups-ppd": ["ppd"], "application/vnd.curl.car": ["car"], "application/vnd.curl.pcurl": ["pcurl"], "application/vnd.dart": ["dart"], "application/vnd.data-vision.rdz": ["rdz"], "application/vnd.dbf": ["dbf"], "application/vnd.dece.data": ["uvf", "uvvf", "uvd", "uvvd"], "application/vnd.dece.ttml+xml": ["uvt", "uvvt"], "application/vnd.dece.unspecified": ["uvx", "uvvx"], "application/vnd.dece.zip": ["uvz", "uvvz"], "application/vnd.denovo.fcselayout-link": ["fe_launch"], "application/vnd.dna": ["dna"], "application/vnd.dolby.mlp": ["mlp"], "application/vnd.dpgraph": ["dpg"], "application/vnd.dreamfactory": ["dfac"], "application/vnd.ds-keypoint": ["kpxx"], "application/vnd.dvb.ait": ["ait"], "application/vnd.dvb.service": ["svc"], "application/vnd.dynageo": ["geo"], "application/vnd.ecowin.chart": ["mag"], "application/vnd.enliven": ["nml"], "application/vnd.epson.esf": ["esf"], "application/vnd.epson.msf": ["msf"], "application/vnd.epson.quickanime": ["qam"], "application/vnd.epson.salt": ["slt"], "application/vnd.epson.ssf": ["ssf"], "application/vnd.eszigno3+xml": ["es3", "et3"], "application/vnd.ezpix-album": ["ez2"], "application/vnd.ezpix-package": ["ez3"], "application/vnd.fdf": ["*fdf"], "application/vnd.fdsn.mseed": ["mseed"], "application/vnd.fdsn.seed": ["seed", "dataless"], "application/vnd.flographit": ["gph"], "application/vnd.fluxtime.clip": ["ftc"], "application/vnd.framemaker": ["fm", "frame", "maker", "book"], "application/vnd.frogans.fnc": ["fnc"], "application/vnd.frogans.ltf": ["ltf"], "application/vnd.fsc.weblaunch": ["fsc"], "application/vnd.fujitsu.oasys": ["oas"], "application/vnd.fujitsu.oasys2": ["oa2"], "application/vnd.fujitsu.oasys3": ["oa3"], "application/vnd.fujitsu.oasysgp": ["fg5"], "application/vnd.fujitsu.oasysprs": ["bh2"], "application/vnd.fujixerox.ddd": ["ddd"], "application/vnd.fujixerox.docuworks": ["xdw"], "application/vnd.fujixerox.docuworks.binder": ["xbd"], "application/vnd.fuzzysheet": ["fzs"], "application/vnd.genomatix.tuxedo": ["txd"], "application/vnd.geogebra.file": ["ggb"], "application/vnd.geogebra.tool": ["ggt"], "application/vnd.geometry-explorer": ["gex", "gre"], "application/vnd.geonext": ["gxt"], "application/vnd.geoplan": ["g2w"], "application/vnd.geospace": ["g3w"], "application/vnd.gmx": ["gmx"], "application/vnd.google-apps.document": ["gdoc"], "application/vnd.google-apps.presentation": ["gslides"], "application/vnd.google-apps.spreadsheet": ["gsheet"], "application/vnd.google-earth.kml+xml": ["kml"], "application/vnd.google-earth.kmz": ["kmz"], "application/vnd.grafeq": ["gqf", "gqs"], "application/vnd.groove-account": ["gac"], "application/vnd.groove-help": ["ghf"], "application/vnd.groove-identity-message": ["gim"], "application/vnd.groove-injector": ["grv"], "application/vnd.groove-tool-message": ["gtm"], "application/vnd.groove-tool-template": ["tpl"], "application/vnd.groove-vcard": ["vcg"], "application/vnd.hal+xml": ["hal"], "application/vnd.handheld-entertainment+xml": ["zmm"], "application/vnd.hbci": ["hbci"], "application/vnd.hhe.lesson-player": ["les"], "application/vnd.hp-hpgl": ["hpgl"], "application/vnd.hp-hpid": ["hpid"], "application/vnd.hp-hps": ["hps"], "application/vnd.hp-jlyt": ["jlt"], "application/vnd.hp-pcl": ["pcl"], "application/vnd.hp-pclxl": ["pclxl"], "application/vnd.hydrostatix.sof-data": ["sfd-hdstx"], "application/vnd.ibm.minipay": ["mpy"], "application/vnd.ibm.modcap": ["afp", "listafp", "list3820"], "application/vnd.ibm.rights-management": ["irm"], "application/vnd.ibm.secure-container": ["sc"], "application/vnd.iccprofile": ["icc", "icm"], "application/vnd.igloader": ["igl"], "application/vnd.immervision-ivp": ["ivp"], "application/vnd.immervision-ivu": ["ivu"], "application/vnd.insors.igm": ["igm"], "application/vnd.intercon.formnet": ["xpw", "xpx"], "application/vnd.intergeo": ["i2g"], "application/vnd.intu.qbo": ["qbo"], "application/vnd.intu.qfx": ["qfx"], "application/vnd.ipunplugged.rcprofile": ["rcprofile"], "application/vnd.irepository.package+xml": ["irp"], "application/vnd.is-xpr": ["xpr"], "application/vnd.isac.fcs": ["fcs"], "application/vnd.jam": ["jam"], "application/vnd.jcp.javame.midlet-rms": ["rms"], "application/vnd.jisp": ["jisp"], "application/vnd.joost.joda-archive": ["joda"], "application/vnd.kahootz": ["ktz", "ktr"], "application/vnd.kde.karbon": ["karbon"], "application/vnd.kde.kchart": ["chrt"], "application/vnd.kde.kformula": ["kfo"], "application/vnd.kde.kivio": ["flw"], "application/vnd.kde.kontour": ["kon"], "application/vnd.kde.kpresenter": ["kpr", "kpt"], "application/vnd.kde.kspread": ["ksp"], "application/vnd.kde.kword": ["kwd", "kwt"], "application/vnd.kenameaapp": ["htke"], "application/vnd.kidspiration": ["kia"], "application/vnd.kinar": ["kne", "knp"], "application/vnd.koan": ["skp", "skd", "skt", "skm"], "application/vnd.kodak-descriptor": ["sse"], "application/vnd.las.las+xml": ["lasxml"], "application/vnd.llamagraphics.life-balance.desktop": ["lbd"], "application/vnd.llamagraphics.life-balance.exchange+xml": ["lbe"], "application/vnd.lotus-1-2-3": ["123"], "application/vnd.lotus-approach": ["apr"], "application/vnd.lotus-freelance": ["pre"], "application/vnd.lotus-notes": ["nsf"], "application/vnd.lotus-organizer": ["org"], "application/vnd.lotus-screencam": ["scm"], "application/vnd.lotus-wordpro": ["lwp"], "application/vnd.macports.portpkg": ["portpkg"], "application/vnd.mapbox-vector-tile": ["mvt"], "application/vnd.mcd": ["mcd"], "application/vnd.medcalcdata": ["mc1"], "application/vnd.mediastation.cdkey": ["cdkey"], "application/vnd.mfer": ["mwf"], "application/vnd.mfmp": ["mfm"], "application/vnd.micrografx.flo": ["flo"], "application/vnd.micrografx.igx": ["igx"], "application/vnd.mif": ["mif"], "application/vnd.mobius.daf": ["daf"], "application/vnd.mobius.dis": ["dis"], "application/vnd.mobius.mbk": ["mbk"], "application/vnd.mobius.mqy": ["mqy"], "application/vnd.mobius.msl": ["msl"], "application/vnd.mobius.plc": ["plc"], "application/vnd.mobius.txf": ["txf"], "application/vnd.mophun.application": ["mpn"], "application/vnd.mophun.certificate": ["mpc"], "application/vnd.mozilla.xul+xml": ["xul"], "application/vnd.ms-artgalry": ["cil"], "application/vnd.ms-cab-compressed": ["cab"], "application/vnd.ms-excel": ["xls", "xlm", "xla", "xlc", "xlt", "xlw"], "application/vnd.ms-excel.addin.macroenabled.12": ["xlam"], "application/vnd.ms-excel.sheet.binary.macroenabled.12": ["xlsb"], "application/vnd.ms-excel.sheet.macroenabled.12": ["xlsm"], "application/vnd.ms-excel.template.macroenabled.12": ["xltm"], "application/vnd.ms-fontobject": ["eot"], "application/vnd.ms-htmlhelp": ["chm"], "application/vnd.ms-ims": ["ims"], "application/vnd.ms-lrm": ["lrm"], "application/vnd.ms-officetheme": ["thmx"], "application/vnd.ms-outlook": ["msg"], "application/vnd.ms-pki.seccat": ["cat"], "application/vnd.ms-pki.stl": ["*stl"], "application/vnd.ms-powerpoint": ["ppt", "pps", "pot"], "application/vnd.ms-powerpoint.addin.macroenabled.12": ["ppam"], "application/vnd.ms-powerpoint.presentation.macroenabled.12": ["pptm"], "application/vnd.ms-powerpoint.slide.macroenabled.12": ["sldm"], "application/vnd.ms-powerpoint.slideshow.macroenabled.12": ["ppsm"], "application/vnd.ms-powerpoint.template.macroenabled.12": ["potm"], "application/vnd.ms-project": ["*mpp", "mpt"], "application/vnd.ms-word.document.macroenabled.12": ["docm"], "application/vnd.ms-word.template.macroenabled.12": ["dotm"], "application/vnd.ms-works": ["wps", "wks", "wcm", "wdb"], "application/vnd.ms-wpl": ["wpl"], "application/vnd.ms-xpsdocument": ["xps"], "application/vnd.mseq": ["mseq"], "application/vnd.musician": ["mus"], "application/vnd.muvee.style": ["msty"], "application/vnd.mynfc": ["taglet"], "application/vnd.neurolanguage.nlu": ["nlu"], "application/vnd.nitf": ["ntf", "nitf"], "application/vnd.noblenet-directory": ["nnd"], "application/vnd.noblenet-sealer": ["nns"], "application/vnd.noblenet-web": ["nnw"], "application/vnd.nokia.n-gage.ac+xml": ["*ac"], "application/vnd.nokia.n-gage.data": ["ngdat"], "application/vnd.nokia.n-gage.symbian.install": ["n-gage"], "application/vnd.nokia.radio-preset": ["rpst"], "application/vnd.nokia.radio-presets": ["rpss"], "application/vnd.novadigm.edm": ["edm"], "application/vnd.novadigm.edx": ["edx"], "application/vnd.novadigm.ext": ["ext"], "application/vnd.oasis.opendocument.chart": ["odc"], "application/vnd.oasis.opendocument.chart-template": ["otc"], "application/vnd.oasis.opendocument.database": ["odb"], "application/vnd.oasis.opendocument.formula": ["odf"], "application/vnd.oasis.opendocument.formula-template": ["odft"], "application/vnd.oasis.opendocument.graphics": ["odg"], "application/vnd.oasis.opendocument.graphics-template": ["otg"], "application/vnd.oasis.opendocument.image": ["odi"], "application/vnd.oasis.opendocument.image-template": ["oti"], "application/vnd.oasis.opendocument.presentation": ["odp"], "application/vnd.oasis.opendocument.presentation-template": ["otp"], "application/vnd.oasis.opendocument.spreadsheet": ["ods"], "application/vnd.oasis.opendocument.spreadsheet-template": ["ots"], "application/vnd.oasis.opendocument.text": ["odt"], "application/vnd.oasis.opendocument.text-master": ["odm"], "application/vnd.oasis.opendocument.text-template": ["ott"], "application/vnd.oasis.opendocument.text-web": ["oth"], "application/vnd.olpc-sugar": ["xo"], "application/vnd.oma.dd2+xml": ["dd2"], "application/vnd.openblox.game+xml": ["obgx"], "application/vnd.openofficeorg.extension": ["oxt"], "application/vnd.openstreetmap.data+xml": ["osm"], "application/vnd.openxmlformats-officedocument.presentationml.presentation": ["pptx"], "application/vnd.openxmlformats-officedocument.presentationml.slide": ["sldx"], "application/vnd.openxmlformats-officedocument.presentationml.slideshow": ["ppsx"], "application/vnd.openxmlformats-officedocument.presentationml.template": ["potx"], "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": ["xlsx"], "application/vnd.openxmlformats-officedocument.spreadsheetml.template": ["xltx"], "application/vnd.openxmlformats-officedocument.wordprocessingml.document": ["docx"], "application/vnd.openxmlformats-officedocument.wordprocessingml.template": ["dotx"], "application/vnd.osgeo.mapguide.package": ["mgp"], "application/vnd.osgi.dp": ["dp"], "application/vnd.osgi.subsystem": ["esa"], "application/vnd.palm": ["pdb", "pqa", "oprc"], "application/vnd.pawaafile": ["paw"], "application/vnd.pg.format": ["str"], "application/vnd.pg.osasli": ["ei6"], "application/vnd.picsel": ["efif"], "application/vnd.pmi.widget": ["wg"], "application/vnd.pocketlearn": ["plf"], "application/vnd.powerbuilder6": ["pbd"], "application/vnd.previewsystems.box": ["box"], "application/vnd.proteus.magazine": ["mgz"], "application/vnd.publishare-delta-tree": ["qps"], "application/vnd.pvi.ptid1": ["ptid"], "application/vnd.pwg-xhtml-print+xml": ["xhtm"], "application/vnd.quark.quarkxpress": ["qxd", "qxt", "qwd", "qwt", "qxl", "qxb"], "application/vnd.rar": ["rar"], "application/vnd.realvnc.bed": ["bed"], "application/vnd.recordare.musicxml": ["mxl"], "application/vnd.recordare.musicxml+xml": ["musicxml"], "application/vnd.rig.cryptonote": ["cryptonote"], "application/vnd.rim.cod": ["cod"], "application/vnd.rn-realmedia": ["rm"], "application/vnd.rn-realmedia-vbr": ["rmvb"], "application/vnd.route66.link66+xml": ["link66"], "application/vnd.sailingtracker.track": ["st"], "application/vnd.seemail": ["see"], "application/vnd.sema": ["sema"], "application/vnd.semd": ["semd"], "application/vnd.semf": ["semf"], "application/vnd.shana.informed.formdata": ["ifm"], "application/vnd.shana.informed.formtemplate": ["itp"], "application/vnd.shana.informed.interchange": ["iif"], "application/vnd.shana.informed.package": ["ipk"], "application/vnd.simtech-mindmapper": ["twd", "twds"], "application/vnd.smaf": ["mmf"], "application/vnd.smart.teacher": ["teacher"], "application/vnd.software602.filler.form+xml": ["fo"], "application/vnd.solent.sdkm+xml": ["sdkm", "sdkd"], "application/vnd.spotfire.dxp": ["dxp"], "application/vnd.spotfire.sfs": ["sfs"], "application/vnd.stardivision.calc": ["sdc"], "application/vnd.stardivision.draw": ["sda"], "application/vnd.stardivision.impress": ["sdd"], "application/vnd.stardivision.math": ["smf"], "application/vnd.stardivision.writer": ["sdw", "vor"], "application/vnd.stardivision.writer-global": ["sgl"], "application/vnd.stepmania.package": ["smzip"], "application/vnd.stepmania.stepchart": ["sm"], "application/vnd.sun.wadl+xml": ["wadl"], "application/vnd.sun.xml.calc": ["sxc"], "application/vnd.sun.xml.calc.template": ["stc"], "application/vnd.sun.xml.draw": ["sxd"], "application/vnd.sun.xml.draw.template": ["std"], "application/vnd.sun.xml.impress": ["sxi"], "application/vnd.sun.xml.impress.template": ["sti"], "application/vnd.sun.xml.math": ["sxm"], "application/vnd.sun.xml.writer": ["sxw"], "application/vnd.sun.xml.writer.global": ["sxg"], "application/vnd.sun.xml.writer.template": ["stw"], "application/vnd.sus-calendar": ["sus", "susp"], "application/vnd.svd": ["svd"], "application/vnd.symbian.install": ["sis", "sisx"], "application/vnd.syncml+xml": ["xsm"], "application/vnd.syncml.dm+wbxml": ["bdm"], "application/vnd.syncml.dm+xml": ["xdm"], "application/vnd.syncml.dmddf+xml": ["ddf"], "application/vnd.tao.intent-module-archive": ["tao"], "application/vnd.tcpdump.pcap": ["pcap", "cap", "dmp"], "application/vnd.tmobile-livetv": ["tmo"], "application/vnd.trid.tpt": ["tpt"], "application/vnd.triscape.mxs": ["mxs"], "application/vnd.trueapp": ["tra"], "application/vnd.ufdl": ["ufd", "ufdl"], "application/vnd.uiq.theme": ["utz"], "application/vnd.umajin": ["umj"], "application/vnd.unity": ["unityweb"], "application/vnd.uoml+xml": ["uoml", "uo"], "application/vnd.vcx": ["vcx"], "application/vnd.visio": ["vsd", "vst", "vss", "vsw"], "application/vnd.visionary": ["vis"], "application/vnd.vsf": ["vsf"], "application/vnd.wap.wbxml": ["wbxml"], "application/vnd.wap.wmlc": ["wmlc"], "application/vnd.wap.wmlscriptc": ["wmlsc"], "application/vnd.webturbo": ["wtb"], "application/vnd.wolfram.player": ["nbp"], "application/vnd.wordperfect": ["wpd"], "application/vnd.wqd": ["wqd"], "application/vnd.wt.stf": ["stf"], "application/vnd.xara": ["xar"], "application/vnd.xfdl": ["xfdl"], "application/vnd.yamaha.hv-dic": ["hvd"], "application/vnd.yamaha.hv-script": ["hvs"], "application/vnd.yamaha.hv-voice": ["hvp"], "application/vnd.yamaha.openscoreformat": ["osf"], "application/vnd.yamaha.openscoreformat.osfpvg+xml": ["osfpvg"], "application/vnd.yamaha.smaf-audio": ["saf"], "application/vnd.yamaha.smaf-phrase": ["spf"], "application/vnd.yellowriver-custom-menu": ["cmp"], "application/vnd.zul": ["zir", "zirz"], "application/vnd.zzazz.deck+xml": ["zaz"], "application/x-7z-compressed": ["7z"], "application/x-abiword": ["abw"], "application/x-ace-compressed": ["ace"], "application/x-apple-diskimage": ["*dmg"], "application/x-arj": ["arj"], "application/x-authorware-bin": ["aab", "x32", "u32", "vox"], "application/x-authorware-map": ["aam"], "application/x-authorware-seg": ["aas"], "application/x-bcpio": ["bcpio"], "application/x-bdoc": ["*bdoc"], "application/x-bittorrent": ["torrent"], "application/x-blorb": ["blb", "blorb"], "application/x-bzip": ["bz"], "application/x-bzip2": ["bz2", "boz"], "application/x-cbr": ["cbr", "cba", "cbt", "cbz", "cb7"], "application/x-cdlink": ["vcd"], "application/x-cfs-compressed": ["cfs"], "application/x-chat": ["chat"], "application/x-chess-pgn": ["pgn"], "application/x-chrome-extension": ["crx"], "application/x-cocoa": ["cco"], "application/x-conference": ["nsc"], "application/x-cpio": ["cpio"], "application/x-csh": ["csh"], "application/x-debian-package": ["*deb", "udeb"], "application/x-dgc-compressed": ["dgc"], "application/x-director": ["dir", "dcr", "dxr", "cst", "cct", "cxt", "w3d", "fgd", "swa"], "application/x-doom": ["wad"], "application/x-dtbncx+xml": ["ncx"], "application/x-dtbook+xml": ["dtb"], "application/x-dtbresource+xml": ["res"], "application/x-dvi": ["dvi"], "application/x-envoy": ["evy"], "application/x-eva": ["eva"], "application/x-font-bdf": ["bdf"], "application/x-font-ghostscript": ["gsf"], "application/x-font-linux-psf": ["psf"], "application/x-font-pcf": ["pcf"], "application/x-font-snf": ["snf"], "application/x-font-type1": ["pfa", "pfb", "pfm", "afm"], "application/x-freearc": ["arc"], "application/x-futuresplash": ["spl"], "application/x-gca-compressed": ["gca"], "application/x-glulx": ["ulx"], "application/x-gnumeric": ["gnumeric"], "application/x-gramps-xml": ["gramps"], "application/x-gtar": ["gtar"], "application/x-hdf": ["hdf"], "application/x-httpd-php": ["php"], "application/x-install-instructions": ["install"], "application/x-iso9660-image": ["*iso"], "application/x-iwork-keynote-sffkey": ["*key"], "application/x-iwork-numbers-sffnumbers": ["*numbers"], "application/x-iwork-pages-sffpages": ["*pages"], "application/x-java-archive-diff": ["jardiff"], "application/x-java-jnlp-file": ["jnlp"], "application/x-keepass2": ["kdbx"], "application/x-latex": ["latex"], "application/x-lua-bytecode": ["luac"], "application/x-lzh-compressed": ["lzh", "lha"], "application/x-makeself": ["run"], "application/x-mie": ["mie"], "application/x-mobipocket-ebook": ["*prc", "mobi"], "application/x-ms-application": ["application"], "application/x-ms-shortcut": ["lnk"], "application/x-ms-wmd": ["wmd"], "application/x-ms-wmz": ["wmz"], "application/x-ms-xbap": ["xbap"], "application/x-msaccess": ["mdb"], "application/x-msbinder": ["obd"], "application/x-mscardfile": ["crd"], "application/x-msclip": ["clp"], "application/x-msdos-program": ["*exe"], "application/x-msdownload": ["*exe", "*dll", "com", "bat", "*msi"], "application/x-msmediaview": ["mvb", "m13", "m14"], "application/x-msmetafile": ["*wmf", "*wmz", "*emf", "emz"], "application/x-msmoney": ["mny"], "application/x-mspublisher": ["pub"], "application/x-msschedule": ["scd"], "application/x-msterminal": ["trm"], "application/x-mswrite": ["wri"], "application/x-netcdf": ["nc", "cdf"], "application/x-ns-proxy-autoconfig": ["pac"], "application/x-nzb": ["nzb"], "application/x-perl": ["pl", "pm"], "application/x-pilot": ["*prc", "*pdb"], "application/x-pkcs12": ["p12", "pfx"], "application/x-pkcs7-certificates": ["p7b", "spc"], "application/x-pkcs7-certreqresp": ["p7r"], "application/x-rar-compressed": ["*rar"], "application/x-redhat-package-manager": ["rpm"], "application/x-research-info-systems": ["ris"], "application/x-sea": ["sea"], "application/x-sh": ["sh"], "application/x-shar": ["shar"], "application/x-shockwave-flash": ["swf"], "application/x-silverlight-app": ["xap"], "application/x-sql": ["*sql"], "application/x-stuffit": ["sit"], "application/x-stuffitx": ["sitx"], "application/x-subrip": ["srt"], "application/x-sv4cpio": ["sv4cpio"], "application/x-sv4crc": ["sv4crc"], "application/x-t3vm-image": ["t3"], "application/x-tads": ["gam"], "application/x-tar": ["tar"], "application/x-tcl": ["tcl", "tk"], "application/x-tex": ["tex"], "application/x-tex-tfm": ["tfm"], "application/x-texinfo": ["texinfo", "texi"], "application/x-tgif": ["*obj"], "application/x-ustar": ["ustar"], "application/x-virtualbox-hdd": ["hdd"], "application/x-virtualbox-ova": ["ova"], "application/x-virtualbox-ovf": ["ovf"], "application/x-virtualbox-vbox": ["vbox"], "application/x-virtualbox-vbox-extpack": ["vbox-extpack"], "application/x-virtualbox-vdi": ["vdi"], "application/x-virtualbox-vhd": ["vhd"], "application/x-virtualbox-vmdk": ["vmdk"], "application/x-wais-source": ["src"], "application/x-web-app-manifest+json": ["webapp"], "application/x-x509-ca-cert": ["der", "crt", "pem"], "application/x-xfig": ["fig"], "application/x-xliff+xml": ["*xlf"], "application/x-xpinstall": ["xpi"], "application/x-xz": ["xz"], "application/x-zmachine": ["z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8"], "audio/vnd.dece.audio": ["uva", "uvva"], "audio/vnd.digital-winds": ["eol"], "audio/vnd.dra": ["dra"], "audio/vnd.dts": ["dts"], "audio/vnd.dts.hd": ["dtshd"], "audio/vnd.lucent.voice": ["lvp"], "audio/vnd.ms-playready.media.pya": ["pya"], "audio/vnd.nuera.ecelp4800": ["ecelp4800"], "audio/vnd.nuera.ecelp7470": ["ecelp7470"], "audio/vnd.nuera.ecelp9600": ["ecelp9600"], "audio/vnd.rip": ["rip"], "audio/x-aac": ["*aac"], "audio/x-aiff": ["aif", "aiff", "aifc"], "audio/x-caf": ["caf"], "audio/x-flac": ["flac"], "audio/x-m4a": ["*m4a"], "audio/x-matroska": ["mka"], "audio/x-mpegurl": ["m3u"], "audio/x-ms-wax": ["wax"], "audio/x-ms-wma": ["wma"], "audio/x-pn-realaudio": ["ram", "ra"], "audio/x-pn-realaudio-plugin": ["rmp"], "audio/x-realaudio": ["*ra"], "audio/x-wav": ["*wav"], "chemical/x-cdx": ["cdx"], "chemical/x-cif": ["cif"], "chemical/x-cmdf": ["cmdf"], "chemical/x-cml": ["cml"], "chemical/x-csml": ["csml"], "chemical/x-xyz": ["xyz"], "image/prs.btif": ["btif", "btf"], "image/prs.pti": ["pti"], "image/vnd.adobe.photoshop": ["psd"], "image/vnd.airzip.accelerator.azv": ["azv"], "image/vnd.dece.graphic": ["uvi", "uvvi", "uvg", "uvvg"], "image/vnd.djvu": ["djvu", "djv"], "image/vnd.dvb.subtitle": ["*sub"], "image/vnd.dwg": ["dwg"], "image/vnd.dxf": ["dxf"], "image/vnd.fastbidsheet": ["fbs"], "image/vnd.fpx": ["fpx"], "image/vnd.fst": ["fst"], "image/vnd.fujixerox.edmics-mmr": ["mmr"], "image/vnd.fujixerox.edmics-rlc": ["rlc"], "image/vnd.microsoft.icon": ["ico"], "image/vnd.ms-dds": ["dds"], "image/vnd.ms-modi": ["mdi"], "image/vnd.ms-photo": ["wdp"], "image/vnd.net-fpx": ["npx"], "image/vnd.pco.b16": ["b16"], "image/vnd.tencent.tap": ["tap"], "image/vnd.valve.source.texture": ["vtf"], "image/vnd.wap.wbmp": ["wbmp"], "image/vnd.xiff": ["xif"], "image/vnd.zbrush.pcx": ["pcx"], "image/x-3ds": ["3ds"], "image/x-cmu-raster": ["ras"], "image/x-cmx": ["cmx"], "image/x-freehand": ["fh", "fhc", "fh4", "fh5", "fh7"], "image/x-icon": ["*ico"], "image/x-jng": ["jng"], "image/x-mrsid-image": ["sid"], "image/x-ms-bmp": ["*bmp"], "image/x-pcx": ["*pcx"], "image/x-pict": ["pic", "pct"], "image/x-portable-anymap": ["pnm"], "image/x-portable-bitmap": ["pbm"], "image/x-portable-graymap": ["pgm"], "image/x-portable-pixmap": ["ppm"], "image/x-rgb": ["rgb"], "image/x-tga": ["tga"], "image/x-xbitmap": ["xbm"], "image/x-xpixmap": ["xpm"], "image/x-xwindowdump": ["xwd"], "message/vnd.wfa.wsc": ["wsc"], "model/vnd.cld": ["cld"], "model/vnd.collada+xml": ["dae"], "model/vnd.dwf": ["dwf"], "model/vnd.gdl": ["gdl"], "model/vnd.gtw": ["gtw"], "model/vnd.mts": ["mts"], "model/vnd.opengex": ["ogex"], "model/vnd.parasolid.transmit.binary": ["x_b"], "model/vnd.parasolid.transmit.text": ["x_t"], "model/vnd.pytha.pyox": ["pyo", "pyox"], "model/vnd.sap.vds": ["vds"], "model/vnd.usda": ["usda"], "model/vnd.usdz+zip": ["usdz"], "model/vnd.valve.source.compiled-map": ["bsp"], "model/vnd.vtu": ["vtu"], "text/prs.lines.tag": ["dsc"], "text/vnd.curl": ["curl"], "text/vnd.curl.dcurl": ["dcurl"], "text/vnd.curl.mcurl": ["mcurl"], "text/vnd.curl.scurl": ["scurl"], "text/vnd.dvb.subtitle": ["sub"], "text/vnd.familysearch.gedcom": ["ged"], "text/vnd.fly": ["fly"], "text/vnd.fmi.flexstor": ["flx"], "text/vnd.graphviz": ["gv"], "text/vnd.in3d.3dml": ["3dml"], "text/vnd.in3d.spot": ["spot"], "text/vnd.sun.j2me.app-descriptor": ["jad"], "text/vnd.wap.wml": ["wml"], "text/vnd.wap.wmlscript": ["wmls"], "text/x-asm": ["s", "asm"], "text/x-c": ["c", "cc", "cxx", "cpp", "h", "hh", "dic"], "text/x-component": ["htc"], "text/x-fortran": ["f", "for", "f77", "f90"], "text/x-handlebars-template": ["hbs"], "text/x-java-source": ["java"], "text/x-lua": ["lua"], "text/x-markdown": ["mkd"], "text/x-nfo": ["nfo"], "text/x-opml": ["opml"], "text/x-org": ["*org"], "text/x-pascal": ["p", "pas"], "text/x-processing": ["pde"], "text/x-sass": ["sass"], "text/x-scss": ["scss"], "text/x-setext": ["etx"], "text/x-sfv": ["sfv"], "text/x-suse-ymp": ["ymp"], "text/x-uuencode": ["uu"], "text/x-vcalendar": ["vcs"], "text/x-vcard": ["vcf"], "video/vnd.dece.hd": ["uvh", "uvvh"], "video/vnd.dece.mobile": ["uvm", "uvvm"], "video/vnd.dece.pd": ["uvp", "uvvp"], "video/vnd.dece.sd": ["uvs", "uvvs"], "video/vnd.dece.video": ["uvv", "uvvv"], "video/vnd.dvb.file": ["dvb"], "video/vnd.fvt": ["fvt"], "video/vnd.mpegurl": ["mxu", "m4u"], "video/vnd.ms-playready.media.pyv": ["pyv"], "video/vnd.uvvu.mp4": ["uvu", "uvvu"], "video/vnd.vivo": ["viv"], "video/x-f4v": ["f4v"], "video/x-fli": ["fli"], "video/x-flv": ["flv"], "video/x-m4v": ["m4v"], "video/x-matroska": ["mkv", "mk3d", "mks"], "video/x-mng": ["mng"], "video/x-ms-asf": ["asf", "asx"], "video/x-ms-vob": ["vob"], "video/x-ms-wm": ["wm"], "video/x-ms-wmv": ["wmv"], "video/x-ms-wmx": ["wmx"], "video/x-ms-wvx": ["wvx"], "video/x-msvideo": ["avi"], "video/x-sgi-movie": ["movie"], "video/x-smv": ["smv"], "x-conference/x-cooltalk": ["ice"] };
Object.freeze(types$1);
const types = { "application/andrew-inset": ["ez"], "application/appinstaller": ["appinstaller"], "application/applixware": ["aw"], "application/appx": ["appx"], "application/appxbundle": ["appxbundle"], "application/atom+xml": ["atom"], "application/atomcat+xml": ["atomcat"], "application/atomdeleted+xml": ["atomdeleted"], "application/atomsvc+xml": ["atomsvc"], "application/atsc-dwd+xml": ["dwd"], "application/atsc-held+xml": ["held"], "application/atsc-rsat+xml": ["rsat"], "application/automationml-aml+xml": ["aml"], "application/automationml-amlx+zip": ["amlx"], "application/bdoc": ["bdoc"], "application/calendar+xml": ["xcs"], "application/ccxml+xml": ["ccxml"], "application/cdfx+xml": ["cdfx"], "application/cdmi-capability": ["cdmia"], "application/cdmi-container": ["cdmic"], "application/cdmi-domain": ["cdmid"], "application/cdmi-object": ["cdmio"], "application/cdmi-queue": ["cdmiq"], "application/cpl+xml": ["cpl"], "application/cu-seeme": ["cu"], "application/cwl": ["cwl"], "application/dash+xml": ["mpd"], "application/dash-patch+xml": ["mpp"], "application/davmount+xml": ["davmount"], "application/docbook+xml": ["dbk"], "application/dssc+der": ["dssc"], "application/dssc+xml": ["xdssc"], "application/ecmascript": ["ecma"], "application/emma+xml": ["emma"], "application/emotionml+xml": ["emotionml"], "application/epub+zip": ["epub"], "application/exi": ["exi"], "application/express": ["exp"], "application/fdf": ["fdf"], "application/fdt+xml": ["fdt"], "application/font-tdpfr": ["pfr"], "application/geo+json": ["geojson"], "application/gml+xml": ["gml"], "application/gpx+xml": ["gpx"], "application/gxf": ["gxf"], "application/gzip": ["gz"], "application/hjson": ["hjson"], "application/hyperstudio": ["stk"], "application/inkml+xml": ["ink", "inkml"], "application/ipfix": ["ipfix"], "application/its+xml": ["its"], "application/java-archive": ["jar", "war", "ear"], "application/java-serialized-object": ["ser"], "application/java-vm": ["class"], "application/javascript": ["*js"], "application/json": ["json", "map"], "application/json5": ["json5"], "application/jsonml+json": ["jsonml"], "application/ld+json": ["jsonld"], "application/lgr+xml": ["lgr"], "application/lost+xml": ["lostxml"], "application/mac-binhex40": ["hqx"], "application/mac-compactpro": ["cpt"], "application/mads+xml": ["mads"], "application/manifest+json": ["webmanifest"], "application/marc": ["mrc"], "application/marcxml+xml": ["mrcx"], "application/mathematica": ["ma", "nb", "mb"], "application/mathml+xml": ["mathml"], "application/mbox": ["mbox"], "application/media-policy-dataset+xml": ["mpf"], "application/mediaservercontrol+xml": ["mscml"], "application/metalink+xml": ["metalink"], "application/metalink4+xml": ["meta4"], "application/mets+xml": ["mets"], "application/mmt-aei+xml": ["maei"], "application/mmt-usd+xml": ["musd"], "application/mods+xml": ["mods"], "application/mp21": ["m21", "mp21"], "application/mp4": ["*mp4", "*mpg4", "mp4s", "m4p"], "application/msix": ["msix"], "application/msixbundle": ["msixbundle"], "application/msword": ["doc", "dot"], "application/mxf": ["mxf"], "application/n-quads": ["nq"], "application/n-triples": ["nt"], "application/node": ["cjs"], "application/octet-stream": ["bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "exe", "dll", "deb", "dmg", "iso", "img", "msi", "msp", "msm", "buffer"], "application/oda": ["oda"], "application/oebps-package+xml": ["opf"], "application/ogg": ["ogx"], "application/omdoc+xml": ["omdoc"], "application/onenote": ["onetoc", "onetoc2", "onetmp", "onepkg"], "application/oxps": ["oxps"], "application/p2p-overlay+xml": ["relo"], "application/patch-ops-error+xml": ["xer"], "application/pdf": ["pdf"], "application/pgp-encrypted": ["pgp"], "application/pgp-keys": ["asc"], "application/pgp-signature": ["sig", "*asc"], "application/pics-rules": ["prf"], "application/pkcs10": ["p10"], "application/pkcs7-mime": ["p7m", "p7c"], "application/pkcs7-signature": ["p7s"], "application/pkcs8": ["p8"], "application/pkix-attr-cert": ["ac"], "application/pkix-cert": ["cer"], "application/pkix-crl": ["crl"], "application/pkix-pkipath": ["pkipath"], "application/pkixcmp": ["pki"], "application/pls+xml": ["pls"], "application/postscript": ["ai", "eps", "ps"], "application/provenance+xml": ["provx"], "application/pskc+xml": ["pskcxml"], "application/raml+yaml": ["raml"], "application/rdf+xml": ["rdf", "owl"], "application/reginfo+xml": ["rif"], "application/relax-ng-compact-syntax": ["rnc"], "application/resource-lists+xml": ["rl"], "application/resource-lists-diff+xml": ["rld"], "application/rls-services+xml": ["rs"], "application/route-apd+xml": ["rapd"], "application/route-s-tsid+xml": ["sls"], "application/route-usd+xml": ["rusd"], "application/rpki-ghostbusters": ["gbr"], "application/rpki-manifest": ["mft"], "application/rpki-roa": ["roa"], "application/rsd+xml": ["rsd"], "application/rss+xml": ["rss"], "application/rtf": ["rtf"], "application/sbml+xml": ["sbml"], "application/scvp-cv-request": ["scq"], "application/scvp-cv-response": ["scs"], "application/scvp-vp-request": ["spq"], "application/scvp-vp-response": ["spp"], "application/sdp": ["sdp"], "application/senml+xml": ["senmlx"], "application/sensml+xml": ["sensmlx"], "application/set-payment-initiation": ["setpay"], "application/set-registration-initiation": ["setreg"], "application/shf+xml": ["shf"], "application/sieve": ["siv", "sieve"], "application/smil+xml": ["smi", "smil"], "application/sparql-query": ["rq"], "application/sparql-results+xml": ["srx"], "application/sql": ["sql"], "application/srgs": ["gram"], "application/srgs+xml": ["grxml"], "application/sru+xml": ["sru"], "application/ssdl+xml": ["ssdl"], "application/ssml+xml": ["ssml"], "application/swid+xml": ["swidtag"], "application/tei+xml": ["tei", "teicorpus"], "application/thraud+xml": ["tfi"], "application/timestamped-data": ["tsd"], "application/toml": ["toml"], "application/trig": ["trig"], "application/ttml+xml": ["ttml"], "application/ubjson": ["ubj"], "application/urc-ressheet+xml": ["rsheet"], "application/urc-targetdesc+xml": ["td"], "application/voicexml+xml": ["vxml"], "application/wasm": ["wasm"], "application/watcherinfo+xml": ["wif"], "application/widget": ["wgt"], "application/winhlp": ["hlp"], "application/wsdl+xml": ["wsdl"], "application/wspolicy+xml": ["wspolicy"], "application/xaml+xml": ["xaml"], "application/xcap-att+xml": ["xav"], "application/xcap-caps+xml": ["xca"], "application/xcap-diff+xml": ["xdf"], "application/xcap-el+xml": ["xel"], "application/xcap-ns+xml": ["xns"], "application/xenc+xml": ["xenc"], "application/xfdf": ["xfdf"], "application/xhtml+xml": ["xhtml", "xht"], "application/xliff+xml": ["xlf"], "application/xml": ["xml", "xsl", "xsd", "rng"], "application/xml-dtd": ["dtd"], "application/xop+xml": ["xop"], "application/xproc+xml": ["xpl"], "application/xslt+xml": ["*xsl", "xslt"], "application/xspf+xml": ["xspf"], "application/xv+xml": ["mxml", "xhvml", "xvml", "xvm"], "application/yang": ["yang"], "application/yin+xml": ["yin"], "application/zip": ["zip"], "audio/3gpp": ["*3gpp"], "audio/aac": ["adts", "aac"], "audio/adpcm": ["adp"], "audio/amr": ["amr"], "audio/basic": ["au", "snd"], "audio/midi": ["mid", "midi", "kar", "rmi"], "audio/mobile-xmf": ["mxmf"], "audio/mp3": ["*mp3"], "audio/mp4": ["m4a", "mp4a"], "audio/mpeg": ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"], "audio/ogg": ["oga", "ogg", "spx", "opus"], "audio/s3m": ["s3m"], "audio/silk": ["sil"], "audio/wav": ["wav"], "audio/wave": ["*wav"], "audio/webm": ["weba"], "audio/xm": ["xm"], "font/collection": ["ttc"], "font/otf": ["otf"], "font/ttf": ["ttf"], "font/woff": ["woff"], "font/woff2": ["woff2"], "image/aces": ["exr"], "image/apng": ["apng"], "image/avci": ["avci"], "image/avcs": ["avcs"], "image/avif": ["avif"], "image/bmp": ["bmp", "dib"], "image/cgm": ["cgm"], "image/dicom-rle": ["drle"], "image/dpx": ["dpx"], "image/emf": ["emf"], "image/fits": ["fits"], "image/g3fax": ["g3"], "image/gif": ["gif"], "image/heic": ["heic"], "image/heic-sequence": ["heics"], "image/heif": ["heif"], "image/heif-sequence": ["heifs"], "image/hej2k": ["hej2"], "image/hsj2": ["hsj2"], "image/ief": ["ief"], "image/jls": ["jls"], "image/jp2": ["jp2", "jpg2"], "image/jpeg": ["jpeg", "jpg", "jpe"], "image/jph": ["jph"], "image/jphc": ["jhc"], "image/jpm": ["jpm", "jpgm"], "image/jpx": ["jpx", "jpf"], "image/jxr": ["jxr"], "image/jxra": ["jxra"], "image/jxrs": ["jxrs"], "image/jxs": ["jxs"], "image/jxsc": ["jxsc"], "image/jxsi": ["jxsi"], "image/jxss": ["jxss"], "image/ktx": ["ktx"], "image/ktx2": ["ktx2"], "image/png": ["png"], "image/sgi": ["sgi"], "image/svg+xml": ["svg", "svgz"], "image/t38": ["t38"], "image/tiff": ["tif", "tiff"], "image/tiff-fx": ["tfx"], "image/webp": ["webp"], "image/wmf": ["wmf"], "message/disposition-notification": ["disposition-notification"], "message/global": ["u8msg"], "message/global-delivery-status": ["u8dsn"], "message/global-disposition-notification": ["u8mdn"], "message/global-headers": ["u8hdr"], "message/rfc822": ["eml", "mime"], "model/3mf": ["3mf"], "model/gltf+json": ["gltf"], "model/gltf-binary": ["glb"], "model/iges": ["igs", "iges"], "model/jt": ["jt"], "model/mesh": ["msh", "mesh", "silo"], "model/mtl": ["mtl"], "model/obj": ["obj"], "model/prc": ["prc"], "model/step+xml": ["stpx"], "model/step+zip": ["stpz"], "model/step-xml+zip": ["stpxz"], "model/stl": ["stl"], "model/u3d": ["u3d"], "model/vrml": ["wrl", "vrml"], "model/x3d+binary": ["*x3db", "x3dbz"], "model/x3d+fastinfoset": ["x3db"], "model/x3d+vrml": ["*x3dv", "x3dvz"], "model/x3d+xml": ["x3d", "x3dz"], "model/x3d-vrml": ["x3dv"], "text/cache-manifest": ["appcache", "manifest"], "text/calendar": ["ics", "ifb"], "text/coffeescript": ["coffee", "litcoffee"], "text/css": ["css"], "text/csv": ["csv"], "text/html": ["html", "htm", "shtml"], "text/jade": ["jade"], "text/javascript": ["js", "mjs"], "text/jsx": ["jsx"], "text/less": ["less"], "text/markdown": ["md", "markdown"], "text/mathml": ["mml"], "text/mdx": ["mdx"], "text/n3": ["n3"], "text/plain": ["txt", "text", "conf", "def", "list", "log", "in", "ini"], "text/richtext": ["rtx"], "text/rtf": ["*rtf"], "text/sgml": ["sgml", "sgm"], "text/shex": ["shex"], "text/slim": ["slim", "slm"], "text/spdx": ["spdx"], "text/stylus": ["stylus", "styl"], "text/tab-separated-values": ["tsv"], "text/troff": ["t", "tr", "roff", "man", "me", "ms"], "text/turtle": ["ttl"], "text/uri-list": ["uri", "uris", "urls"], "text/vcard": ["vcard"], "text/vtt": ["vtt"], "text/wgsl": ["wgsl"], "text/xml": ["*xml"], "text/yaml": ["yaml", "yml"], "video/3gpp": ["3gp", "3gpp"], "video/3gpp2": ["3g2"], "video/h261": ["h261"], "video/h263": ["h263"], "video/h264": ["h264"], "video/iso.segment": ["m4s"], "video/jpeg": ["jpgv"], "video/jpm": ["*jpm", "*jpgm"], "video/mj2": ["mj2", "mjp2"], "video/mp2t": ["ts"], "video/mp4": ["mp4", "mp4v", "mpg4"], "video/mpeg": ["mpeg", "mpg", "mpe", "m1v", "m2v"], "video/ogg": ["ogv"], "video/quicktime": ["qt", "mov"], "video/webm": ["webm"] };
Object.freeze(types);
var __classPrivateFieldGet = function(receiver, state2, kind, f2) {
  if (kind === "a" && !f2)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state2 === "function" ? receiver !== state2 || !f2 : !state2.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state2.get(receiver);
};
var _Mime_extensionToType, _Mime_typeToExtension, _Mime_typeToExtensions;
class Mime {
  constructor(...args) {
    _Mime_extensionToType.set(this, /* @__PURE__ */ new Map());
    _Mime_typeToExtension.set(this, /* @__PURE__ */ new Map());
    _Mime_typeToExtensions.set(this, /* @__PURE__ */ new Map());
    for (const arg of args) {
      this.define(arg);
    }
  }
  define(typeMap, force = false) {
    for (let [type, extensions] of Object.entries(typeMap)) {
      type = type.toLowerCase();
      extensions = extensions.map((ext) => ext.toLowerCase());
      if (!__classPrivateFieldGet(this, _Mime_typeToExtensions, "f").has(type)) {
        __classPrivateFieldGet(this, _Mime_typeToExtensions, "f").set(type, /* @__PURE__ */ new Set());
      }
      const allExtensions = __classPrivateFieldGet(this, _Mime_typeToExtensions, "f").get(type);
      let first = true;
      for (let extension of extensions) {
        const starred = extension.startsWith("*");
        extension = starred ? extension.slice(1) : extension;
        allExtensions == null ? void 0 : allExtensions.add(extension);
        if (first) {
          __classPrivateFieldGet(this, _Mime_typeToExtension, "f").set(type, extension);
        }
        first = false;
        if (starred)
          continue;
        const currentType = __classPrivateFieldGet(this, _Mime_extensionToType, "f").get(extension);
        if (currentType && currentType != type && !force) {
          throw new Error(`"${type} -> ${extension}" conflicts with "${currentType} -> ${extension}". Pass \`force=true\` to override this definition.`);
        }
        __classPrivateFieldGet(this, _Mime_extensionToType, "f").set(extension, type);
      }
    }
    return this;
  }
  getType(path2) {
    if (typeof path2 !== "string")
      return null;
    const last = path2.replace(/^.*[/\\]/, "").toLowerCase();
    const ext = last.replace(/^.*\./, "").toLowerCase();
    const hasPath = last.length < path2.length;
    const hasDot = ext.length < last.length - 1;
    if (!hasDot && hasPath)
      return null;
    return __classPrivateFieldGet(this, _Mime_extensionToType, "f").get(ext) ?? null;
  }
  getExtension(type) {
    var _a2;
    if (typeof type !== "string")
      return null;
    type = (_a2 = type == null ? void 0 : type.split) == null ? void 0 : _a2.call(type, ";")[0];
    return (type && __classPrivateFieldGet(this, _Mime_typeToExtension, "f").get(type.trim().toLowerCase())) ?? null;
  }
  getAllExtensions(type) {
    if (typeof type !== "string")
      return null;
    return __classPrivateFieldGet(this, _Mime_typeToExtensions, "f").get(type.toLowerCase()) ?? null;
  }
  _freeze() {
    this.define = () => {
      throw new Error("define() not allowed for built-in Mime objects. See https://github.com/broofa/mime/blob/main/README.md#custom-mime-instances");
    };
    Object.freeze(this);
    for (const extensions of __classPrivateFieldGet(this, _Mime_typeToExtensions, "f").values()) {
      Object.freeze(extensions);
    }
    return this;
  }
  _getTestState() {
    return {
      types: __classPrivateFieldGet(this, _Mime_extensionToType, "f"),
      extensions: __classPrivateFieldGet(this, _Mime_typeToExtension, "f")
    };
  }
}
_Mime_extensionToType = /* @__PURE__ */ new WeakMap(), _Mime_typeToExtension = /* @__PURE__ */ new WeakMap(), _Mime_typeToExtensions = /* @__PURE__ */ new WeakMap();
const mime = new Mime(types, types$1)._freeze();
function assertPath(path2) {
  if (typeof path2 !== "string") {
    throw new TypeError("Path must be a string. Received " + JSON.stringify(path2));
  }
}
function normalizeStringPosix(path2, allowAboveRoot) {
  var res = "";
  var lastSegmentLength = 0;
  var lastSlash = -1;
  var dots = 0;
  var code;
  for (var i2 = 0; i2 <= path2.length; ++i2) {
    if (i2 < path2.length)
      code = path2.charCodeAt(i2);
    else if (code === 47)
      break;
    else
      code = 47;
    if (code === 47) {
      if (lastSlash === i2 - 1 || dots === 1)
        ;
      else if (lastSlash !== i2 - 1 && dots === 2) {
        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 || res.charCodeAt(res.length - 2) !== 46) {
          if (res.length > 2) {
            var lastSlashIndex = res.lastIndexOf("/");
            if (lastSlashIndex !== res.length - 1) {
              if (lastSlashIndex === -1) {
                res = "";
                lastSegmentLength = 0;
              } else {
                res = res.slice(0, lastSlashIndex);
                lastSegmentLength = res.length - 1 - res.lastIndexOf("/");
              }
              lastSlash = i2;
              dots = 0;
              continue;
            }
          } else if (res.length === 2 || res.length === 1) {
            res = "";
            lastSegmentLength = 0;
            lastSlash = i2;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          if (res.length > 0)
            res += "/..";
          else
            res = "..";
          lastSegmentLength = 2;
        }
      } else {
        if (res.length > 0)
          res += "/" + path2.slice(lastSlash + 1, i2);
        else
          res = path2.slice(lastSlash + 1, i2);
        lastSegmentLength = i2 - lastSlash - 1;
      }
      lastSlash = i2;
      dots = 0;
    } else if (code === 46 && dots !== -1) {
      ++dots;
    } else {
      dots = -1;
    }
  }
  return res;
}
function _format(sep, pathObject) {
  var dir = pathObject.dir || pathObject.root;
  var base = pathObject.base || (pathObject.name || "") + (pathObject.ext || "");
  if (!dir) {
    return base;
  }
  if (dir === pathObject.root) {
    return dir + base;
  }
  return dir + sep + base;
}
var posix = {
  // path.resolve([from ...], to)
  resolve: function resolve() {
    var resolvedPath = "";
    var resolvedAbsolute = false;
    var cwd;
    for (var i2 = arguments.length - 1; i2 >= -1 && !resolvedAbsolute; i2--) {
      var path2;
      if (i2 >= 0)
        path2 = arguments[i2];
      else {
        if (cwd === void 0)
          cwd = process.cwd();
        path2 = cwd;
      }
      assertPath(path2);
      if (path2.length === 0) {
        continue;
      }
      resolvedPath = path2 + "/" + resolvedPath;
      resolvedAbsolute = path2.charCodeAt(0) === 47;
    }
    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);
    if (resolvedAbsolute) {
      if (resolvedPath.length > 0)
        return "/" + resolvedPath;
      else
        return "/";
    } else if (resolvedPath.length > 0) {
      return resolvedPath;
    } else {
      return ".";
    }
  },
  normalize: function normalize(path2) {
    assertPath(path2);
    if (path2.length === 0)
      return ".";
    var isAbsolute2 = path2.charCodeAt(0) === 47;
    var trailingSeparator = path2.charCodeAt(path2.length - 1) === 47;
    path2 = normalizeStringPosix(path2, !isAbsolute2);
    if (path2.length === 0 && !isAbsolute2)
      path2 = ".";
    if (path2.length > 0 && trailingSeparator)
      path2 += "/";
    if (isAbsolute2)
      return "/" + path2;
    return path2;
  },
  isAbsolute: function isAbsolute(path2) {
    assertPath(path2);
    return path2.length > 0 && path2.charCodeAt(0) === 47;
  },
  join: function join() {
    if (arguments.length === 0)
      return ".";
    var joined;
    for (var i2 = 0; i2 < arguments.length; ++i2) {
      var arg = arguments[i2];
      assertPath(arg);
      if (arg.length > 0) {
        if (joined === void 0)
          joined = arg;
        else
          joined += "/" + arg;
      }
    }
    if (joined === void 0)
      return ".";
    return posix.normalize(joined);
  },
  relative: function relative(from, to) {
    assertPath(from);
    assertPath(to);
    if (from === to)
      return "";
    from = posix.resolve(from);
    to = posix.resolve(to);
    if (from === to)
      return "";
    var fromStart = 1;
    for (; fromStart < from.length; ++fromStart) {
      if (from.charCodeAt(fromStart) !== 47)
        break;
    }
    var fromEnd = from.length;
    var fromLen = fromEnd - fromStart;
    var toStart = 1;
    for (; toStart < to.length; ++toStart) {
      if (to.charCodeAt(toStart) !== 47)
        break;
    }
    var toEnd = to.length;
    var toLen = toEnd - toStart;
    var length = fromLen < toLen ? fromLen : toLen;
    var lastCommonSep = -1;
    var i2 = 0;
    for (; i2 <= length; ++i2) {
      if (i2 === length) {
        if (toLen > length) {
          if (to.charCodeAt(toStart + i2) === 47) {
            return to.slice(toStart + i2 + 1);
          } else if (i2 === 0) {
            return to.slice(toStart + i2);
          }
        } else if (fromLen > length) {
          if (from.charCodeAt(fromStart + i2) === 47) {
            lastCommonSep = i2;
          } else if (i2 === 0) {
            lastCommonSep = 0;
          }
        }
        break;
      }
      var fromCode = from.charCodeAt(fromStart + i2);
      var toCode = to.charCodeAt(toStart + i2);
      if (fromCode !== toCode)
        break;
      else if (fromCode === 47)
        lastCommonSep = i2;
    }
    var out = "";
    for (i2 = fromStart + lastCommonSep + 1; i2 <= fromEnd; ++i2) {
      if (i2 === fromEnd || from.charCodeAt(i2) === 47) {
        if (out.length === 0)
          out += "..";
        else
          out += "/..";
      }
    }
    if (out.length > 0)
      return out + to.slice(toStart + lastCommonSep);
    else {
      toStart += lastCommonSep;
      if (to.charCodeAt(toStart) === 47)
        ++toStart;
      return to.slice(toStart);
    }
  },
  _makeLong: function _makeLong(path2) {
    return path2;
  },
  dirname: function dirname2(path2) {
    assertPath(path2);
    if (path2.length === 0)
      return ".";
    var code = path2.charCodeAt(0);
    var hasRoot = code === 47;
    var end = -1;
    var matchedSlash = true;
    for (var i2 = path2.length - 1; i2 >= 1; --i2) {
      code = path2.charCodeAt(i2);
      if (code === 47) {
        if (!matchedSlash) {
          end = i2;
          break;
        }
      } else {
        matchedSlash = false;
      }
    }
    if (end === -1)
      return hasRoot ? "/" : ".";
    if (hasRoot && end === 1)
      return "//";
    return path2.slice(0, end);
  },
  basename: function basename2(path2, ext) {
    if (ext !== void 0 && typeof ext !== "string")
      throw new TypeError('"ext" argument must be a string');
    assertPath(path2);
    var start = 0;
    var end = -1;
    var matchedSlash = true;
    var i2;
    if (ext !== void 0 && ext.length > 0 && ext.length <= path2.length) {
      if (ext.length === path2.length && ext === path2)
        return "";
      var extIdx = ext.length - 1;
      var firstNonSlashEnd = -1;
      for (i2 = path2.length - 1; i2 >= 0; --i2) {
        var code = path2.charCodeAt(i2);
        if (code === 47) {
          if (!matchedSlash) {
            start = i2 + 1;
            break;
          }
        } else {
          if (firstNonSlashEnd === -1) {
            matchedSlash = false;
            firstNonSlashEnd = i2 + 1;
          }
          if (extIdx >= 0) {
            if (code === ext.charCodeAt(extIdx)) {
              if (--extIdx === -1) {
                end = i2;
              }
            } else {
              extIdx = -1;
              end = firstNonSlashEnd;
            }
          }
        }
      }
      if (start === end)
        end = firstNonSlashEnd;
      else if (end === -1)
        end = path2.length;
      return path2.slice(start, end);
    } else {
      for (i2 = path2.length - 1; i2 >= 0; --i2) {
        if (path2.charCodeAt(i2) === 47) {
          if (!matchedSlash) {
            start = i2 + 1;
            break;
          }
        } else if (end === -1) {
          matchedSlash = false;
          end = i2 + 1;
        }
      }
      if (end === -1)
        return "";
      return path2.slice(start, end);
    }
  },
  extname: function extname(path2) {
    assertPath(path2);
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    var preDotState = 0;
    for (var i2 = path2.length - 1; i2 >= 0; --i2) {
      var code = path2.charCodeAt(i2);
      if (code === 47) {
        if (!matchedSlash) {
          startPart = i2 + 1;
          break;
        }
        continue;
      }
      if (end === -1) {
        matchedSlash = false;
        end = i2 + 1;
      }
      if (code === 46) {
        if (startDot === -1)
          startDot = i2;
        else if (preDotState !== 1)
          preDotState = 1;
      } else if (startDot !== -1) {
        preDotState = -1;
      }
    }
    if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
    preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      return "";
    }
    return path2.slice(startDot, end);
  },
  format: function format(pathObject) {
    if (pathObject === null || typeof pathObject !== "object") {
      throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof pathObject);
    }
    return _format("/", pathObject);
  },
  parse: function parse(path2) {
    assertPath(path2);
    var ret = { root: "", dir: "", base: "", ext: "", name: "" };
    if (path2.length === 0)
      return ret;
    var code = path2.charCodeAt(0);
    var isAbsolute2 = code === 47;
    var start;
    if (isAbsolute2) {
      ret.root = "/";
      start = 1;
    } else {
      start = 0;
    }
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    var i2 = path2.length - 1;
    var preDotState = 0;
    for (; i2 >= start; --i2) {
      code = path2.charCodeAt(i2);
      if (code === 47) {
        if (!matchedSlash) {
          startPart = i2 + 1;
          break;
        }
        continue;
      }
      if (end === -1) {
        matchedSlash = false;
        end = i2 + 1;
      }
      if (code === 46) {
        if (startDot === -1)
          startDot = i2;
        else if (preDotState !== 1)
          preDotState = 1;
      } else if (startDot !== -1) {
        preDotState = -1;
      }
    }
    if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
    preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      if (end !== -1) {
        if (startPart === 0 && isAbsolute2)
          ret.base = ret.name = path2.slice(1, end);
        else
          ret.base = ret.name = path2.slice(startPart, end);
      }
    } else {
      if (startPart === 0 && isAbsolute2) {
        ret.name = path2.slice(1, startDot);
        ret.base = path2.slice(1, end);
      } else {
        ret.name = path2.slice(startPart, startDot);
        ret.base = path2.slice(startPart, end);
      }
      ret.ext = path2.slice(startDot, end);
    }
    if (startPart > 0)
      ret.dir = path2.slice(0, startPart - 1);
    else if (isAbsolute2)
      ret.dir = "/";
    return ret;
  },
  sep: "/",
  delimiter: ":",
  win32: null,
  posix: null
};
posix.posix = posix;
var pathBrowserify = posix;
const path = /* @__PURE__ */ getDefaultExportFromCjs(pathBrowserify);
const data$3 = {
  "width": 24,
  "height": 24,
  "body": '<path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Zm4-10v4m4-4v2m4-2v6"/>'
};
var _default$3 = data$3;
const data$2 = {
  "width": 24,
  "height": 24,
  "body": '<path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M22 12H2m3.45-6.89L2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11zM6 16h.01M10 16h.01"/>'
};
var _default$2 = data$2;
const Overview = () => {
  const {
    inProcess: uploadData,
    activity
  } = state;
  return u$1(Card, {
    className: "rounded-br-none rounded-tl-none border-0 bg-base-100",
    children: u$1(CardBody, {
      className: "gap-0",
      children: [u$1("div", {
        className: "flex items-center justify-between",
        children: [u$1("p", {
          className: "font-medium",
          children: "Canister Overview"
        }), u$1(Button, {
          disabled: true,
          color: "ghost",
          size: "sm",
          className: "text-success hover:bg-success/20",
          children: "Deposit Stars"
        })]
      }), u$1("div", {
        className: "mt-3 rounded bg-primary/5 p-4",
        children: [u$1("div", {
          className: "flex items-center gap-3",
          children: [u$1(Icon, {
            icon: _default$2,
            fontSize: 18,
            className: "text-primary"
          }), u$1("span", {
            className: "text-base font-medium text-primary",
            children: ["Free Space ", u$1("span", {
              class: "font-bold",
              "hx-get": "/size",
              "hx-trigger": "load",
              children: "-"
            }), " Kb"]
          }), u$1("span", {
            className: "ms-auto text-sm font-semibold text-primary",
            children: "5 GB"
          })]
        }), u$1("p", {
          className: "mt-3 text-sm font-medium text-base-content/70",
          children: "Used 0%"
        }), u$1(Progress, {
          max: 250,
          value: 1,
          color: "primary",
          className: "mt-0 h-1.5  bg-primary/20"
        })]
      }), u$1("p", {
        className: "mt-6 text-sm font-medium text-base-content/70",
        children: "In Process"
      }), u$1("div", {
        className: "mt-3",
        children: u$1(UploadProcess, {
          uploadData
        })
      }), u$1("div", {
        className: "mt-6",
        children: u$1(Activity, {})
      })]
    })
  });
};
const data$1 = {
  "width": 24,
  "height": 24,
  "body": '<path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4m14-7l-5-5l-5 5m5-5v12"/>'
};
var _default$1 = data$1;
const data = {
  "width": 24,
  "height": 24,
  "body": '<path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 17V3m-6 8l6 6l6-6m1 10H5"/>'
};
var _default = data;
const FileUploader = (props) => {
  return u$1("div", {
    className: "mt-4",
    children: u$1("form", {
      "hx-post": "/uploadFiles",
      "hx-target": "#UploadProcess",
      "hx-swap": "beforeend",
      children: [u$1("div", {
        class: "filepond--wrapper",
        children: u$1("input", {
          type: "file",
          ...props
        })
      }), u$1("input", {
        value: '[{"value":"personal"}]',
        name: "input-custom-dropdown",
        class: "tagify--custom-dropdown",
        placeholder: "Add tags",
        _: "\ninit set inputElem to me js(inputElem) tagify = new Tagify(inputElem, { maxTags: 10, }) end "
      }), u$1("div", {
        className: "mt-8 text-end",
        children: u$1(Button, {
          _: "on click remove @open from <dialog/> then remove .modal-open from <dialog/> then add @checked='true' to <div[role='rightDrawer'] .drawer-toggle />",
          "hx-disabled-elt": "this",
          color: "primary",
          size: "sm",
          startIcon: u$1(Icon, {
            icon: _default,
            className: "size-4"
          }),
          children: "Import"
        })
      })]
    })
  });
};
const UploadButton = () => {
  return u$1(k$3, {
    children: [u$1(Button, {
      _: "on click add @open to <dialog[role='files']/> then add .modal-open to <dialog[role='files']/>",
      startIcon: u$1(Icon, {
        icon: _default$1,
        className: "size-4"
      }),
      size: "sm",
      "aria-label": "Upload file",
      color: "ghost",
      className: " border-base-content/20",
      children: "Upload"
    }), u$1(Modal, {
      open: false,
      backdrop: true,
      role: "files",
      children: [u$1("div", {
        className: "flex items-center justify-between",
        children: [u$1("p", {
          className: "font-medium",
          children: "Upload Files"
        }), u$1("form", {
          method: "dialog",
          children: u$1(Button, {
            color: "ghost",
            size: "sm",
            "aria-label": "Close upload file modal",
            _: "on click remove @open from <dialog/> then remove .modal-open from <dialog/>",
            shape: "circle",
            startIcon: u$1(Icon, {
              icon: _default$a,
              className: "size-5"
            })
          })
        })]
      }), u$1(FileUploader, {
        _: "\ninit js() const inputElement = document.querySelector(`input[type='file']`); const pond = FilePond.create(inputElement, { acceptedFileTypes: ['image/*'], maxFileSize: '1MB' }); end\n",
        "data-max-file-size": "2MB"
      })]
    })]
  });
};
function FileManager(props) {
  return u$1("div", {
    class: "size-full",
    children: u$1("div", {
      class: "flex overflow-hidden",
      children: u$1("div", {
        class: "main-wrapper overflow-auto",
        children: u$1("div", {
          class: "flex h-full flex-col ",
          children: [u$1(Topbar, {
            theme: props.theme
          }), u$1("div", {
            class: "content-wrapper grow bg-content-background p-6 transition-all",
            children: [u$1("div", {
              children: [u$1("div", {
                className: "grid grid-cols-1 gap-6",
                children: u$1("div", {
                  className: "col-span-1",
                  children: [u$1("div", {
                    className: "flex items-center justify-between",
                    children: [u$1("h3", {
                      className: "text-lg font-medium",
                      children: "Storage"
                    }), u$1("div", {
                      className: "inline-flex items-center gap-3",
                      children: [u$1(Button, {
                        startIcon: u$1(Icon, {
                          icon: _default$3,
                          fontSize: 16
                        }),
                        _: "on click toggle [@checked=true] on <div[role='rightDrawer'] .drawer-toggle />",
                        size: "sm",
                        color: "ghost",
                        className: "inline border-base-content/20"
                      }), u$1(UploadButton, {})]
                    })]
                  }), u$1("h3", {
                    className: "mt-6 text-base font-medium",
                    children: "My Images"
                  }), u$1("div", {
                    className: "mt-3",
                    children: u$1(AllFiles, {})
                  })]
                })
              }), u$1(Drawer, {
                role: "rightDrawer",
                open: false,
                end: true,
                sideClassName: "z-[100]",
                side: u$1(Overview, {})
              })]
            }), u$1(Toast, {
              vertical: "bottom",
              horizontal: "end",
              children: u$1(Alert, {
                id: "htmx-alert",
                status: "error",
                className: "hidden"
              })
            })]
          })]
        })
      })
    })
  });
}
self.addEventListener("error", (err) => {
  console.error("SW error", err.toString());
});
self.addEventListener("install", (event) => {
  console.log("Service Worker installing.");
  self.skipWaiting();
});
self.addEventListener("activate", (event) => {
  console.log("Service Worker activating.");
  event.waitUntil(self.clients.claim());
});
self.addEventListener("message", (event) => {
  console.log("YYY");
  debugger;
  if (event.data && event.data.type === "SKIP_WAITING") {
    self.skipWaiting();
  }
});
const app = new Wayne();
const {
  promises: fs
} = new FS2("__galaxy__");
app.use(FileSystem({
  path,
  fs,
  mime,
  prefix: "__fs__"
}));
const defaultCollectionName = "Personal";
app.get("/myFileIds", async (req, res) => {
  const collection = req.params.collection;
  const pictureIds = await backendActor.listPictureIds(collection);
  const storageFiles = [];
  if (pictureIds.length == 0) {
    const exampleFileName = "example.jpg";
    {
      addFileToProcess({
        name: exampleFileName,
        size: 0,
        percent: 1,
        type: "image/png",
        id: null
      }, mockFile());
      processFile(exampleFileName);
    }
    storageFiles.push({
      "name": exampleFileName
    });
  }
  for (const it of pictureIds) {
    const [owner, collection2, fileName] = it.split("/");
    storageFiles.push({
      "name": fileName
    });
  }
  return res.html(P(u$1(FilesTableBody, {
    storageFiles
  })));
});
app.get("/fileInfo/{name}", async (req, res) => {
  const fileName = req.params.name;
  const owner = state.principal;
  const collection = state.principal;
  const fileId = `${owner}/${collection}/${fileName}`;
  const cachedFile = await fs.readFile(`${fileId}`);
  const file = {
    "name": fileName,
    "collection": collection,
    "owner": owner,
    "content": [],
    "createdAt": 0,
    "extension": "",
    "fileId": fileId,
    "uploadedAt": 0
  };
  if (cachedFile) {
    file.size = cachedFile.length;
    file.content = cachedFile;
    return u$1(StorageFileRow, {
      file
    });
  }
  const remoteFile = await backendActor.readPicture(collection, fileName);
  if (remoteFile && remoteFile[0]) {
    await fs.writeFile(`${fileId}`, remoteFile[0].content);
    file.content = remoteFile[0].content;
    file.size = remoteFile[0].content.length;
    file.uploadedAt = remoteFile[0].uploadedAt;
    return u$1(StorageFileRow, {
      file
    });
  }
  await sleep$1(1e3);
  return u$1(LoadingFileRow, {
    file
  });
});
app.get("/size", async (req, res) => {
  const size = await backendActor.getMemorySize();
  state.sizeInKb = (size / BigInt(1e3)).toString();
  return res.html(P(u$1("span", {
    children: state.sizeInKb
  })));
});
app.get("/whoami", async (req, res) => {
  await authorize();
  const principal = await backendActor.whoami();
  state.principal = principal.toString();
  return res.html(P(u$1("span", {
    children: state.principal
  })));
});
app.get("/generate-login-page", async (req, res) => {
  const loginPage = P(u$1(LoginPage, {}));
  const it = `
    <!DOCTYPE html>
    <html lang="en">

    <head>
      <meta charset="UTF-8" />
      <link rel="icon" type="image/svg+xml" href="/favicon.ico" />
      <meta name="viewport" content="width=device-width, initial-scale=1.0" />
      <title>Galaxy IC</title>
          <link href="/main.css" rel="stylesheet" />
      <link href="/index.css" rel="stylesheet" />
          <link href="/styles/app.css" rel="stylesheet" />
          <script src="/htmx/htmx2.min.js"><\/script>
          <script src="/htmx/sse.js"><\/script>
          <script type="text/hyperscript" src="/scripts/may26._hs"><\/script>
          <script src="/htmx/_hyperscript.min.js"><\/script>
          <script type="module" src="/assets/login.js"><\/script>
    </head>
    <body>
      ${loginPage}
      <script type="module" src="/src/main.js"><\/script>
    </body>

    </html>
  `;
  return res.html(it);
});
app.get("/", async (req, res) => {
  const theme = state.isDarkTheme ? "dark" : "light";
  const prefix = `<!DOCTYPE html><html data-theme="${theme}" >
    <head lang="en">
      <meta charSet="UTF-8" />
      <title>Galaxy File Manager</title>
      <meta name="viewport" content="width=device-width, initial-scale=1.0" />
      <link href="/main.css" rel="stylesheet" />
  <link href="/index.css" rel="stylesheet" />
      <link href="/styles/app.css" rel="stylesheet" />
      <script src="/htmx/htmx2.min.js"><\/script>
      <script src="/htmx/sse.js"><\/script>
      <script type="text/hyperscript" src="/scripts/may26._hs"><\/script>
      <script src="/htmx/_hyperscript.min.js"><\/script>
      <script src="/htmx/eventsource.js"><\/script>
      <script type="module" src="/scripts/jun2.js"><\/script>
            
      <link href="/filepond/filepond.css" rel="stylesheet" />
      <link
          href="/filepond/filepond-plugin-image-preview.css"
          rel="stylesheet"
      />
      <script src="/tagify/tagify.js"><\/script>
      <script src="/tagify/tagify.polyfills.min.js"><\/script>
      <link href="/tagify/tagify.css" rel="stylesheet" type="text/css" />
    </head>
    <body _="on every htmx:beforeSend in <button:not(.no-disable)/> 
         tell it 
             toggle [@disabled='true'] until htmx:afterOnLoad
  on every htmx:sendError call alert('sendError' + it)

  on htmx:responseError
    put 'Unexpected Response Error' into #htmx-alert's innerHTML
    then remove .hidden from #htmx-alert
    then wait 2s then add .hidden to #htmx-alert
  "
    
  >`;
  const suffix = `
      <script src="/filepond/filepond-plugin-image-preview.js"><\/script>
      <script src="/filepond/filepond-plugin-file-encode.js"><\/script>
      <script src="/filepond/filepond-plugin-file-validate-type.js"><\/script>
      <script src="/filepond/filepond-plugin-image-validate-size.js"><\/script>
      <script src="/filepond/filepond.js"><\/script>
      <script>
          FilePond.registerPlugin(FilePondPluginImagePreview);
          FilePond.registerPlugin(FilePondPluginFileEncode);
          FilePond.registerPlugin(FilePondPluginFileValidateType);
          FilePond.registerPlugin(FilePondPluginImageValidateSize);
      <\/script>
  </body></html>`;
  const content = P(u$1(FileManager, {
    theme
  }));
  const html2 = prefix + content + suffix;
  return res.html(html2);
});
app.get("/canvas", async (req, res) => {
  const theme = state.isDarkTheme ? "dark" : "light";
  const prefix = `<!DOCTYPE html><html data-theme="${theme}">
    <head lang="en">
      <meta charSet="UTF-8" />
      <title>Galaxy File Manager</title>
      <meta name="viewport" content="width=device-width, initial-scale=1.0" />
      <link href="/main.css" rel="stylesheet" />
      <link href="/index.css" rel="stylesheet" />
      <link href="styles/app.css" rel="stylesheet" />
      <script src="/htmx/htmx2.min.js"><\/script>
      <script src="/htmx/_hyperscript.min.js"><\/script>
      <script src="/excalidraw/react.development.js"><\/script>
      <script src="/excalidraw/react-dom.development.js"><\/script>
      <script
        type="text/javascript"
        src="/excalidraw/excalidraw.development.js"
      ><\/script>
    </head>
    <body>`;
  const suffix = `
    <script type="text/javascript">
      const App = () => {
        return React.createElement(
          React.Fragment,
          null,
          React.createElement(
            "div",
            {
              style: { height: "500px" },
            },
            React.createElement(ExcalidrawLib.Excalidraw),
          ),
        );
      };

      const excalidrawWrapper = document.getElementById("app");
      const root = ReactDOM.createRoot(excalidrawWrapper);
      root.render(React.createElement(App));

      // ea.updateScene()
    <\/script>
    </body></html>`;
  const content = P(u$1(CanvasPage, {
    theme
  }));
  const html2 = prefix + content + suffix;
  res.html(html2);
});
app.get("/toggleTheme", (req, res) => {
  state.isDarkTheme = !state.isDarkTheme;
  res.text("OK");
});
const addFileToProcess = (file, fileContent) => {
  state.inProcess.push(file);
  state.contentCache[file.name] = fileContent;
};
const encodeArrayBuffer = (file) => Array.from(new Uint8Array(file));
async function processFile(fileName) {
  console.log(`processFile: Start processing file with name: ${fileName}`);
  const file = state.inProcess.find((it) => it.name == fileName);
  console.log(`processFile: Found file in state.inProcess: ${JSON.stringify(file)}`);
  const encoded = state.contentCache[fileName];
  console.log(`processFile: Retrieved file content from state.contentCache: ${encoded.length}`);
  const blob = b64toBlob(encoded, file.type);
  const bsf = await blob.arrayBuffer();
  const fileInfo = {
    "name": file.name,
    "createdAt": Number(Date.now() * 1e3),
    "size": file.size,
    "collection": defaultCollectionName,
    "extension": getFileExtension(file.type),
    "content": encodeArrayBuffer(bsf)
  };
  console.log(`processFile: Created fileInfo object: ${JSON.stringify(fileInfo.name)}`);
  const fileId = (await backendActor.putFile(fileInfo))[0];
  console.log(`processFile: Received fileId from backend: ${fileId}`);
  if (fileId) {
    console.log(`processFile: fileId exists, updating state.inProcess`);
    state.inProcess = state.inProcess.map((it) => {
      if (it.name == fileName) {
        it.id = fileId;
        it.percent = 100;
        console.log(`processFile: Updated file in state.inProcess: ${JSON.stringify(it)}`);
      }
      return it;
    });
  } else {
    console.log(`processFile: fileId does not exist, no updates made to state.inProcess`);
  }
  console.log(`processFile: Finished processing file with name: ${fileName}`);
}
app.post("/uploadFiles", async (req, res) => {
  const formData = await req.formData();
  const files = [];
  for (let entry of formData.entries()) {
    if (entry[0] === "filepond") {
      const file = JSON.parse(entry[1]);
      files.push(file);
      addFileToProcess({
        "name": file.name,
        "size": file.size,
        "percent": 0,
        "type": file.type,
        "id": null
      }, file.data);
      processFile(file.name);
    }
  }
  const uploadData = files.map((file) => {
    return {
      "name": file.name,
      "size": file.size,
      "percent": 0
    };
  });
  res.html(P(u$1("div", {
    children: uploadData.map((process2, index2) => u$1(SingleProcess, {
      process: process2
    }, index2))
  })));
});
app.get("/sse", function(req, res) {
  console.log("sse handler");
  const stream = res.sse({
    onClose() {
      clearInterval(timerId);
    }
  });
  var timerId = setInterval(function() {
    for (const it of state.inProcess) {
      if (it.percent < 100) {
        it.percent += Math.ceil(Math.random() * 7);
        if (it.percent >= 100) {
          it.percent = 99;
        }
        stream.send({
          event: "progress-" + it.name,
          data: P(u$1("span", {
            children: [it.percent, "%"]
          }))
        });
        stream.send({
          event: `progress-${it.name}-indicator`,
          data: P(u$1(Progress, {
            "sse-swap": `progress-${it.name}-indicator`,
            className: "mt-0 h-1 bg-base-content/10 align-super",
            color: "success",
            max: 100,
            value: it.percent
          }))
        });
      } else {
        const fileRow = {
          "name": it.name
        };
        stream.send({
          event: "completed-" + it.name
        });
        state.inProcess = state.inProcess.filter((ut) => {
          return it.name != ut.name;
        });
        const node = u$1(ActivityItem, {
          fileName: it.name,
          size: `${it.size}`
        });
        stream.send({
          event: "completed",
          data: P(node)
        });
        stream.send({
          event: "completed-fileRow",
          data: P(u$1(LoadingFileRow, {
            file: fileRow
          }))
        });
        console.log("completed");
      }
    }
  }, 1e3);
});
app.get("/image/{id}", async function(req, res) {
  const imageId = encodeURIComponent(req.params.id);
  const file = await backendActor.getFileInfo(imageId);
  const content = file[0].content;
  console.log("content", content);
  return res.blob(content);
});
app.get("/now", (req, res) => {
  const now = (/* @__PURE__ */ new Date()).toLocaleTimeString();
  console.log("second now", now);
  return res.html(`<h1>${now}</h1>`);
});
app.get("*", function(req, res) {
  const accept = req.headers.get("Accept");
  if (accept.match(/text\/html/)) {
    res.html(P(u$1(NotFoundPage, {})));
  } else {
    res.fetch(req);
  }
});
function __vite__mapDeps(indexes) {
  if (!__vite__mapDeps.viteFileDeps) {
    __vite__mapDeps.viteFileDeps = []
  }
  return indexes.map((i) => __vite__mapDeps.viteFileDeps[i])
}